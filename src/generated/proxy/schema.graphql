schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "accessible"
"""
type accessible {
  comment: String
  name: String!

  """An array relationship"""
  templates(
    """distinct select on columns"""
    distinct_on: [templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [templates_order_by!]

    """filter the rows returned"""
    where: templates_bool_exp
  ): [templates!]!

  """An aggregate relationship"""
  templates_aggregate(
    """distinct select on columns"""
    distinct_on: [templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [templates_order_by!]

    """filter the rows returned"""
    where: templates_bool_exp
  ): templates_aggregate!
}

"""
aggregated selection of "accessible"
"""
type accessible_aggregate {
  aggregate: accessible_aggregate_fields
  nodes: [accessible!]!
}

"""
aggregate fields of "accessible"
"""
type accessible_aggregate_fields {
  count(columns: [accessible_select_column!], distinct: Boolean): Int!
  max: accessible_max_fields
  min: accessible_min_fields
}

"""
Boolean expression to filter rows from the table "accessible". All fields are combined with a logical 'AND'.
"""
input accessible_bool_exp {
  _and: [accessible_bool_exp!]
  _not: accessible_bool_exp
  _or: [accessible_bool_exp!]
  comment: String_comparison_exp
  name: String_comparison_exp
  templates: templates_bool_exp
}

"""
unique or primary key constraints on table "accessible"
"""
enum accessible_constraint {
  """unique or primary key constraint"""
  accessible_pkey
}

"""
input type for inserting data into table "accessible"
"""
input accessible_insert_input {
  comment: String
  name: String
  templates: templates_arr_rel_insert_input
}

"""aggregate max on columns"""
type accessible_max_fields {
  comment: String
  name: String
}

"""aggregate min on columns"""
type accessible_min_fields {
  comment: String
  name: String
}

"""
response of any mutation on the table "accessible"
"""
type accessible_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [accessible!]!
}

"""
input type for inserting object relation for remote table "accessible"
"""
input accessible_obj_rel_insert_input {
  data: accessible_insert_input!

  """on conflict condition"""
  on_conflict: accessible_on_conflict
}

"""
on conflict condition type for table "accessible"
"""
input accessible_on_conflict {
  constraint: accessible_constraint!
  update_columns: [accessible_update_column!]! = []
  where: accessible_bool_exp
}

"""Ordering options when selecting data from "accessible"."""
input accessible_order_by {
  comment: order_by
  name: order_by
  templates_aggregate: templates_aggregate_order_by
}

"""primary key columns input for table: accessible"""
input accessible_pk_columns_input {
  name: String!
}

"""
select columns of table "accessible"
"""
enum accessible_select_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
input type for updating data in table "accessible"
"""
input accessible_set_input {
  comment: String
  name: String
}

"""
update columns of table "accessible"
"""
enum accessible_update_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
columns and relationships of "anonymous_answers"
"""
type anonymous_answers {
  """An object relationship"""
  anonymous_query: anonymous_queries!
  anonymous_query_id: bigint!
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  deleted_at: timestamptz
  id: bigint!
  properties: String
  region: String!
  title: String!
  updated_at: timestamptz
}

"""
aggregated selection of "anonymous_answers"
"""
type anonymous_answers_aggregate {
  aggregate: anonymous_answers_aggregate_fields
  nodes: [anonymous_answers!]!
}

"""
aggregate fields of "anonymous_answers"
"""
type anonymous_answers_aggregate_fields {
  avg: anonymous_answers_avg_fields
  count(columns: [anonymous_answers_select_column!], distinct: Boolean): Int!
  max: anonymous_answers_max_fields
  min: anonymous_answers_min_fields
  stddev: anonymous_answers_stddev_fields
  stddev_pop: anonymous_answers_stddev_pop_fields
  stddev_samp: anonymous_answers_stddev_samp_fields
  sum: anonymous_answers_sum_fields
  var_pop: anonymous_answers_var_pop_fields
  var_samp: anonymous_answers_var_samp_fields
  variance: anonymous_answers_variance_fields
}

"""
order by aggregate values of table "anonymous_answers"
"""
input anonymous_answers_aggregate_order_by {
  avg: anonymous_answers_avg_order_by
  count: order_by
  max: anonymous_answers_max_order_by
  min: anonymous_answers_min_order_by
  stddev: anonymous_answers_stddev_order_by
  stddev_pop: anonymous_answers_stddev_pop_order_by
  stddev_samp: anonymous_answers_stddev_samp_order_by
  sum: anonymous_answers_sum_order_by
  var_pop: anonymous_answers_var_pop_order_by
  var_samp: anonymous_answers_var_samp_order_by
  variance: anonymous_answers_variance_order_by
}

"""
input type for inserting array relation for remote table "anonymous_answers"
"""
input anonymous_answers_arr_rel_insert_input {
  data: [anonymous_answers_insert_input!]!

  """on conflict condition"""
  on_conflict: anonymous_answers_on_conflict
}

"""aggregate avg on columns"""
type anonymous_answers_avg_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by avg() on columns of table "anonymous_answers"
"""
input anonymous_answers_avg_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "anonymous_answers". All fields are combined with a logical 'AND'.
"""
input anonymous_answers_bool_exp {
  _and: [anonymous_answers_bool_exp!]
  _not: anonymous_answers_bool_exp
  _or: [anonymous_answers_bool_exp!]
  anonymous_query: anonymous_queries_bool_exp
  anonymous_query_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  deleted_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  properties: String_comparison_exp
  region: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "anonymous_answers"
"""
enum anonymous_answers_constraint {
  """unique or primary key constraint"""
  idx_51372_primary
}

"""
input type for incrementing numeric columns in table "anonymous_answers"
"""
input anonymous_answers_inc_input {
  anonymous_query_id: bigint
  id: bigint
}

"""
input type for inserting data into table "anonymous_answers"
"""
input anonymous_answers_insert_input {
  anonymous_query: anonymous_queries_obj_rel_insert_input
  anonymous_query_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  properties: String
  region: String
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type anonymous_answers_max_fields {
  anonymous_query_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  properties: String
  region: String
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "anonymous_answers"
"""
input anonymous_answers_max_order_by {
  anonymous_query_id: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  properties: order_by
  region: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type anonymous_answers_min_fields {
  anonymous_query_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  properties: String
  region: String
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "anonymous_answers"
"""
input anonymous_answers_min_order_by {
  anonymous_query_id: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  properties: order_by
  region: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "anonymous_answers"
"""
type anonymous_answers_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [anonymous_answers!]!
}

"""
on conflict condition type for table "anonymous_answers"
"""
input anonymous_answers_on_conflict {
  constraint: anonymous_answers_constraint!
  update_columns: [anonymous_answers_update_column!]! = []
  where: anonymous_answers_bool_exp
}

"""Ordering options when selecting data from "anonymous_answers"."""
input anonymous_answers_order_by {
  anonymous_query: anonymous_queries_order_by
  anonymous_query_id: order_by
  created_at: order_by
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  properties: order_by
  region: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: anonymous_answers"""
input anonymous_answers_pk_columns_input {
  id: bigint!
}

"""
select columns of table "anonymous_answers"
"""
enum anonymous_answers_select_column {
  """column name"""
  anonymous_query_id

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  properties

  """column name"""
  region

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "anonymous_answers"
"""
input anonymous_answers_set_input {
  anonymous_query_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  properties: String
  region: String
  title: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type anonymous_answers_stddev_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by stddev() on columns of table "anonymous_answers"
"""
input anonymous_answers_stddev_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type anonymous_answers_stddev_pop_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "anonymous_answers"
"""
input anonymous_answers_stddev_pop_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type anonymous_answers_stddev_samp_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "anonymous_answers"
"""
input anonymous_answers_stddev_samp_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type anonymous_answers_sum_fields {
  anonymous_query_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "anonymous_answers"
"""
input anonymous_answers_sum_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""
update columns of table "anonymous_answers"
"""
enum anonymous_answers_update_column {
  """column name"""
  anonymous_query_id

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  properties

  """column name"""
  region

  """column name"""
  title

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type anonymous_answers_var_pop_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "anonymous_answers"
"""
input anonymous_answers_var_pop_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type anonymous_answers_var_samp_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "anonymous_answers"
"""
input anonymous_answers_var_samp_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type anonymous_answers_variance_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by variance() on columns of table "anonymous_answers"
"""
input anonymous_answers_variance_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""
columns and relationships of "anonymous_invitations"
"""
type anonymous_invitations {
  """An object relationship"""
  anonymous_query: anonymous_queries!
  anonymous_query_id: bigint!
  id: bigint!
  invitation_code: String!
}

"""
aggregated selection of "anonymous_invitations"
"""
type anonymous_invitations_aggregate {
  aggregate: anonymous_invitations_aggregate_fields
  nodes: [anonymous_invitations!]!
}

"""
aggregate fields of "anonymous_invitations"
"""
type anonymous_invitations_aggregate_fields {
  avg: anonymous_invitations_avg_fields
  count(columns: [anonymous_invitations_select_column!], distinct: Boolean): Int!
  max: anonymous_invitations_max_fields
  min: anonymous_invitations_min_fields
  stddev: anonymous_invitations_stddev_fields
  stddev_pop: anonymous_invitations_stddev_pop_fields
  stddev_samp: anonymous_invitations_stddev_samp_fields
  sum: anonymous_invitations_sum_fields
  var_pop: anonymous_invitations_var_pop_fields
  var_samp: anonymous_invitations_var_samp_fields
  variance: anonymous_invitations_variance_fields
}

"""
order by aggregate values of table "anonymous_invitations"
"""
input anonymous_invitations_aggregate_order_by {
  avg: anonymous_invitations_avg_order_by
  count: order_by
  max: anonymous_invitations_max_order_by
  min: anonymous_invitations_min_order_by
  stddev: anonymous_invitations_stddev_order_by
  stddev_pop: anonymous_invitations_stddev_pop_order_by
  stddev_samp: anonymous_invitations_stddev_samp_order_by
  sum: anonymous_invitations_sum_order_by
  var_pop: anonymous_invitations_var_pop_order_by
  var_samp: anonymous_invitations_var_samp_order_by
  variance: anonymous_invitations_variance_order_by
}

"""
input type for inserting array relation for remote table "anonymous_invitations"
"""
input anonymous_invitations_arr_rel_insert_input {
  data: [anonymous_invitations_insert_input!]!

  """on conflict condition"""
  on_conflict: anonymous_invitations_on_conflict
}

"""aggregate avg on columns"""
type anonymous_invitations_avg_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by avg() on columns of table "anonymous_invitations"
"""
input anonymous_invitations_avg_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "anonymous_invitations". All fields are combined with a logical 'AND'.
"""
input anonymous_invitations_bool_exp {
  _and: [anonymous_invitations_bool_exp!]
  _not: anonymous_invitations_bool_exp
  _or: [anonymous_invitations_bool_exp!]
  anonymous_query: anonymous_queries_bool_exp
  anonymous_query_id: bigint_comparison_exp
  id: bigint_comparison_exp
  invitation_code: String_comparison_exp
}

"""
unique or primary key constraints on table "anonymous_invitations"
"""
enum anonymous_invitations_constraint {
  """unique or primary key constraint"""
  idx_51382_anonymous_invitations_invitation_code_anonymous_query

  """unique or primary key constraint"""
  idx_51382_primary
}

"""
input type for incrementing numeric columns in table "anonymous_invitations"
"""
input anonymous_invitations_inc_input {
  anonymous_query_id: bigint
  id: bigint
}

"""
input type for inserting data into table "anonymous_invitations"
"""
input anonymous_invitations_insert_input {
  anonymous_query: anonymous_queries_obj_rel_insert_input
  anonymous_query_id: bigint
  id: bigint
  invitation_code: String
}

"""aggregate max on columns"""
type anonymous_invitations_max_fields {
  anonymous_query_id: bigint
  id: bigint
  invitation_code: String
}

"""
order by max() on columns of table "anonymous_invitations"
"""
input anonymous_invitations_max_order_by {
  anonymous_query_id: order_by
  id: order_by
  invitation_code: order_by
}

"""aggregate min on columns"""
type anonymous_invitations_min_fields {
  anonymous_query_id: bigint
  id: bigint
  invitation_code: String
}

"""
order by min() on columns of table "anonymous_invitations"
"""
input anonymous_invitations_min_order_by {
  anonymous_query_id: order_by
  id: order_by
  invitation_code: order_by
}

"""
response of any mutation on the table "anonymous_invitations"
"""
type anonymous_invitations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [anonymous_invitations!]!
}

"""
on conflict condition type for table "anonymous_invitations"
"""
input anonymous_invitations_on_conflict {
  constraint: anonymous_invitations_constraint!
  update_columns: [anonymous_invitations_update_column!]! = []
  where: anonymous_invitations_bool_exp
}

"""Ordering options when selecting data from "anonymous_invitations"."""
input anonymous_invitations_order_by {
  anonymous_query: anonymous_queries_order_by
  anonymous_query_id: order_by
  id: order_by
  invitation_code: order_by
}

"""primary key columns input for table: anonymous_invitations"""
input anonymous_invitations_pk_columns_input {
  id: bigint!
}

"""
select columns of table "anonymous_invitations"
"""
enum anonymous_invitations_select_column {
  """column name"""
  anonymous_query_id

  """column name"""
  id

  """column name"""
  invitation_code
}

"""
input type for updating data in table "anonymous_invitations"
"""
input anonymous_invitations_set_input {
  anonymous_query_id: bigint
  id: bigint
  invitation_code: String
}

"""aggregate stddev on columns"""
type anonymous_invitations_stddev_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by stddev() on columns of table "anonymous_invitations"
"""
input anonymous_invitations_stddev_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type anonymous_invitations_stddev_pop_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "anonymous_invitations"
"""
input anonymous_invitations_stddev_pop_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type anonymous_invitations_stddev_samp_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "anonymous_invitations"
"""
input anonymous_invitations_stddev_samp_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type anonymous_invitations_sum_fields {
  anonymous_query_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "anonymous_invitations"
"""
input anonymous_invitations_sum_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""
update columns of table "anonymous_invitations"
"""
enum anonymous_invitations_update_column {
  """column name"""
  anonymous_query_id

  """column name"""
  id

  """column name"""
  invitation_code
}

"""aggregate var_pop on columns"""
type anonymous_invitations_var_pop_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "anonymous_invitations"
"""
input anonymous_invitations_var_pop_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type anonymous_invitations_var_samp_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "anonymous_invitations"
"""
input anonymous_invitations_var_samp_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type anonymous_invitations_variance_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by variance() on columns of table "anonymous_invitations"
"""
input anonymous_invitations_variance_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""
columns and relationships of "anonymous_queries"
"""
type anonymous_queries {
  """An array relationship"""
  anonymous_answers(
    """distinct select on columns"""
    distinct_on: [anonymous_answers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_answers_order_by!]

    """filter the rows returned"""
    where: anonymous_answers_bool_exp
  ): [anonymous_answers!]!

  """An aggregate relationship"""
  anonymous_answers_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_answers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_answers_order_by!]

    """filter the rows returned"""
    where: anonymous_answers_bool_exp
  ): anonymous_answers_aggregate!

  """An array relationship"""
  anonymous_invitations(
    """distinct select on columns"""
    distinct_on: [anonymous_invitations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_invitations_order_by!]

    """filter the rows returned"""
    where: anonymous_invitations_bool_exp
  ): [anonymous_invitations!]!

  """An aggregate relationship"""
  anonymous_invitations_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_invitations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_invitations_order_by!]

    """filter the rows returned"""
    where: anonymous_invitations_bool_exp
  ): anonymous_invitations_aggregate!

  """An array relationship"""
  anonymous_sms(
    """distinct select on columns"""
    distinct_on: [anonymous_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_sms_order_by!]

    """filter the rows returned"""
    where: anonymous_sms_bool_exp
  ): [anonymous_sms!]!

  """An aggregate relationship"""
  anonymous_sms_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_sms_order_by!]

    """filter the rows returned"""
    where: anonymous_sms_bool_exp
  ): anonymous_sms_aggregate!

  """An object relationship"""
  anonymous_template: anonymous_templates
  anonymous_template_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  deleted_at: timestamptz
  has_invitation: Boolean!
  id: bigint!
  properties: String
  region: String!
  title: String!
  updated_at: timestamptz
  valid_from: date
  valid_to: date
}

"""
aggregated selection of "anonymous_queries"
"""
type anonymous_queries_aggregate {
  aggregate: anonymous_queries_aggregate_fields
  nodes: [anonymous_queries!]!
}

"""
aggregate fields of "anonymous_queries"
"""
type anonymous_queries_aggregate_fields {
  avg: anonymous_queries_avg_fields
  count(columns: [anonymous_queries_select_column!], distinct: Boolean): Int!
  max: anonymous_queries_max_fields
  min: anonymous_queries_min_fields
  stddev: anonymous_queries_stddev_fields
  stddev_pop: anonymous_queries_stddev_pop_fields
  stddev_samp: anonymous_queries_stddev_samp_fields
  sum: anonymous_queries_sum_fields
  var_pop: anonymous_queries_var_pop_fields
  var_samp: anonymous_queries_var_samp_fields
  variance: anonymous_queries_variance_fields
}

"""
order by aggregate values of table "anonymous_queries"
"""
input anonymous_queries_aggregate_order_by {
  avg: anonymous_queries_avg_order_by
  count: order_by
  max: anonymous_queries_max_order_by
  min: anonymous_queries_min_order_by
  stddev: anonymous_queries_stddev_order_by
  stddev_pop: anonymous_queries_stddev_pop_order_by
  stddev_samp: anonymous_queries_stddev_samp_order_by
  sum: anonymous_queries_sum_order_by
  var_pop: anonymous_queries_var_pop_order_by
  var_samp: anonymous_queries_var_samp_order_by
  variance: anonymous_queries_variance_order_by
}

"""
input type for inserting array relation for remote table "anonymous_queries"
"""
input anonymous_queries_arr_rel_insert_input {
  data: [anonymous_queries_insert_input!]!

  """on conflict condition"""
  on_conflict: anonymous_queries_on_conflict
}

"""aggregate avg on columns"""
type anonymous_queries_avg_fields {
  anonymous_template_id: Float
  id: Float
}

"""
order by avg() on columns of table "anonymous_queries"
"""
input anonymous_queries_avg_order_by {
  anonymous_template_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "anonymous_queries". All fields are combined with a logical 'AND'.
"""
input anonymous_queries_bool_exp {
  _and: [anonymous_queries_bool_exp!]
  _not: anonymous_queries_bool_exp
  _or: [anonymous_queries_bool_exp!]
  anonymous_answers: anonymous_answers_bool_exp
  anonymous_invitations: anonymous_invitations_bool_exp
  anonymous_sms: anonymous_sms_bool_exp
  anonymous_template: anonymous_templates_bool_exp
  anonymous_template_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  deleted_at: timestamptz_comparison_exp
  has_invitation: Boolean_comparison_exp
  id: bigint_comparison_exp
  properties: String_comparison_exp
  region: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  valid_from: date_comparison_exp
  valid_to: date_comparison_exp
}

"""
unique or primary key constraints on table "anonymous_queries"
"""
enum anonymous_queries_constraint {
  """unique or primary key constraint"""
  idx_51391_primary
}

"""
input type for incrementing numeric columns in table "anonymous_queries"
"""
input anonymous_queries_inc_input {
  anonymous_template_id: bigint
  id: bigint
}

"""
input type for inserting data into table "anonymous_queries"
"""
input anonymous_queries_insert_input {
  anonymous_answers: anonymous_answers_arr_rel_insert_input
  anonymous_invitations: anonymous_invitations_arr_rel_insert_input
  anonymous_sms: anonymous_sms_arr_rel_insert_input
  anonymous_template: anonymous_templates_obj_rel_insert_input
  anonymous_template_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  has_invitation: Boolean
  id: bigint
  properties: String
  region: String
  title: String
  updated_at: timestamptz
  valid_from: date
  valid_to: date
}

"""aggregate max on columns"""
type anonymous_queries_max_fields {
  anonymous_template_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  properties: String
  region: String
  title: String
  updated_at: timestamptz
  valid_from: date
  valid_to: date
}

"""
order by max() on columns of table "anonymous_queries"
"""
input anonymous_queries_max_order_by {
  anonymous_template_id: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  properties: order_by
  region: order_by
  title: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""aggregate min on columns"""
type anonymous_queries_min_fields {
  anonymous_template_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  properties: String
  region: String
  title: String
  updated_at: timestamptz
  valid_from: date
  valid_to: date
}

"""
order by min() on columns of table "anonymous_queries"
"""
input anonymous_queries_min_order_by {
  anonymous_template_id: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  properties: order_by
  region: order_by
  title: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""
response of any mutation on the table "anonymous_queries"
"""
type anonymous_queries_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [anonymous_queries!]!
}

"""
input type for inserting object relation for remote table "anonymous_queries"
"""
input anonymous_queries_obj_rel_insert_input {
  data: anonymous_queries_insert_input!

  """on conflict condition"""
  on_conflict: anonymous_queries_on_conflict
}

"""
on conflict condition type for table "anonymous_queries"
"""
input anonymous_queries_on_conflict {
  constraint: anonymous_queries_constraint!
  update_columns: [anonymous_queries_update_column!]! = []
  where: anonymous_queries_bool_exp
}

"""Ordering options when selecting data from "anonymous_queries"."""
input anonymous_queries_order_by {
  anonymous_answers_aggregate: anonymous_answers_aggregate_order_by
  anonymous_invitations_aggregate: anonymous_invitations_aggregate_order_by
  anonymous_sms_aggregate: anonymous_sms_aggregate_order_by
  anonymous_template: anonymous_templates_order_by
  anonymous_template_id: order_by
  created_at: order_by
  customer_id: order_by
  deleted_at: order_by
  has_invitation: order_by
  id: order_by
  properties: order_by
  region: order_by
  title: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""primary key columns input for table: anonymous_queries"""
input anonymous_queries_pk_columns_input {
  id: bigint!
}

"""
select columns of table "anonymous_queries"
"""
enum anonymous_queries_select_column {
  """column name"""
  anonymous_template_id

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  has_invitation

  """column name"""
  id

  """column name"""
  properties

  """column name"""
  region

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  valid_from

  """column name"""
  valid_to
}

"""
input type for updating data in table "anonymous_queries"
"""
input anonymous_queries_set_input {
  anonymous_template_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  has_invitation: Boolean
  id: bigint
  properties: String
  region: String
  title: String
  updated_at: timestamptz
  valid_from: date
  valid_to: date
}

"""aggregate stddev on columns"""
type anonymous_queries_stddev_fields {
  anonymous_template_id: Float
  id: Float
}

"""
order by stddev() on columns of table "anonymous_queries"
"""
input anonymous_queries_stddev_order_by {
  anonymous_template_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type anonymous_queries_stddev_pop_fields {
  anonymous_template_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "anonymous_queries"
"""
input anonymous_queries_stddev_pop_order_by {
  anonymous_template_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type anonymous_queries_stddev_samp_fields {
  anonymous_template_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "anonymous_queries"
"""
input anonymous_queries_stddev_samp_order_by {
  anonymous_template_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type anonymous_queries_sum_fields {
  anonymous_template_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "anonymous_queries"
"""
input anonymous_queries_sum_order_by {
  anonymous_template_id: order_by
  id: order_by
}

"""
update columns of table "anonymous_queries"
"""
enum anonymous_queries_update_column {
  """column name"""
  anonymous_template_id

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  has_invitation

  """column name"""
  id

  """column name"""
  properties

  """column name"""
  region

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  valid_from

  """column name"""
  valid_to
}

"""aggregate var_pop on columns"""
type anonymous_queries_var_pop_fields {
  anonymous_template_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "anonymous_queries"
"""
input anonymous_queries_var_pop_order_by {
  anonymous_template_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type anonymous_queries_var_samp_fields {
  anonymous_template_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "anonymous_queries"
"""
input anonymous_queries_var_samp_order_by {
  anonymous_template_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type anonymous_queries_variance_fields {
  anonymous_template_id: Float
  id: Float
}

"""
order by variance() on columns of table "anonymous_queries"
"""
input anonymous_queries_variance_order_by {
  anonymous_template_id: order_by
  id: order_by
}

"""
columns and relationships of "anonymous_sms"
"""
type anonymous_sms {
  """An object relationship"""
  anonymous_query: anonymous_queries
  anonymous_query_id: bigint
  content: String!
  create_user: String!
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  deleted_at: timestamptz
  id: bigint!
  message_id: String!
  region: String!
  soknad_id: String
  tlfmobil: String!
  uid: String!
  updated_at: timestamptz
}

"""
aggregated selection of "anonymous_sms"
"""
type anonymous_sms_aggregate {
  aggregate: anonymous_sms_aggregate_fields
  nodes: [anonymous_sms!]!
}

"""
aggregate fields of "anonymous_sms"
"""
type anonymous_sms_aggregate_fields {
  avg: anonymous_sms_avg_fields
  count(columns: [anonymous_sms_select_column!], distinct: Boolean): Int!
  max: anonymous_sms_max_fields
  min: anonymous_sms_min_fields
  stddev: anonymous_sms_stddev_fields
  stddev_pop: anonymous_sms_stddev_pop_fields
  stddev_samp: anonymous_sms_stddev_samp_fields
  sum: anonymous_sms_sum_fields
  var_pop: anonymous_sms_var_pop_fields
  var_samp: anonymous_sms_var_samp_fields
  variance: anonymous_sms_variance_fields
}

"""
order by aggregate values of table "anonymous_sms"
"""
input anonymous_sms_aggregate_order_by {
  avg: anonymous_sms_avg_order_by
  count: order_by
  max: anonymous_sms_max_order_by
  min: anonymous_sms_min_order_by
  stddev: anonymous_sms_stddev_order_by
  stddev_pop: anonymous_sms_stddev_pop_order_by
  stddev_samp: anonymous_sms_stddev_samp_order_by
  sum: anonymous_sms_sum_order_by
  var_pop: anonymous_sms_var_pop_order_by
  var_samp: anonymous_sms_var_samp_order_by
  variance: anonymous_sms_variance_order_by
}

"""
input type for inserting array relation for remote table "anonymous_sms"
"""
input anonymous_sms_arr_rel_insert_input {
  data: [anonymous_sms_insert_input!]!

  """on conflict condition"""
  on_conflict: anonymous_sms_on_conflict
}

"""aggregate avg on columns"""
type anonymous_sms_avg_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by avg() on columns of table "anonymous_sms"
"""
input anonymous_sms_avg_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "anonymous_sms". All fields are combined with a logical 'AND'.
"""
input anonymous_sms_bool_exp {
  _and: [anonymous_sms_bool_exp!]
  _not: anonymous_sms_bool_exp
  _or: [anonymous_sms_bool_exp!]
  anonymous_query: anonymous_queries_bool_exp
  anonymous_query_id: bigint_comparison_exp
  content: String_comparison_exp
  create_user: String_comparison_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  deleted_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  message_id: String_comparison_exp
  region: String_comparison_exp
  soknad_id: String_comparison_exp
  tlfmobil: String_comparison_exp
  uid: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "anonymous_sms"
"""
enum anonymous_sms_constraint {
  """unique or primary key constraint"""
  idx_51401_primary
}

"""
input type for incrementing numeric columns in table "anonymous_sms"
"""
input anonymous_sms_inc_input {
  anonymous_query_id: bigint
  id: bigint
}

"""
input type for inserting data into table "anonymous_sms"
"""
input anonymous_sms_insert_input {
  anonymous_query: anonymous_queries_obj_rel_insert_input
  anonymous_query_id: bigint
  content: String
  create_user: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  message_id: String
  region: String
  soknad_id: String
  tlfmobil: String
  uid: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type anonymous_sms_max_fields {
  anonymous_query_id: bigint
  content: String
  create_user: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  message_id: String
  region: String
  soknad_id: String
  tlfmobil: String
  uid: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "anonymous_sms"
"""
input anonymous_sms_max_order_by {
  anonymous_query_id: order_by
  content: order_by
  create_user: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  message_id: order_by
  region: order_by
  soknad_id: order_by
  tlfmobil: order_by
  uid: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type anonymous_sms_min_fields {
  anonymous_query_id: bigint
  content: String
  create_user: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  message_id: String
  region: String
  soknad_id: String
  tlfmobil: String
  uid: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "anonymous_sms"
"""
input anonymous_sms_min_order_by {
  anonymous_query_id: order_by
  content: order_by
  create_user: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  message_id: order_by
  region: order_by
  soknad_id: order_by
  tlfmobil: order_by
  uid: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "anonymous_sms"
"""
type anonymous_sms_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [anonymous_sms!]!
}

"""
on conflict condition type for table "anonymous_sms"
"""
input anonymous_sms_on_conflict {
  constraint: anonymous_sms_constraint!
  update_columns: [anonymous_sms_update_column!]! = []
  where: anonymous_sms_bool_exp
}

"""Ordering options when selecting data from "anonymous_sms"."""
input anonymous_sms_order_by {
  anonymous_query: anonymous_queries_order_by
  anonymous_query_id: order_by
  content: order_by
  create_user: order_by
  created_at: order_by
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  message_id: order_by
  region: order_by
  soknad_id: order_by
  tlfmobil: order_by
  uid: order_by
  updated_at: order_by
}

"""primary key columns input for table: anonymous_sms"""
input anonymous_sms_pk_columns_input {
  id: bigint!
}

"""
select columns of table "anonymous_sms"
"""
enum anonymous_sms_select_column {
  """column name"""
  anonymous_query_id

  """column name"""
  content

  """column name"""
  create_user

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  message_id

  """column name"""
  region

  """column name"""
  soknad_id

  """column name"""
  tlfmobil

  """column name"""
  uid

  """column name"""
  updated_at
}

"""
input type for updating data in table "anonymous_sms"
"""
input anonymous_sms_set_input {
  anonymous_query_id: bigint
  content: String
  create_user: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  message_id: String
  region: String
  soknad_id: String
  tlfmobil: String
  uid: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type anonymous_sms_stddev_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by stddev() on columns of table "anonymous_sms"
"""
input anonymous_sms_stddev_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type anonymous_sms_stddev_pop_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "anonymous_sms"
"""
input anonymous_sms_stddev_pop_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type anonymous_sms_stddev_samp_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "anonymous_sms"
"""
input anonymous_sms_stddev_samp_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type anonymous_sms_sum_fields {
  anonymous_query_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "anonymous_sms"
"""
input anonymous_sms_sum_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""
update columns of table "anonymous_sms"
"""
enum anonymous_sms_update_column {
  """column name"""
  anonymous_query_id

  """column name"""
  content

  """column name"""
  create_user

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  message_id

  """column name"""
  region

  """column name"""
  soknad_id

  """column name"""
  tlfmobil

  """column name"""
  uid

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type anonymous_sms_var_pop_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "anonymous_sms"
"""
input anonymous_sms_var_pop_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type anonymous_sms_var_samp_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "anonymous_sms"
"""
input anonymous_sms_var_samp_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type anonymous_sms_variance_fields {
  anonymous_query_id: Float
  id: Float
}

"""
order by variance() on columns of table "anonymous_sms"
"""
input anonymous_sms_variance_order_by {
  anonymous_query_id: order_by
  id: order_by
}

"""
columns and relationships of "anonymous_template_question"
"""
type anonymous_template_question {
  """An object relationship"""
  anonymous_template: anonymous_templates!
  anonymous_template_id: bigint!
  description: String!
  narrative: String!
  position: bigint!
  properties: String

  """An object relationship"""
  question: questions!
  question_id: bigint!
  title: String!
}

"""
aggregated selection of "anonymous_template_question"
"""
type anonymous_template_question_aggregate {
  aggregate: anonymous_template_question_aggregate_fields
  nodes: [anonymous_template_question!]!
}

"""
aggregate fields of "anonymous_template_question"
"""
type anonymous_template_question_aggregate_fields {
  avg: anonymous_template_question_avg_fields
  count(columns: [anonymous_template_question_select_column!], distinct: Boolean): Int!
  max: anonymous_template_question_max_fields
  min: anonymous_template_question_min_fields
  stddev: anonymous_template_question_stddev_fields
  stddev_pop: anonymous_template_question_stddev_pop_fields
  stddev_samp: anonymous_template_question_stddev_samp_fields
  sum: anonymous_template_question_sum_fields
  var_pop: anonymous_template_question_var_pop_fields
  var_samp: anonymous_template_question_var_samp_fields
  variance: anonymous_template_question_variance_fields
}

"""
order by aggregate values of table "anonymous_template_question"
"""
input anonymous_template_question_aggregate_order_by {
  avg: anonymous_template_question_avg_order_by
  count: order_by
  max: anonymous_template_question_max_order_by
  min: anonymous_template_question_min_order_by
  stddev: anonymous_template_question_stddev_order_by
  stddev_pop: anonymous_template_question_stddev_pop_order_by
  stddev_samp: anonymous_template_question_stddev_samp_order_by
  sum: anonymous_template_question_sum_order_by
  var_pop: anonymous_template_question_var_pop_order_by
  var_samp: anonymous_template_question_var_samp_order_by
  variance: anonymous_template_question_variance_order_by
}

"""
input type for inserting array relation for remote table "anonymous_template_question"
"""
input anonymous_template_question_arr_rel_insert_input {
  data: [anonymous_template_question_insert_input!]!

  """on conflict condition"""
  on_conflict: anonymous_template_question_on_conflict
}

"""aggregate avg on columns"""
type anonymous_template_question_avg_fields {
  anonymous_template_id: Float
  position: Float
  question_id: Float
}

"""
order by avg() on columns of table "anonymous_template_question"
"""
input anonymous_template_question_avg_order_by {
  anonymous_template_id: order_by
  position: order_by
  question_id: order_by
}

"""
Boolean expression to filter rows from the table "anonymous_template_question". All fields are combined with a logical 'AND'.
"""
input anonymous_template_question_bool_exp {
  _and: [anonymous_template_question_bool_exp!]
  _not: anonymous_template_question_bool_exp
  _or: [anonymous_template_question_bool_exp!]
  anonymous_template: anonymous_templates_bool_exp
  anonymous_template_id: bigint_comparison_exp
  description: String_comparison_exp
  narrative: String_comparison_exp
  position: bigint_comparison_exp
  properties: String_comparison_exp
  question: questions_bool_exp
  question_id: bigint_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "anonymous_template_question"
"""
enum anonymous_template_question_constraint {
  """unique or primary key constraint"""
  idx_51419_anon_temp_quest_anon_temp_id_quest_id_unique
}

"""
input type for incrementing numeric columns in table "anonymous_template_question"
"""
input anonymous_template_question_inc_input {
  anonymous_template_id: bigint
  position: bigint
  question_id: bigint
}

"""
input type for inserting data into table "anonymous_template_question"
"""
input anonymous_template_question_insert_input {
  anonymous_template: anonymous_templates_obj_rel_insert_input
  anonymous_template_id: bigint
  description: String
  narrative: String
  position: bigint
  properties: String
  question: questions_obj_rel_insert_input
  question_id: bigint
  title: String
}

"""aggregate max on columns"""
type anonymous_template_question_max_fields {
  anonymous_template_id: bigint
  description: String
  narrative: String
  position: bigint
  properties: String
  question_id: bigint
  title: String
}

"""
order by max() on columns of table "anonymous_template_question"
"""
input anonymous_template_question_max_order_by {
  anonymous_template_id: order_by
  description: order_by
  narrative: order_by
  position: order_by
  properties: order_by
  question_id: order_by
  title: order_by
}

"""aggregate min on columns"""
type anonymous_template_question_min_fields {
  anonymous_template_id: bigint
  description: String
  narrative: String
  position: bigint
  properties: String
  question_id: bigint
  title: String
}

"""
order by min() on columns of table "anonymous_template_question"
"""
input anonymous_template_question_min_order_by {
  anonymous_template_id: order_by
  description: order_by
  narrative: order_by
  position: order_by
  properties: order_by
  question_id: order_by
  title: order_by
}

"""
response of any mutation on the table "anonymous_template_question"
"""
type anonymous_template_question_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [anonymous_template_question!]!
}

"""
on conflict condition type for table "anonymous_template_question"
"""
input anonymous_template_question_on_conflict {
  constraint: anonymous_template_question_constraint!
  update_columns: [anonymous_template_question_update_column!]! = []
  where: anonymous_template_question_bool_exp
}

"""
Ordering options when selecting data from "anonymous_template_question".
"""
input anonymous_template_question_order_by {
  anonymous_template: anonymous_templates_order_by
  anonymous_template_id: order_by
  description: order_by
  narrative: order_by
  position: order_by
  properties: order_by
  question: questions_order_by
  question_id: order_by
  title: order_by
}

"""
select columns of table "anonymous_template_question"
"""
enum anonymous_template_question_select_column {
  """column name"""
  anonymous_template_id

  """column name"""
  description

  """column name"""
  narrative

  """column name"""
  position

  """column name"""
  properties

  """column name"""
  question_id

  """column name"""
  title
}

"""
input type for updating data in table "anonymous_template_question"
"""
input anonymous_template_question_set_input {
  anonymous_template_id: bigint
  description: String
  narrative: String
  position: bigint
  properties: String
  question_id: bigint
  title: String
}

"""aggregate stddev on columns"""
type anonymous_template_question_stddev_fields {
  anonymous_template_id: Float
  position: Float
  question_id: Float
}

"""
order by stddev() on columns of table "anonymous_template_question"
"""
input anonymous_template_question_stddev_order_by {
  anonymous_template_id: order_by
  position: order_by
  question_id: order_by
}

"""aggregate stddev_pop on columns"""
type anonymous_template_question_stddev_pop_fields {
  anonymous_template_id: Float
  position: Float
  question_id: Float
}

"""
order by stddev_pop() on columns of table "anonymous_template_question"
"""
input anonymous_template_question_stddev_pop_order_by {
  anonymous_template_id: order_by
  position: order_by
  question_id: order_by
}

"""aggregate stddev_samp on columns"""
type anonymous_template_question_stddev_samp_fields {
  anonymous_template_id: Float
  position: Float
  question_id: Float
}

"""
order by stddev_samp() on columns of table "anonymous_template_question"
"""
input anonymous_template_question_stddev_samp_order_by {
  anonymous_template_id: order_by
  position: order_by
  question_id: order_by
}

"""aggregate sum on columns"""
type anonymous_template_question_sum_fields {
  anonymous_template_id: bigint
  position: bigint
  question_id: bigint
}

"""
order by sum() on columns of table "anonymous_template_question"
"""
input anonymous_template_question_sum_order_by {
  anonymous_template_id: order_by
  position: order_by
  question_id: order_by
}

"""
update columns of table "anonymous_template_question"
"""
enum anonymous_template_question_update_column {
  """column name"""
  anonymous_template_id

  """column name"""
  description

  """column name"""
  narrative

  """column name"""
  position

  """column name"""
  properties

  """column name"""
  question_id

  """column name"""
  title
}

"""aggregate var_pop on columns"""
type anonymous_template_question_var_pop_fields {
  anonymous_template_id: Float
  position: Float
  question_id: Float
}

"""
order by var_pop() on columns of table "anonymous_template_question"
"""
input anonymous_template_question_var_pop_order_by {
  anonymous_template_id: order_by
  position: order_by
  question_id: order_by
}

"""aggregate var_samp on columns"""
type anonymous_template_question_var_samp_fields {
  anonymous_template_id: Float
  position: Float
  question_id: Float
}

"""
order by var_samp() on columns of table "anonymous_template_question"
"""
input anonymous_template_question_var_samp_order_by {
  anonymous_template_id: order_by
  position: order_by
  question_id: order_by
}

"""aggregate variance on columns"""
type anonymous_template_question_variance_fields {
  anonymous_template_id: Float
  position: Float
  question_id: Float
}

"""
order by variance() on columns of table "anonymous_template_question"
"""
input anonymous_template_question_variance_order_by {
  anonymous_template_id: order_by
  position: order_by
  question_id: order_by
}

"""
columns and relationships of "anonymous_templates"
"""
type anonymous_templates {
  """An array relationship"""
  anonymous_queries(
    """distinct select on columns"""
    distinct_on: [anonymous_queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_queries_order_by!]

    """filter the rows returned"""
    where: anonymous_queries_bool_exp
  ): [anonymous_queries!]!

  """An aggregate relationship"""
  anonymous_queries_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_queries_order_by!]

    """filter the rows returned"""
    where: anonymous_queries_bool_exp
  ): anonymous_queries_aggregate!

  """An array relationship"""
  anonymous_template_questions(
    """distinct select on columns"""
    distinct_on: [anonymous_template_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_template_question_order_by!]

    """filter the rows returned"""
    where: anonymous_template_question_bool_exp
  ): [anonymous_template_question!]!

  """An aggregate relationship"""
  anonymous_template_questions_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_template_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_template_question_order_by!]

    """filter the rows returned"""
    where: anonymous_template_question_bool_exp
  ): anonymous_template_question_aggregate!
  attributes: String!
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  deleted_at: timestamptz
  id: bigint!
  region: String!
  template_uuid: String!
  therapist_role: String
  title: String!
  updated_at: timestamptz
}

"""
aggregated selection of "anonymous_templates"
"""
type anonymous_templates_aggregate {
  aggregate: anonymous_templates_aggregate_fields
  nodes: [anonymous_templates!]!
}

"""
aggregate fields of "anonymous_templates"
"""
type anonymous_templates_aggregate_fields {
  avg: anonymous_templates_avg_fields
  count(columns: [anonymous_templates_select_column!], distinct: Boolean): Int!
  max: anonymous_templates_max_fields
  min: anonymous_templates_min_fields
  stddev: anonymous_templates_stddev_fields
  stddev_pop: anonymous_templates_stddev_pop_fields
  stddev_samp: anonymous_templates_stddev_samp_fields
  sum: anonymous_templates_sum_fields
  var_pop: anonymous_templates_var_pop_fields
  var_samp: anonymous_templates_var_samp_fields
  variance: anonymous_templates_variance_fields
}

"""aggregate avg on columns"""
type anonymous_templates_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "anonymous_templates". All fields are combined with a logical 'AND'.
"""
input anonymous_templates_bool_exp {
  _and: [anonymous_templates_bool_exp!]
  _not: anonymous_templates_bool_exp
  _or: [anonymous_templates_bool_exp!]
  anonymous_queries: anonymous_queries_bool_exp
  anonymous_template_questions: anonymous_template_question_bool_exp
  attributes: String_comparison_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  deleted_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  region: String_comparison_exp
  template_uuid: String_comparison_exp
  therapist_role: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "anonymous_templates"
"""
enum anonymous_templates_constraint {
  """unique or primary key constraint"""
  idx_51411_primary
}

"""
input type for incrementing numeric columns in table "anonymous_templates"
"""
input anonymous_templates_inc_input {
  id: bigint
}

"""
input type for inserting data into table "anonymous_templates"
"""
input anonymous_templates_insert_input {
  anonymous_queries: anonymous_queries_arr_rel_insert_input
  anonymous_template_questions: anonymous_template_question_arr_rel_insert_input
  attributes: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  region: String
  template_uuid: String
  therapist_role: String
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type anonymous_templates_max_fields {
  attributes: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  region: String
  template_uuid: String
  therapist_role: String
  title: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type anonymous_templates_min_fields {
  attributes: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  region: String
  template_uuid: String
  therapist_role: String
  title: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "anonymous_templates"
"""
type anonymous_templates_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [anonymous_templates!]!
}

"""
input type for inserting object relation for remote table "anonymous_templates"
"""
input anonymous_templates_obj_rel_insert_input {
  data: anonymous_templates_insert_input!

  """on conflict condition"""
  on_conflict: anonymous_templates_on_conflict
}

"""
on conflict condition type for table "anonymous_templates"
"""
input anonymous_templates_on_conflict {
  constraint: anonymous_templates_constraint!
  update_columns: [anonymous_templates_update_column!]! = []
  where: anonymous_templates_bool_exp
}

"""Ordering options when selecting data from "anonymous_templates"."""
input anonymous_templates_order_by {
  anonymous_queries_aggregate: anonymous_queries_aggregate_order_by
  anonymous_template_questions_aggregate: anonymous_template_question_aggregate_order_by
  attributes: order_by
  created_at: order_by
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  region: order_by
  template_uuid: order_by
  therapist_role: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: anonymous_templates"""
input anonymous_templates_pk_columns_input {
  id: bigint!
}

"""
select columns of table "anonymous_templates"
"""
enum anonymous_templates_select_column {
  """column name"""
  attributes

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  region

  """column name"""
  template_uuid

  """column name"""
  therapist_role

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "anonymous_templates"
"""
input anonymous_templates_set_input {
  attributes: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  region: String
  template_uuid: String
  therapist_role: String
  title: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type anonymous_templates_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type anonymous_templates_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type anonymous_templates_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type anonymous_templates_sum_fields {
  id: bigint
}

"""
update columns of table "anonymous_templates"
"""
enum anonymous_templates_update_column {
  """column name"""
  attributes

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  region

  """column name"""
  template_uuid

  """column name"""
  therapist_role

  """column name"""
  title

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type anonymous_templates_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type anonymous_templates_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type anonymous_templates_variance_fields {
  id: Float
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "categories"
"""
type categories {
  comment: String
  name: String!

  """An array relationship"""
  sms_templates(
    """distinct select on columns"""
    distinct_on: [sms_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_templates_order_by!]

    """filter the rows returned"""
    where: sms_templates_bool_exp
  ): [sms_templates!]!

  """An aggregate relationship"""
  sms_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_templates_order_by!]

    """filter the rows returned"""
    where: sms_templates_bool_exp
  ): sms_templates_aggregate!
}

"""
aggregated selection of "categories"
"""
type categories_aggregate {
  aggregate: categories_aggregate_fields
  nodes: [categories!]!
}

"""
aggregate fields of "categories"
"""
type categories_aggregate_fields {
  count(columns: [categories_select_column!], distinct: Boolean): Int!
  max: categories_max_fields
  min: categories_min_fields
}

"""
Boolean expression to filter rows from the table "categories". All fields are combined with a logical 'AND'.
"""
input categories_bool_exp {
  _and: [categories_bool_exp!]
  _not: categories_bool_exp
  _or: [categories_bool_exp!]
  comment: String_comparison_exp
  name: String_comparison_exp
  sms_templates: sms_templates_bool_exp
}

"""
unique or primary key constraints on table "categories"
"""
enum categories_constraint {
  """unique or primary key constraint"""
  categories_pkey
}

"""
input type for inserting data into table "categories"
"""
input categories_insert_input {
  comment: String
  name: String
  sms_templates: sms_templates_arr_rel_insert_input
}

"""aggregate max on columns"""
type categories_max_fields {
  comment: String
  name: String
}

"""aggregate min on columns"""
type categories_min_fields {
  comment: String
  name: String
}

"""
response of any mutation on the table "categories"
"""
type categories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [categories!]!
}

"""
input type for inserting object relation for remote table "categories"
"""
input categories_obj_rel_insert_input {
  data: categories_insert_input!

  """on conflict condition"""
  on_conflict: categories_on_conflict
}

"""
on conflict condition type for table "categories"
"""
input categories_on_conflict {
  constraint: categories_constraint!
  update_columns: [categories_update_column!]! = []
  where: categories_bool_exp
}

"""Ordering options when selecting data from "categories"."""
input categories_order_by {
  comment: order_by
  name: order_by
  sms_templates_aggregate: sms_templates_aggregate_order_by
}

"""primary key columns input for table: categories"""
input categories_pk_columns_input {
  name: String!
}

"""
select columns of table "categories"
"""
enum categories_select_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
input type for updating data in table "categories"
"""
input categories_set_input {
  comment: String
  name: String
}

"""
update columns of table "categories"
"""
enum categories_update_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
columns and relationships of "consent_patient"
"""
type consent_patient {
  accepted: Boolean!

  """An object relationship"""
  consent: consents!
  consent_id: bigint!

  """(DC2Type:guid)"""
  patient_id: String!
}

"""
aggregated selection of "consent_patient"
"""
type consent_patient_aggregate {
  aggregate: consent_patient_aggregate_fields
  nodes: [consent_patient!]!
}

"""
aggregate fields of "consent_patient"
"""
type consent_patient_aggregate_fields {
  avg: consent_patient_avg_fields
  count(columns: [consent_patient_select_column!], distinct: Boolean): Int!
  max: consent_patient_max_fields
  min: consent_patient_min_fields
  stddev: consent_patient_stddev_fields
  stddev_pop: consent_patient_stddev_pop_fields
  stddev_samp: consent_patient_stddev_samp_fields
  sum: consent_patient_sum_fields
  var_pop: consent_patient_var_pop_fields
  var_samp: consent_patient_var_samp_fields
  variance: consent_patient_variance_fields
}

"""
order by aggregate values of table "consent_patient"
"""
input consent_patient_aggregate_order_by {
  avg: consent_patient_avg_order_by
  count: order_by
  max: consent_patient_max_order_by
  min: consent_patient_min_order_by
  stddev: consent_patient_stddev_order_by
  stddev_pop: consent_patient_stddev_pop_order_by
  stddev_samp: consent_patient_stddev_samp_order_by
  sum: consent_patient_sum_order_by
  var_pop: consent_patient_var_pop_order_by
  var_samp: consent_patient_var_samp_order_by
  variance: consent_patient_variance_order_by
}

"""
input type for inserting array relation for remote table "consent_patient"
"""
input consent_patient_arr_rel_insert_input {
  data: [consent_patient_insert_input!]!
}

"""aggregate avg on columns"""
type consent_patient_avg_fields {
  consent_id: Float
}

"""
order by avg() on columns of table "consent_patient"
"""
input consent_patient_avg_order_by {
  consent_id: order_by
}

"""
Boolean expression to filter rows from the table "consent_patient". All fields are combined with a logical 'AND'.
"""
input consent_patient_bool_exp {
  _and: [consent_patient_bool_exp!]
  _not: consent_patient_bool_exp
  _or: [consent_patient_bool_exp!]
  accepted: Boolean_comparison_exp
  consent: consents_bool_exp
  consent_id: bigint_comparison_exp
  patient_id: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "consent_patient"
"""
input consent_patient_inc_input {
  consent_id: bigint
}

"""
input type for inserting data into table "consent_patient"
"""
input consent_patient_insert_input {
  accepted: Boolean
  consent: consents_obj_rel_insert_input
  consent_id: bigint

  """(DC2Type:guid)"""
  patient_id: String
}

"""aggregate max on columns"""
type consent_patient_max_fields {
  consent_id: bigint

  """(DC2Type:guid)"""
  patient_id: String
}

"""
order by max() on columns of table "consent_patient"
"""
input consent_patient_max_order_by {
  consent_id: order_by

  """(DC2Type:guid)"""
  patient_id: order_by
}

"""aggregate min on columns"""
type consent_patient_min_fields {
  consent_id: bigint

  """(DC2Type:guid)"""
  patient_id: String
}

"""
order by min() on columns of table "consent_patient"
"""
input consent_patient_min_order_by {
  consent_id: order_by

  """(DC2Type:guid)"""
  patient_id: order_by
}

"""
response of any mutation on the table "consent_patient"
"""
type consent_patient_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [consent_patient!]!
}

"""Ordering options when selecting data from "consent_patient"."""
input consent_patient_order_by {
  accepted: order_by
  consent: consents_order_by
  consent_id: order_by
  patient_id: order_by
}

"""
select columns of table "consent_patient"
"""
enum consent_patient_select_column {
  """column name"""
  accepted

  """column name"""
  consent_id

  """column name"""
  patient_id
}

"""
input type for updating data in table "consent_patient"
"""
input consent_patient_set_input {
  accepted: Boolean
  consent_id: bigint

  """(DC2Type:guid)"""
  patient_id: String
}

"""aggregate stddev on columns"""
type consent_patient_stddev_fields {
  consent_id: Float
}

"""
order by stddev() on columns of table "consent_patient"
"""
input consent_patient_stddev_order_by {
  consent_id: order_by
}

"""aggregate stddev_pop on columns"""
type consent_patient_stddev_pop_fields {
  consent_id: Float
}

"""
order by stddev_pop() on columns of table "consent_patient"
"""
input consent_patient_stddev_pop_order_by {
  consent_id: order_by
}

"""aggregate stddev_samp on columns"""
type consent_patient_stddev_samp_fields {
  consent_id: Float
}

"""
order by stddev_samp() on columns of table "consent_patient"
"""
input consent_patient_stddev_samp_order_by {
  consent_id: order_by
}

"""aggregate sum on columns"""
type consent_patient_sum_fields {
  consent_id: bigint
}

"""
order by sum() on columns of table "consent_patient"
"""
input consent_patient_sum_order_by {
  consent_id: order_by
}

"""aggregate var_pop on columns"""
type consent_patient_var_pop_fields {
  consent_id: Float
}

"""
order by var_pop() on columns of table "consent_patient"
"""
input consent_patient_var_pop_order_by {
  consent_id: order_by
}

"""aggregate var_samp on columns"""
type consent_patient_var_samp_fields {
  consent_id: Float
}

"""
order by var_samp() on columns of table "consent_patient"
"""
input consent_patient_var_samp_order_by {
  consent_id: order_by
}

"""aggregate variance on columns"""
type consent_patient_variance_fields {
  consent_id: Float
}

"""
order by variance() on columns of table "consent_patient"
"""
input consent_patient_variance_order_by {
  consent_id: order_by
}

"""
columns and relationships of "consent_template_to_template"
"""
type consent_template_to_template {
  """An object relationship"""
  consent_template: consent_templates!
  consent_template_id: bigint!

  """An object relationship"""
  template: templates!
  template_id: bigint!
}

"""
aggregated selection of "consent_template_to_template"
"""
type consent_template_to_template_aggregate {
  aggregate: consent_template_to_template_aggregate_fields
  nodes: [consent_template_to_template!]!
}

"""
aggregate fields of "consent_template_to_template"
"""
type consent_template_to_template_aggregate_fields {
  avg: consent_template_to_template_avg_fields
  count(columns: [consent_template_to_template_select_column!], distinct: Boolean): Int!
  max: consent_template_to_template_max_fields
  min: consent_template_to_template_min_fields
  stddev: consent_template_to_template_stddev_fields
  stddev_pop: consent_template_to_template_stddev_pop_fields
  stddev_samp: consent_template_to_template_stddev_samp_fields
  sum: consent_template_to_template_sum_fields
  var_pop: consent_template_to_template_var_pop_fields
  var_samp: consent_template_to_template_var_samp_fields
  variance: consent_template_to_template_variance_fields
}

"""
order by aggregate values of table "consent_template_to_template"
"""
input consent_template_to_template_aggregate_order_by {
  avg: consent_template_to_template_avg_order_by
  count: order_by
  max: consent_template_to_template_max_order_by
  min: consent_template_to_template_min_order_by
  stddev: consent_template_to_template_stddev_order_by
  stddev_pop: consent_template_to_template_stddev_pop_order_by
  stddev_samp: consent_template_to_template_stddev_samp_order_by
  sum: consent_template_to_template_sum_order_by
  var_pop: consent_template_to_template_var_pop_order_by
  var_samp: consent_template_to_template_var_samp_order_by
  variance: consent_template_to_template_variance_order_by
}

"""
input type for inserting array relation for remote table "consent_template_to_template"
"""
input consent_template_to_template_arr_rel_insert_input {
  data: [consent_template_to_template_insert_input!]!

  """on conflict condition"""
  on_conflict: consent_template_to_template_on_conflict
}

"""aggregate avg on columns"""
type consent_template_to_template_avg_fields {
  consent_template_id: Float
  template_id: Float
}

"""
order by avg() on columns of table "consent_template_to_template"
"""
input consent_template_to_template_avg_order_by {
  consent_template_id: order_by
  template_id: order_by
}

"""
Boolean expression to filter rows from the table "consent_template_to_template". All fields are combined with a logical 'AND'.
"""
input consent_template_to_template_bool_exp {
  _and: [consent_template_to_template_bool_exp!]
  _not: consent_template_to_template_bool_exp
  _or: [consent_template_to_template_bool_exp!]
  consent_template: consent_templates_bool_exp
  consent_template_id: bigint_comparison_exp
  template: templates_bool_exp
  template_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "consent_template_to_template"
"""
enum consent_template_to_template_constraint {
  """unique or primary key constraint"""
  idx_51452_cons_temp_to_temp_temp_id_cons_temp_id_unique
}

"""
input type for incrementing numeric columns in table "consent_template_to_template"
"""
input consent_template_to_template_inc_input {
  consent_template_id: bigint
  template_id: bigint
}

"""
input type for inserting data into table "consent_template_to_template"
"""
input consent_template_to_template_insert_input {
  consent_template: consent_templates_obj_rel_insert_input
  consent_template_id: bigint
  template: templates_obj_rel_insert_input
  template_id: bigint
}

"""aggregate max on columns"""
type consent_template_to_template_max_fields {
  consent_template_id: bigint
  template_id: bigint
}

"""
order by max() on columns of table "consent_template_to_template"
"""
input consent_template_to_template_max_order_by {
  consent_template_id: order_by
  template_id: order_by
}

"""aggregate min on columns"""
type consent_template_to_template_min_fields {
  consent_template_id: bigint
  template_id: bigint
}

"""
order by min() on columns of table "consent_template_to_template"
"""
input consent_template_to_template_min_order_by {
  consent_template_id: order_by
  template_id: order_by
}

"""
response of any mutation on the table "consent_template_to_template"
"""
type consent_template_to_template_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [consent_template_to_template!]!
}

"""
on conflict condition type for table "consent_template_to_template"
"""
input consent_template_to_template_on_conflict {
  constraint: consent_template_to_template_constraint!
  update_columns: [consent_template_to_template_update_column!]! = []
  where: consent_template_to_template_bool_exp
}

"""
Ordering options when selecting data from "consent_template_to_template".
"""
input consent_template_to_template_order_by {
  consent_template: consent_templates_order_by
  consent_template_id: order_by
  template: templates_order_by
  template_id: order_by
}

"""
select columns of table "consent_template_to_template"
"""
enum consent_template_to_template_select_column {
  """column name"""
  consent_template_id

  """column name"""
  template_id
}

"""
input type for updating data in table "consent_template_to_template"
"""
input consent_template_to_template_set_input {
  consent_template_id: bigint
  template_id: bigint
}

"""aggregate stddev on columns"""
type consent_template_to_template_stddev_fields {
  consent_template_id: Float
  template_id: Float
}

"""
order by stddev() on columns of table "consent_template_to_template"
"""
input consent_template_to_template_stddev_order_by {
  consent_template_id: order_by
  template_id: order_by
}

"""aggregate stddev_pop on columns"""
type consent_template_to_template_stddev_pop_fields {
  consent_template_id: Float
  template_id: Float
}

"""
order by stddev_pop() on columns of table "consent_template_to_template"
"""
input consent_template_to_template_stddev_pop_order_by {
  consent_template_id: order_by
  template_id: order_by
}

"""aggregate stddev_samp on columns"""
type consent_template_to_template_stddev_samp_fields {
  consent_template_id: Float
  template_id: Float
}

"""
order by stddev_samp() on columns of table "consent_template_to_template"
"""
input consent_template_to_template_stddev_samp_order_by {
  consent_template_id: order_by
  template_id: order_by
}

"""aggregate sum on columns"""
type consent_template_to_template_sum_fields {
  consent_template_id: bigint
  template_id: bigint
}

"""
order by sum() on columns of table "consent_template_to_template"
"""
input consent_template_to_template_sum_order_by {
  consent_template_id: order_by
  template_id: order_by
}

"""
update columns of table "consent_template_to_template"
"""
enum consent_template_to_template_update_column {
  """column name"""
  consent_template_id

  """column name"""
  template_id
}

"""aggregate var_pop on columns"""
type consent_template_to_template_var_pop_fields {
  consent_template_id: Float
  template_id: Float
}

"""
order by var_pop() on columns of table "consent_template_to_template"
"""
input consent_template_to_template_var_pop_order_by {
  consent_template_id: order_by
  template_id: order_by
}

"""aggregate var_samp on columns"""
type consent_template_to_template_var_samp_fields {
  consent_template_id: Float
  template_id: Float
}

"""
order by var_samp() on columns of table "consent_template_to_template"
"""
input consent_template_to_template_var_samp_order_by {
  consent_template_id: order_by
  template_id: order_by
}

"""aggregate variance on columns"""
type consent_template_to_template_variance_fields {
  consent_template_id: Float
  template_id: Float
}

"""
order by variance() on columns of table "consent_template_to_template"
"""
input consent_template_to_template_variance_order_by {
  consent_template_id: order_by
  template_id: order_by
}

"""
columns and relationships of "consent_templates"
"""
type consent_templates {
  """An array relationship"""
  consent_template_to_templates(
    """distinct select on columns"""
    distinct_on: [consent_template_to_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_template_to_template_order_by!]

    """filter the rows returned"""
    where: consent_template_to_template_bool_exp
  ): [consent_template_to_template!]!

  """An aggregate relationship"""
  consent_template_to_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_template_to_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_template_to_template_order_by!]

    """filter the rows returned"""
    where: consent_template_to_template_bool_exp
  ): consent_template_to_template_aggregate!
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  description: String!
  group: String

  """An object relationship"""
  groupByGroup: groups
  id: bigint!
  region: String!
  title: String!
  type: String

  """An object relationship"""
  typeByType: types
  updated_at: timestamptz
  valid_days: bigint
}

"""
aggregated selection of "consent_templates"
"""
type consent_templates_aggregate {
  aggregate: consent_templates_aggregate_fields
  nodes: [consent_templates!]!
}

"""
aggregate fields of "consent_templates"
"""
type consent_templates_aggregate_fields {
  avg: consent_templates_avg_fields
  count(columns: [consent_templates_select_column!], distinct: Boolean): Int!
  max: consent_templates_max_fields
  min: consent_templates_min_fields
  stddev: consent_templates_stddev_fields
  stddev_pop: consent_templates_stddev_pop_fields
  stddev_samp: consent_templates_stddev_samp_fields
  sum: consent_templates_sum_fields
  var_pop: consent_templates_var_pop_fields
  var_samp: consent_templates_var_samp_fields
  variance: consent_templates_variance_fields
}

"""
order by aggregate values of table "consent_templates"
"""
input consent_templates_aggregate_order_by {
  avg: consent_templates_avg_order_by
  count: order_by
  max: consent_templates_max_order_by
  min: consent_templates_min_order_by
  stddev: consent_templates_stddev_order_by
  stddev_pop: consent_templates_stddev_pop_order_by
  stddev_samp: consent_templates_stddev_samp_order_by
  sum: consent_templates_sum_order_by
  var_pop: consent_templates_var_pop_order_by
  var_samp: consent_templates_var_samp_order_by
  variance: consent_templates_variance_order_by
}

"""
input type for inserting array relation for remote table "consent_templates"
"""
input consent_templates_arr_rel_insert_input {
  data: [consent_templates_insert_input!]!

  """on conflict condition"""
  on_conflict: consent_templates_on_conflict
}

"""aggregate avg on columns"""
type consent_templates_avg_fields {
  id: Float
  valid_days: Float
}

"""
order by avg() on columns of table "consent_templates"
"""
input consent_templates_avg_order_by {
  id: order_by
  valid_days: order_by
}

"""
Boolean expression to filter rows from the table "consent_templates". All fields are combined with a logical 'AND'.
"""
input consent_templates_bool_exp {
  _and: [consent_templates_bool_exp!]
  _not: consent_templates_bool_exp
  _or: [consent_templates_bool_exp!]
  consent_template_to_templates: consent_template_to_template_bool_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  description: String_comparison_exp
  group: String_comparison_exp
  groupByGroup: groups_bool_exp
  id: bigint_comparison_exp
  region: String_comparison_exp
  title: String_comparison_exp
  type: String_comparison_exp
  typeByType: types_bool_exp
  updated_at: timestamptz_comparison_exp
  valid_days: bigint_comparison_exp
}

"""
unique or primary key constraints on table "consent_templates"
"""
enum consent_templates_constraint {
  """unique or primary key constraint"""
  idx_51445_primary
}

"""
input type for incrementing numeric columns in table "consent_templates"
"""
input consent_templates_inc_input {
  id: bigint
  valid_days: bigint
}

"""
input type for inserting data into table "consent_templates"
"""
input consent_templates_insert_input {
  consent_template_to_templates: consent_template_to_template_arr_rel_insert_input
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  group: String
  groupByGroup: groups_obj_rel_insert_input
  id: bigint
  region: String
  title: String
  type: String
  typeByType: types_obj_rel_insert_input
  updated_at: timestamptz
  valid_days: bigint
}

"""aggregate max on columns"""
type consent_templates_max_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  group: String
  id: bigint
  region: String
  title: String
  type: String
  updated_at: timestamptz
  valid_days: bigint
}

"""
order by max() on columns of table "consent_templates"
"""
input consent_templates_max_order_by {
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  description: order_by
  group: order_by
  id: order_by
  region: order_by
  title: order_by
  type: order_by
  updated_at: order_by
  valid_days: order_by
}

"""aggregate min on columns"""
type consent_templates_min_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  group: String
  id: bigint
  region: String
  title: String
  type: String
  updated_at: timestamptz
  valid_days: bigint
}

"""
order by min() on columns of table "consent_templates"
"""
input consent_templates_min_order_by {
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  description: order_by
  group: order_by
  id: order_by
  region: order_by
  title: order_by
  type: order_by
  updated_at: order_by
  valid_days: order_by
}

"""
response of any mutation on the table "consent_templates"
"""
type consent_templates_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [consent_templates!]!
}

"""
input type for inserting object relation for remote table "consent_templates"
"""
input consent_templates_obj_rel_insert_input {
  data: consent_templates_insert_input!

  """on conflict condition"""
  on_conflict: consent_templates_on_conflict
}

"""
on conflict condition type for table "consent_templates"
"""
input consent_templates_on_conflict {
  constraint: consent_templates_constraint!
  update_columns: [consent_templates_update_column!]! = []
  where: consent_templates_bool_exp
}

"""Ordering options when selecting data from "consent_templates"."""
input consent_templates_order_by {
  consent_template_to_templates_aggregate: consent_template_to_template_aggregate_order_by
  created_at: order_by
  customer_id: order_by
  description: order_by
  group: order_by
  groupByGroup: groups_order_by
  id: order_by
  region: order_by
  title: order_by
  type: order_by
  typeByType: types_order_by
  updated_at: order_by
  valid_days: order_by
}

"""primary key columns input for table: consent_templates"""
input consent_templates_pk_columns_input {
  id: bigint!
}

"""
select columns of table "consent_templates"
"""
enum consent_templates_select_column {
  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  description

  """column name"""
  group

  """column name"""
  id

  """column name"""
  region

  """column name"""
  title

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  valid_days
}

"""
input type for updating data in table "consent_templates"
"""
input consent_templates_set_input {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  group: String
  id: bigint
  region: String
  title: String
  type: String
  updated_at: timestamptz
  valid_days: bigint
}

"""aggregate stddev on columns"""
type consent_templates_stddev_fields {
  id: Float
  valid_days: Float
}

"""
order by stddev() on columns of table "consent_templates"
"""
input consent_templates_stddev_order_by {
  id: order_by
  valid_days: order_by
}

"""aggregate stddev_pop on columns"""
type consent_templates_stddev_pop_fields {
  id: Float
  valid_days: Float
}

"""
order by stddev_pop() on columns of table "consent_templates"
"""
input consent_templates_stddev_pop_order_by {
  id: order_by
  valid_days: order_by
}

"""aggregate stddev_samp on columns"""
type consent_templates_stddev_samp_fields {
  id: Float
  valid_days: Float
}

"""
order by stddev_samp() on columns of table "consent_templates"
"""
input consent_templates_stddev_samp_order_by {
  id: order_by
  valid_days: order_by
}

"""aggregate sum on columns"""
type consent_templates_sum_fields {
  id: bigint
  valid_days: bigint
}

"""
order by sum() on columns of table "consent_templates"
"""
input consent_templates_sum_order_by {
  id: order_by
  valid_days: order_by
}

"""
update columns of table "consent_templates"
"""
enum consent_templates_update_column {
  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  description

  """column name"""
  group

  """column name"""
  id

  """column name"""
  region

  """column name"""
  title

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  valid_days
}

"""aggregate var_pop on columns"""
type consent_templates_var_pop_fields {
  id: Float
  valid_days: Float
}

"""
order by var_pop() on columns of table "consent_templates"
"""
input consent_templates_var_pop_order_by {
  id: order_by
  valid_days: order_by
}

"""aggregate var_samp on columns"""
type consent_templates_var_samp_fields {
  id: Float
  valid_days: Float
}

"""
order by var_samp() on columns of table "consent_templates"
"""
input consent_templates_var_samp_order_by {
  id: order_by
  valid_days: order_by
}

"""aggregate variance on columns"""
type consent_templates_variance_fields {
  id: Float
  valid_days: Float
}

"""
order by variance() on columns of table "consent_templates"
"""
input consent_templates_variance_order_by {
  id: order_by
  valid_days: order_by
}

"""
columns and relationships of "consents"
"""
type consents {
  accepted: Boolean!

  """An array relationship"""
  consent_patients(
    """distinct select on columns"""
    distinct_on: [consent_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_patient_order_by!]

    """filter the rows returned"""
    where: consent_patient_bool_exp
  ): [consent_patient!]!

  """An aggregate relationship"""
  consent_patients_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_patient_order_by!]

    """filter the rows returned"""
    where: consent_patient_bool_exp
  ): consent_patient_aggregate!
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  description: String!
  group: String

  """An object relationship"""
  groupByGroup: groups
  id: bigint!

  """An object relationship"""
  query: queries
  query_id: bigint
  region: String!
  title: String!
  type: String

  """An object relationship"""
  typeByType: types
  updated_at: timestamptz
  valid_to: date
}

"""
aggregated selection of "consents"
"""
type consents_aggregate {
  aggregate: consents_aggregate_fields
  nodes: [consents!]!
}

"""
aggregate fields of "consents"
"""
type consents_aggregate_fields {
  avg: consents_avg_fields
  count(columns: [consents_select_column!], distinct: Boolean): Int!
  max: consents_max_fields
  min: consents_min_fields
  stddev: consents_stddev_fields
  stddev_pop: consents_stddev_pop_fields
  stddev_samp: consents_stddev_samp_fields
  sum: consents_sum_fields
  var_pop: consents_var_pop_fields
  var_samp: consents_var_samp_fields
  variance: consents_variance_fields
}

"""
order by aggregate values of table "consents"
"""
input consents_aggregate_order_by {
  avg: consents_avg_order_by
  count: order_by
  max: consents_max_order_by
  min: consents_min_order_by
  stddev: consents_stddev_order_by
  stddev_pop: consents_stddev_pop_order_by
  stddev_samp: consents_stddev_samp_order_by
  sum: consents_sum_order_by
  var_pop: consents_var_pop_order_by
  var_samp: consents_var_samp_order_by
  variance: consents_variance_order_by
}

"""
input type for inserting array relation for remote table "consents"
"""
input consents_arr_rel_insert_input {
  data: [consents_insert_input!]!

  """on conflict condition"""
  on_conflict: consents_on_conflict
}

"""aggregate avg on columns"""
type consents_avg_fields {
  id: Float
  query_id: Float
}

"""
order by avg() on columns of table "consents"
"""
input consents_avg_order_by {
  id: order_by
  query_id: order_by
}

"""
Boolean expression to filter rows from the table "consents". All fields are combined with a logical 'AND'.
"""
input consents_bool_exp {
  _and: [consents_bool_exp!]
  _not: consents_bool_exp
  _or: [consents_bool_exp!]
  accepted: Boolean_comparison_exp
  consent_patients: consent_patient_bool_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  description: String_comparison_exp
  group: String_comparison_exp
  groupByGroup: groups_bool_exp
  id: bigint_comparison_exp
  query: queries_bool_exp
  query_id: bigint_comparison_exp
  region: String_comparison_exp
  title: String_comparison_exp
  type: String_comparison_exp
  typeByType: types_bool_exp
  updated_at: timestamptz_comparison_exp
  valid_to: date_comparison_exp
}

"""
unique or primary key constraints on table "consents"
"""
enum consents_constraint {
  """unique or primary key constraint"""
  idx_51427_primary
}

"""
input type for incrementing numeric columns in table "consents"
"""
input consents_inc_input {
  id: bigint
  query_id: bigint
}

"""
input type for inserting data into table "consents"
"""
input consents_insert_input {
  accepted: Boolean
  consent_patients: consent_patient_arr_rel_insert_input
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  group: String
  groupByGroup: groups_obj_rel_insert_input
  id: bigint
  query: queries_obj_rel_insert_input
  query_id: bigint
  region: String
  title: String
  type: String
  typeByType: types_obj_rel_insert_input
  updated_at: timestamptz
  valid_to: date
}

"""aggregate max on columns"""
type consents_max_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  group: String
  id: bigint
  query_id: bigint
  region: String
  title: String
  type: String
  updated_at: timestamptz
  valid_to: date
}

"""
order by max() on columns of table "consents"
"""
input consents_max_order_by {
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  description: order_by
  group: order_by
  id: order_by
  query_id: order_by
  region: order_by
  title: order_by
  type: order_by
  updated_at: order_by
  valid_to: order_by
}

"""aggregate min on columns"""
type consents_min_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  group: String
  id: bigint
  query_id: bigint
  region: String
  title: String
  type: String
  updated_at: timestamptz
  valid_to: date
}

"""
order by min() on columns of table "consents"
"""
input consents_min_order_by {
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  description: order_by
  group: order_by
  id: order_by
  query_id: order_by
  region: order_by
  title: order_by
  type: order_by
  updated_at: order_by
  valid_to: order_by
}

"""
response of any mutation on the table "consents"
"""
type consents_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [consents!]!
}

"""
input type for inserting object relation for remote table "consents"
"""
input consents_obj_rel_insert_input {
  data: consents_insert_input!

  """on conflict condition"""
  on_conflict: consents_on_conflict
}

"""
on conflict condition type for table "consents"
"""
input consents_on_conflict {
  constraint: consents_constraint!
  update_columns: [consents_update_column!]! = []
  where: consents_bool_exp
}

"""Ordering options when selecting data from "consents"."""
input consents_order_by {
  accepted: order_by
  consent_patients_aggregate: consent_patient_aggregate_order_by
  created_at: order_by
  customer_id: order_by
  description: order_by
  group: order_by
  groupByGroup: groups_order_by
  id: order_by
  query: queries_order_by
  query_id: order_by
  region: order_by
  title: order_by
  type: order_by
  typeByType: types_order_by
  updated_at: order_by
  valid_to: order_by
}

"""primary key columns input for table: consents"""
input consents_pk_columns_input {
  id: bigint!
}

"""
select columns of table "consents"
"""
enum consents_select_column {
  """column name"""
  accepted

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  description

  """column name"""
  group

  """column name"""
  id

  """column name"""
  query_id

  """column name"""
  region

  """column name"""
  title

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  valid_to
}

"""
input type for updating data in table "consents"
"""
input consents_set_input {
  accepted: Boolean
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  group: String
  id: bigint
  query_id: bigint
  region: String
  title: String
  type: String
  updated_at: timestamptz
  valid_to: date
}

"""aggregate stddev on columns"""
type consents_stddev_fields {
  id: Float
  query_id: Float
}

"""
order by stddev() on columns of table "consents"
"""
input consents_stddev_order_by {
  id: order_by
  query_id: order_by
}

"""aggregate stddev_pop on columns"""
type consents_stddev_pop_fields {
  id: Float
  query_id: Float
}

"""
order by stddev_pop() on columns of table "consents"
"""
input consents_stddev_pop_order_by {
  id: order_by
  query_id: order_by
}

"""aggregate stddev_samp on columns"""
type consents_stddev_samp_fields {
  id: Float
  query_id: Float
}

"""
order by stddev_samp() on columns of table "consents"
"""
input consents_stddev_samp_order_by {
  id: order_by
  query_id: order_by
}

"""aggregate sum on columns"""
type consents_sum_fields {
  id: bigint
  query_id: bigint
}

"""
order by sum() on columns of table "consents"
"""
input consents_sum_order_by {
  id: order_by
  query_id: order_by
}

"""
update columns of table "consents"
"""
enum consents_update_column {
  """column name"""
  accepted

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  description

  """column name"""
  group

  """column name"""
  id

  """column name"""
  query_id

  """column name"""
  region

  """column name"""
  title

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  valid_to
}

"""aggregate var_pop on columns"""
type consents_var_pop_fields {
  id: Float
  query_id: Float
}

"""
order by var_pop() on columns of table "consents"
"""
input consents_var_pop_order_by {
  id: order_by
  query_id: order_by
}

"""aggregate var_samp on columns"""
type consents_var_samp_fields {
  id: Float
  query_id: Float
}

"""
order by var_samp() on columns of table "consents"
"""
input consents_var_samp_order_by {
  id: order_by
  query_id: order_by
}

"""aggregate variance on columns"""
type consents_variance_fields {
  id: Float
  query_id: Float
}

"""
order by variance() on columns of table "consents"
"""
input consents_variance_order_by {
  id: order_by
  query_id: order_by
}

"""
columns and relationships of "contexts"
"""
type contexts {
  comment: String
  name: String!

  """An array relationship"""
  templates(
    """distinct select on columns"""
    distinct_on: [templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [templates_order_by!]

    """filter the rows returned"""
    where: templates_bool_exp
  ): [templates!]!

  """An aggregate relationship"""
  templates_aggregate(
    """distinct select on columns"""
    distinct_on: [templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [templates_order_by!]

    """filter the rows returned"""
    where: templates_bool_exp
  ): templates_aggregate!
}

"""
aggregated selection of "contexts"
"""
type contexts_aggregate {
  aggregate: contexts_aggregate_fields
  nodes: [contexts!]!
}

"""
aggregate fields of "contexts"
"""
type contexts_aggregate_fields {
  count(columns: [contexts_select_column!], distinct: Boolean): Int!
  max: contexts_max_fields
  min: contexts_min_fields
}

"""
Boolean expression to filter rows from the table "contexts". All fields are combined with a logical 'AND'.
"""
input contexts_bool_exp {
  _and: [contexts_bool_exp!]
  _not: contexts_bool_exp
  _or: [contexts_bool_exp!]
  comment: String_comparison_exp
  name: String_comparison_exp
  templates: templates_bool_exp
}

"""
unique or primary key constraints on table "contexts"
"""
enum contexts_constraint {
  """unique or primary key constraint"""
  contexts_pkey
}

"""
input type for inserting data into table "contexts"
"""
input contexts_insert_input {
  comment: String
  name: String
  templates: templates_arr_rel_insert_input
}

"""aggregate max on columns"""
type contexts_max_fields {
  comment: String
  name: String
}

"""aggregate min on columns"""
type contexts_min_fields {
  comment: String
  name: String
}

"""
response of any mutation on the table "contexts"
"""
type contexts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [contexts!]!
}

"""
input type for inserting object relation for remote table "contexts"
"""
input contexts_obj_rel_insert_input {
  data: contexts_insert_input!

  """on conflict condition"""
  on_conflict: contexts_on_conflict
}

"""
on conflict condition type for table "contexts"
"""
input contexts_on_conflict {
  constraint: contexts_constraint!
  update_columns: [contexts_update_column!]! = []
  where: contexts_bool_exp
}

"""Ordering options when selecting data from "contexts"."""
input contexts_order_by {
  comment: order_by
  name: order_by
  templates_aggregate: templates_aggregate_order_by
}

"""primary key columns input for table: contexts"""
input contexts_pk_columns_input {
  name: String!
}

"""
select columns of table "contexts"
"""
enum contexts_select_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
input type for updating data in table "contexts"
"""
input contexts_set_input {
  comment: String
  name: String
}

"""
update columns of table "contexts"
"""
enum contexts_update_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
columns and relationships of "custom_db_nodes"
"""
type custom_db_nodes {
  """(DC2Type:guid)"""
  customer_id: String!
  id: bigint!
  region: String!
  value: String!
}

"""
aggregated selection of "custom_db_nodes"
"""
type custom_db_nodes_aggregate {
  aggregate: custom_db_nodes_aggregate_fields
  nodes: [custom_db_nodes!]!
}

"""
aggregate fields of "custom_db_nodes"
"""
type custom_db_nodes_aggregate_fields {
  avg: custom_db_nodes_avg_fields
  count(columns: [custom_db_nodes_select_column!], distinct: Boolean): Int!
  max: custom_db_nodes_max_fields
  min: custom_db_nodes_min_fields
  stddev: custom_db_nodes_stddev_fields
  stddev_pop: custom_db_nodes_stddev_pop_fields
  stddev_samp: custom_db_nodes_stddev_samp_fields
  sum: custom_db_nodes_sum_fields
  var_pop: custom_db_nodes_var_pop_fields
  var_samp: custom_db_nodes_var_samp_fields
  variance: custom_db_nodes_variance_fields
}

"""aggregate avg on columns"""
type custom_db_nodes_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "custom_db_nodes". All fields are combined with a logical 'AND'.
"""
input custom_db_nodes_bool_exp {
  _and: [custom_db_nodes_bool_exp!]
  _not: custom_db_nodes_bool_exp
  _or: [custom_db_nodes_bool_exp!]
  customer_id: String_comparison_exp
  id: bigint_comparison_exp
  region: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "custom_db_nodes"
"""
enum custom_db_nodes_constraint {
  """unique or primary key constraint"""
  idx_51457_primary
}

"""
input type for incrementing numeric columns in table "custom_db_nodes"
"""
input custom_db_nodes_inc_input {
  id: bigint
}

"""
input type for inserting data into table "custom_db_nodes"
"""
input custom_db_nodes_insert_input {
  """(DC2Type:guid)"""
  customer_id: String
  id: bigint
  region: String
  value: String
}

"""aggregate max on columns"""
type custom_db_nodes_max_fields {
  """(DC2Type:guid)"""
  customer_id: String
  id: bigint
  region: String
  value: String
}

"""aggregate min on columns"""
type custom_db_nodes_min_fields {
  """(DC2Type:guid)"""
  customer_id: String
  id: bigint
  region: String
  value: String
}

"""
response of any mutation on the table "custom_db_nodes"
"""
type custom_db_nodes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [custom_db_nodes!]!
}

"""
on conflict condition type for table "custom_db_nodes"
"""
input custom_db_nodes_on_conflict {
  constraint: custom_db_nodes_constraint!
  update_columns: [custom_db_nodes_update_column!]! = []
  where: custom_db_nodes_bool_exp
}

"""Ordering options when selecting data from "custom_db_nodes"."""
input custom_db_nodes_order_by {
  customer_id: order_by
  id: order_by
  region: order_by
  value: order_by
}

"""primary key columns input for table: custom_db_nodes"""
input custom_db_nodes_pk_columns_input {
  id: bigint!
}

"""
select columns of table "custom_db_nodes"
"""
enum custom_db_nodes_select_column {
  """column name"""
  customer_id

  """column name"""
  id

  """column name"""
  region

  """column name"""
  value
}

"""
input type for updating data in table "custom_db_nodes"
"""
input custom_db_nodes_set_input {
  """(DC2Type:guid)"""
  customer_id: String
  id: bigint
  region: String
  value: String
}

"""aggregate stddev on columns"""
type custom_db_nodes_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type custom_db_nodes_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type custom_db_nodes_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type custom_db_nodes_sum_fields {
  id: bigint
}

"""
update columns of table "custom_db_nodes"
"""
enum custom_db_nodes_update_column {
  """column name"""
  customer_id

  """column name"""
  id

  """column name"""
  region

  """column name"""
  value
}

"""aggregate var_pop on columns"""
type custom_db_nodes_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type custom_db_nodes_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type custom_db_nodes_variance_fields {
  id: Float
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "document_patient"
"""
type document_patient {
  actno: String
  archived: Boolean!
  category: String
  create_user_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  deleted_at: timestamptz

  """An object relationship"""
  document: documents!
  document_id: bigint!
  for_signing: Boolean!
  hide_for_patient: Boolean
  imported_to_epr: Boolean!
  pades_path: String!

  """(DC2Type:guid)"""
  patient_id: String!

  """An object relationship"""
  securityLevelBySecurityLevel: security_levels
  security_level: String
  seen_by_patient: Boolean!
  seen_by_therapist: Boolean
  signicat_request_id: String!
  signicat_status: String!
  signicat_task_id: String!
  soknad_id: String
  updated_at: timestamptz
  xades_path: String!
}

"""
aggregated selection of "document_patient"
"""
type document_patient_aggregate {
  aggregate: document_patient_aggregate_fields
  nodes: [document_patient!]!
}

"""
aggregate fields of "document_patient"
"""
type document_patient_aggregate_fields {
  avg: document_patient_avg_fields
  count(columns: [document_patient_select_column!], distinct: Boolean): Int!
  max: document_patient_max_fields
  min: document_patient_min_fields
  stddev: document_patient_stddev_fields
  stddev_pop: document_patient_stddev_pop_fields
  stddev_samp: document_patient_stddev_samp_fields
  sum: document_patient_sum_fields
  var_pop: document_patient_var_pop_fields
  var_samp: document_patient_var_samp_fields
  variance: document_patient_variance_fields
}

"""
order by aggregate values of table "document_patient"
"""
input document_patient_aggregate_order_by {
  avg: document_patient_avg_order_by
  count: order_by
  max: document_patient_max_order_by
  min: document_patient_min_order_by
  stddev: document_patient_stddev_order_by
  stddev_pop: document_patient_stddev_pop_order_by
  stddev_samp: document_patient_stddev_samp_order_by
  sum: document_patient_sum_order_by
  var_pop: document_patient_var_pop_order_by
  var_samp: document_patient_var_samp_order_by
  variance: document_patient_variance_order_by
}

"""
input type for inserting array relation for remote table "document_patient"
"""
input document_patient_arr_rel_insert_input {
  data: [document_patient_insert_input!]!

  """on conflict condition"""
  on_conflict: document_patient_on_conflict
}

"""aggregate avg on columns"""
type document_patient_avg_fields {
  create_user_id: Float
  document_id: Float
}

"""
order by avg() on columns of table "document_patient"
"""
input document_patient_avg_order_by {
  create_user_id: order_by
  document_id: order_by
}

"""
Boolean expression to filter rows from the table "document_patient". All fields are combined with a logical 'AND'.
"""
input document_patient_bool_exp {
  _and: [document_patient_bool_exp!]
  _not: document_patient_bool_exp
  _or: [document_patient_bool_exp!]
  actno: String_comparison_exp
  archived: Boolean_comparison_exp
  category: String_comparison_exp
  create_user_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  deleted_at: timestamptz_comparison_exp
  document: documents_bool_exp
  document_id: bigint_comparison_exp
  for_signing: Boolean_comparison_exp
  hide_for_patient: Boolean_comparison_exp
  imported_to_epr: Boolean_comparison_exp
  pades_path: String_comparison_exp
  patient_id: String_comparison_exp
  securityLevelBySecurityLevel: security_levels_bool_exp
  security_level: String_comparison_exp
  seen_by_patient: Boolean_comparison_exp
  seen_by_therapist: Boolean_comparison_exp
  signicat_request_id: String_comparison_exp
  signicat_status: String_comparison_exp
  signicat_task_id: String_comparison_exp
  soknad_id: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  xades_path: String_comparison_exp
}

"""
unique or primary key constraints on table "document_patient"
"""
enum document_patient_constraint {
  """unique or primary key constraint"""
  idx_51477_primary
}

"""
input type for incrementing numeric columns in table "document_patient"
"""
input document_patient_inc_input {
  create_user_id: bigint
  document_id: bigint
}

"""
input type for inserting data into table "document_patient"
"""
input document_patient_insert_input {
  actno: String
  archived: Boolean
  category: String
  create_user_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  document: documents_obj_rel_insert_input
  document_id: bigint
  for_signing: Boolean
  hide_for_patient: Boolean
  imported_to_epr: Boolean
  pades_path: String

  """(DC2Type:guid)"""
  patient_id: String
  securityLevelBySecurityLevel: security_levels_obj_rel_insert_input
  security_level: String
  seen_by_patient: Boolean
  seen_by_therapist: Boolean
  signicat_request_id: String
  signicat_status: String
  signicat_task_id: String
  soknad_id: String
  updated_at: timestamptz
  xades_path: String
}

"""aggregate max on columns"""
type document_patient_max_fields {
  actno: String
  category: String
  create_user_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  document_id: bigint
  pades_path: String

  """(DC2Type:guid)"""
  patient_id: String
  security_level: String
  signicat_request_id: String
  signicat_status: String
  signicat_task_id: String
  soknad_id: String
  updated_at: timestamptz
  xades_path: String
}

"""
order by max() on columns of table "document_patient"
"""
input document_patient_max_order_by {
  actno: order_by
  category: order_by
  create_user_id: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  document_id: order_by
  pades_path: order_by

  """(DC2Type:guid)"""
  patient_id: order_by
  security_level: order_by
  signicat_request_id: order_by
  signicat_status: order_by
  signicat_task_id: order_by
  soknad_id: order_by
  updated_at: order_by
  xades_path: order_by
}

"""aggregate min on columns"""
type document_patient_min_fields {
  actno: String
  category: String
  create_user_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  document_id: bigint
  pades_path: String

  """(DC2Type:guid)"""
  patient_id: String
  security_level: String
  signicat_request_id: String
  signicat_status: String
  signicat_task_id: String
  soknad_id: String
  updated_at: timestamptz
  xades_path: String
}

"""
order by min() on columns of table "document_patient"
"""
input document_patient_min_order_by {
  actno: order_by
  category: order_by
  create_user_id: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  document_id: order_by
  pades_path: order_by

  """(DC2Type:guid)"""
  patient_id: order_by
  security_level: order_by
  signicat_request_id: order_by
  signicat_status: order_by
  signicat_task_id: order_by
  soknad_id: order_by
  updated_at: order_by
  xades_path: order_by
}

"""
response of any mutation on the table "document_patient"
"""
type document_patient_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [document_patient!]!
}

"""
on conflict condition type for table "document_patient"
"""
input document_patient_on_conflict {
  constraint: document_patient_constraint!
  update_columns: [document_patient_update_column!]! = []
  where: document_patient_bool_exp
}

"""Ordering options when selecting data from "document_patient"."""
input document_patient_order_by {
  actno: order_by
  archived: order_by
  category: order_by
  create_user_id: order_by
  created_at: order_by
  customer_id: order_by
  deleted_at: order_by
  document: documents_order_by
  document_id: order_by
  for_signing: order_by
  hide_for_patient: order_by
  imported_to_epr: order_by
  pades_path: order_by
  patient_id: order_by
  securityLevelBySecurityLevel: security_levels_order_by
  security_level: order_by
  seen_by_patient: order_by
  seen_by_therapist: order_by
  signicat_request_id: order_by
  signicat_status: order_by
  signicat_task_id: order_by
  soknad_id: order_by
  updated_at: order_by
  xades_path: order_by
}

"""primary key columns input for table: document_patient"""
input document_patient_pk_columns_input {
  document_id: bigint!

  """(DC2Type:guid)"""
  patient_id: String!
}

"""
select columns of table "document_patient"
"""
enum document_patient_select_column {
  """column name"""
  actno

  """column name"""
  archived

  """column name"""
  category

  """column name"""
  create_user_id

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  document_id

  """column name"""
  for_signing

  """column name"""
  hide_for_patient

  """column name"""
  imported_to_epr

  """column name"""
  pades_path

  """column name"""
  patient_id

  """column name"""
  security_level

  """column name"""
  seen_by_patient

  """column name"""
  seen_by_therapist

  """column name"""
  signicat_request_id

  """column name"""
  signicat_status

  """column name"""
  signicat_task_id

  """column name"""
  soknad_id

  """column name"""
  updated_at

  """column name"""
  xades_path
}

"""
input type for updating data in table "document_patient"
"""
input document_patient_set_input {
  actno: String
  archived: Boolean
  category: String
  create_user_id: bigint
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  document_id: bigint
  for_signing: Boolean
  hide_for_patient: Boolean
  imported_to_epr: Boolean
  pades_path: String

  """(DC2Type:guid)"""
  patient_id: String
  security_level: String
  seen_by_patient: Boolean
  seen_by_therapist: Boolean
  signicat_request_id: String
  signicat_status: String
  signicat_task_id: String
  soknad_id: String
  updated_at: timestamptz
  xades_path: String
}

"""aggregate stddev on columns"""
type document_patient_stddev_fields {
  create_user_id: Float
  document_id: Float
}

"""
order by stddev() on columns of table "document_patient"
"""
input document_patient_stddev_order_by {
  create_user_id: order_by
  document_id: order_by
}

"""aggregate stddev_pop on columns"""
type document_patient_stddev_pop_fields {
  create_user_id: Float
  document_id: Float
}

"""
order by stddev_pop() on columns of table "document_patient"
"""
input document_patient_stddev_pop_order_by {
  create_user_id: order_by
  document_id: order_by
}

"""aggregate stddev_samp on columns"""
type document_patient_stddev_samp_fields {
  create_user_id: Float
  document_id: Float
}

"""
order by stddev_samp() on columns of table "document_patient"
"""
input document_patient_stddev_samp_order_by {
  create_user_id: order_by
  document_id: order_by
}

"""aggregate sum on columns"""
type document_patient_sum_fields {
  create_user_id: bigint
  document_id: bigint
}

"""
order by sum() on columns of table "document_patient"
"""
input document_patient_sum_order_by {
  create_user_id: order_by
  document_id: order_by
}

"""
update columns of table "document_patient"
"""
enum document_patient_update_column {
  """column name"""
  actno

  """column name"""
  archived

  """column name"""
  category

  """column name"""
  create_user_id

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  document_id

  """column name"""
  for_signing

  """column name"""
  hide_for_patient

  """column name"""
  imported_to_epr

  """column name"""
  pades_path

  """column name"""
  patient_id

  """column name"""
  security_level

  """column name"""
  seen_by_patient

  """column name"""
  seen_by_therapist

  """column name"""
  signicat_request_id

  """column name"""
  signicat_status

  """column name"""
  signicat_task_id

  """column name"""
  soknad_id

  """column name"""
  updated_at

  """column name"""
  xades_path
}

"""aggregate var_pop on columns"""
type document_patient_var_pop_fields {
  create_user_id: Float
  document_id: Float
}

"""
order by var_pop() on columns of table "document_patient"
"""
input document_patient_var_pop_order_by {
  create_user_id: order_by
  document_id: order_by
}

"""aggregate var_samp on columns"""
type document_patient_var_samp_fields {
  create_user_id: Float
  document_id: Float
}

"""
order by var_samp() on columns of table "document_patient"
"""
input document_patient_var_samp_order_by {
  create_user_id: order_by
  document_id: order_by
}

"""aggregate variance on columns"""
type document_patient_variance_fields {
  create_user_id: Float
  document_id: Float
}

"""
order by variance() on columns of table "document_patient"
"""
input document_patient_variance_order_by {
  create_user_id: order_by
  document_id: order_by
}

"""
columns and relationships of "document_sms"
"""
type document_sms {
  """An object relationship"""
  document: documents!
  document_id: bigint!

  """An object relationship"""
  sm: sms!
  sms_id: bigint!
}

"""
aggregated selection of "document_sms"
"""
type document_sms_aggregate {
  aggregate: document_sms_aggregate_fields
  nodes: [document_sms!]!
}

"""
aggregate fields of "document_sms"
"""
type document_sms_aggregate_fields {
  avg: document_sms_avg_fields
  count(columns: [document_sms_select_column!], distinct: Boolean): Int!
  max: document_sms_max_fields
  min: document_sms_min_fields
  stddev: document_sms_stddev_fields
  stddev_pop: document_sms_stddev_pop_fields
  stddev_samp: document_sms_stddev_samp_fields
  sum: document_sms_sum_fields
  var_pop: document_sms_var_pop_fields
  var_samp: document_sms_var_samp_fields
  variance: document_sms_variance_fields
}

"""
order by aggregate values of table "document_sms"
"""
input document_sms_aggregate_order_by {
  avg: document_sms_avg_order_by
  count: order_by
  max: document_sms_max_order_by
  min: document_sms_min_order_by
  stddev: document_sms_stddev_order_by
  stddev_pop: document_sms_stddev_pop_order_by
  stddev_samp: document_sms_stddev_samp_order_by
  sum: document_sms_sum_order_by
  var_pop: document_sms_var_pop_order_by
  var_samp: document_sms_var_samp_order_by
  variance: document_sms_variance_order_by
}

"""
input type for inserting array relation for remote table "document_sms"
"""
input document_sms_arr_rel_insert_input {
  data: [document_sms_insert_input!]!
}

"""aggregate avg on columns"""
type document_sms_avg_fields {
  document_id: Float
  sms_id: Float
}

"""
order by avg() on columns of table "document_sms"
"""
input document_sms_avg_order_by {
  document_id: order_by
  sms_id: order_by
}

"""
Boolean expression to filter rows from the table "document_sms". All fields are combined with a logical 'AND'.
"""
input document_sms_bool_exp {
  _and: [document_sms_bool_exp!]
  _not: document_sms_bool_exp
  _or: [document_sms_bool_exp!]
  document: documents_bool_exp
  document_id: bigint_comparison_exp
  sm: sms_bool_exp
  sms_id: bigint_comparison_exp
}

"""
input type for incrementing numeric columns in table "document_sms"
"""
input document_sms_inc_input {
  document_id: bigint
  sms_id: bigint
}

"""
input type for inserting data into table "document_sms"
"""
input document_sms_insert_input {
  document: documents_obj_rel_insert_input
  document_id: bigint
  sm: sms_obj_rel_insert_input
  sms_id: bigint
}

"""aggregate max on columns"""
type document_sms_max_fields {
  document_id: bigint
  sms_id: bigint
}

"""
order by max() on columns of table "document_sms"
"""
input document_sms_max_order_by {
  document_id: order_by
  sms_id: order_by
}

"""aggregate min on columns"""
type document_sms_min_fields {
  document_id: bigint
  sms_id: bigint
}

"""
order by min() on columns of table "document_sms"
"""
input document_sms_min_order_by {
  document_id: order_by
  sms_id: order_by
}

"""
response of any mutation on the table "document_sms"
"""
type document_sms_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [document_sms!]!
}

"""Ordering options when selecting data from "document_sms"."""
input document_sms_order_by {
  document: documents_order_by
  document_id: order_by
  sm: sms_order_by
  sms_id: order_by
}

"""
select columns of table "document_sms"
"""
enum document_sms_select_column {
  """column name"""
  document_id

  """column name"""
  sms_id
}

"""
input type for updating data in table "document_sms"
"""
input document_sms_set_input {
  document_id: bigint
  sms_id: bigint
}

"""aggregate stddev on columns"""
type document_sms_stddev_fields {
  document_id: Float
  sms_id: Float
}

"""
order by stddev() on columns of table "document_sms"
"""
input document_sms_stddev_order_by {
  document_id: order_by
  sms_id: order_by
}

"""aggregate stddev_pop on columns"""
type document_sms_stddev_pop_fields {
  document_id: Float
  sms_id: Float
}

"""
order by stddev_pop() on columns of table "document_sms"
"""
input document_sms_stddev_pop_order_by {
  document_id: order_by
  sms_id: order_by
}

"""aggregate stddev_samp on columns"""
type document_sms_stddev_samp_fields {
  document_id: Float
  sms_id: Float
}

"""
order by stddev_samp() on columns of table "document_sms"
"""
input document_sms_stddev_samp_order_by {
  document_id: order_by
  sms_id: order_by
}

"""aggregate sum on columns"""
type document_sms_sum_fields {
  document_id: bigint
  sms_id: bigint
}

"""
order by sum() on columns of table "document_sms"
"""
input document_sms_sum_order_by {
  document_id: order_by
  sms_id: order_by
}

"""aggregate var_pop on columns"""
type document_sms_var_pop_fields {
  document_id: Float
  sms_id: Float
}

"""
order by var_pop() on columns of table "document_sms"
"""
input document_sms_var_pop_order_by {
  document_id: order_by
  sms_id: order_by
}

"""aggregate var_samp on columns"""
type document_sms_var_samp_fields {
  document_id: Float
  sms_id: Float
}

"""
order by var_samp() on columns of table "document_sms"
"""
input document_sms_var_samp_order_by {
  document_id: order_by
  sms_id: order_by
}

"""aggregate variance on columns"""
type document_sms_variance_fields {
  document_id: Float
  sms_id: Float
}

"""
order by variance() on columns of table "document_sms"
"""
input document_sms_variance_order_by {
  document_id: order_by
  sms_id: order_by
}

"""
columns and relationships of "documents"
"""
type documents {
  auto_import: Boolean!
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  deleted_at: timestamptz

  """An array relationship"""
  document_patients(
    """distinct select on columns"""
    distinct_on: [document_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_patient_order_by!]

    """filter the rows returned"""
    where: document_patient_bool_exp
  ): [document_patient!]!

  """An aggregate relationship"""
  document_patients_aggregate(
    """distinct select on columns"""
    distinct_on: [document_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_patient_order_by!]

    """filter the rows returned"""
    where: document_patient_bool_exp
  ): document_patient_aggregate!

  """An array relationship"""
  document_sms(
    """distinct select on columns"""
    distinct_on: [document_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sms_order_by!]

    """filter the rows returned"""
    where: document_sms_bool_exp
  ): [document_sms!]!

  """An aggregate relationship"""
  document_sms_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sms_order_by!]

    """filter the rows returned"""
    where: document_sms_bool_exp
  ): document_sms_aggregate!
  id: bigint!
  name: String!
  path: String!
  region: String
  sds_id: String
  signed_by_therapist: Boolean!
  updated_at: timestamptz

  """(DC2Type:guid)"""
  upload_patient_id: String
}

"""
aggregated selection of "documents"
"""
type documents_aggregate {
  aggregate: documents_aggregate_fields
  nodes: [documents!]!
}

"""
aggregate fields of "documents"
"""
type documents_aggregate_fields {
  avg: documents_avg_fields
  count(columns: [documents_select_column!], distinct: Boolean): Int!
  max: documents_max_fields
  min: documents_min_fields
  stddev: documents_stddev_fields
  stddev_pop: documents_stddev_pop_fields
  stddev_samp: documents_stddev_samp_fields
  sum: documents_sum_fields
  var_pop: documents_var_pop_fields
  var_samp: documents_var_samp_fields
  variance: documents_variance_fields
}

"""aggregate avg on columns"""
type documents_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "documents". All fields are combined with a logical 'AND'.
"""
input documents_bool_exp {
  _and: [documents_bool_exp!]
  _not: documents_bool_exp
  _or: [documents_bool_exp!]
  auto_import: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  deleted_at: timestamptz_comparison_exp
  document_patients: document_patient_bool_exp
  document_sms: document_sms_bool_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  path: String_comparison_exp
  region: String_comparison_exp
  sds_id: String_comparison_exp
  signed_by_therapist: Boolean_comparison_exp
  updated_at: timestamptz_comparison_exp
  upload_patient_id: String_comparison_exp
}

"""
unique or primary key constraints on table "documents"
"""
enum documents_constraint {
  """unique or primary key constraint"""
  idx_51466_primary
}

"""
input type for incrementing numeric columns in table "documents"
"""
input documents_inc_input {
  id: bigint
}

"""
input type for inserting data into table "documents"
"""
input documents_insert_input {
  auto_import: Boolean
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  document_patients: document_patient_arr_rel_insert_input
  document_sms: document_sms_arr_rel_insert_input
  id: bigint
  name: String
  path: String
  region: String
  sds_id: String
  signed_by_therapist: Boolean
  updated_at: timestamptz

  """(DC2Type:guid)"""
  upload_patient_id: String
}

"""aggregate max on columns"""
type documents_max_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  name: String
  path: String
  region: String
  sds_id: String
  updated_at: timestamptz

  """(DC2Type:guid)"""
  upload_patient_id: String
}

"""aggregate min on columns"""
type documents_min_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  name: String
  path: String
  region: String
  sds_id: String
  updated_at: timestamptz

  """(DC2Type:guid)"""
  upload_patient_id: String
}

"""
response of any mutation on the table "documents"
"""
type documents_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [documents!]!
}

"""
input type for inserting object relation for remote table "documents"
"""
input documents_obj_rel_insert_input {
  data: documents_insert_input!

  """on conflict condition"""
  on_conflict: documents_on_conflict
}

"""
on conflict condition type for table "documents"
"""
input documents_on_conflict {
  constraint: documents_constraint!
  update_columns: [documents_update_column!]! = []
  where: documents_bool_exp
}

"""Ordering options when selecting data from "documents"."""
input documents_order_by {
  auto_import: order_by
  created_at: order_by
  customer_id: order_by
  deleted_at: order_by
  document_patients_aggregate: document_patient_aggregate_order_by
  document_sms_aggregate: document_sms_aggregate_order_by
  id: order_by
  name: order_by
  path: order_by
  region: order_by
  sds_id: order_by
  signed_by_therapist: order_by
  updated_at: order_by
  upload_patient_id: order_by
}

"""primary key columns input for table: documents"""
input documents_pk_columns_input {
  id: bigint!
}

"""
select columns of table "documents"
"""
enum documents_select_column {
  """column name"""
  auto_import

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  path

  """column name"""
  region

  """column name"""
  sds_id

  """column name"""
  signed_by_therapist

  """column name"""
  updated_at

  """column name"""
  upload_patient_id
}

"""
input type for updating data in table "documents"
"""
input documents_set_input {
  auto_import: Boolean
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  name: String
  path: String
  region: String
  sds_id: String
  signed_by_therapist: Boolean
  updated_at: timestamptz

  """(DC2Type:guid)"""
  upload_patient_id: String
}

"""aggregate stddev on columns"""
type documents_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type documents_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type documents_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type documents_sum_fields {
  id: bigint
}

"""
update columns of table "documents"
"""
enum documents_update_column {
  """column name"""
  auto_import

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  path

  """column name"""
  region

  """column name"""
  sds_id

  """column name"""
  signed_by_therapist

  """column name"""
  updated_at

  """column name"""
  upload_patient_id
}

"""aggregate var_pop on columns"""
type documents_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type documents_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type documents_variance_fields {
  id: Float
}

"""
columns and relationships of "groups"
"""
type groups {
  comment: String

  """An array relationship"""
  consent_templates(
    """distinct select on columns"""
    distinct_on: [consent_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_templates_order_by!]

    """filter the rows returned"""
    where: consent_templates_bool_exp
  ): [consent_templates!]!

  """An aggregate relationship"""
  consent_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_templates_order_by!]

    """filter the rows returned"""
    where: consent_templates_bool_exp
  ): consent_templates_aggregate!

  """An array relationship"""
  consents(
    """distinct select on columns"""
    distinct_on: [consents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consents_order_by!]

    """filter the rows returned"""
    where: consents_bool_exp
  ): [consents!]!

  """An aggregate relationship"""
  consents_aggregate(
    """distinct select on columns"""
    distinct_on: [consents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consents_order_by!]

    """filter the rows returned"""
    where: consents_bool_exp
  ): consents_aggregate!
  name: String!
}

"""
aggregated selection of "groups"
"""
type groups_aggregate {
  aggregate: groups_aggregate_fields
  nodes: [groups!]!
}

"""
aggregate fields of "groups"
"""
type groups_aggregate_fields {
  count(columns: [groups_select_column!], distinct: Boolean): Int!
  max: groups_max_fields
  min: groups_min_fields
}

"""
Boolean expression to filter rows from the table "groups". All fields are combined with a logical 'AND'.
"""
input groups_bool_exp {
  _and: [groups_bool_exp!]
  _not: groups_bool_exp
  _or: [groups_bool_exp!]
  comment: String_comparison_exp
  consent_templates: consent_templates_bool_exp
  consents: consents_bool_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "groups"
"""
enum groups_constraint {
  """unique or primary key constraint"""
  groups_pkey
}

"""
input type for inserting data into table "groups"
"""
input groups_insert_input {
  comment: String
  consent_templates: consent_templates_arr_rel_insert_input
  consents: consents_arr_rel_insert_input
  name: String
}

"""aggregate max on columns"""
type groups_max_fields {
  comment: String
  name: String
}

"""aggregate min on columns"""
type groups_min_fields {
  comment: String
  name: String
}

"""
response of any mutation on the table "groups"
"""
type groups_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [groups!]!
}

"""
input type for inserting object relation for remote table "groups"
"""
input groups_obj_rel_insert_input {
  data: groups_insert_input!

  """on conflict condition"""
  on_conflict: groups_on_conflict
}

"""
on conflict condition type for table "groups"
"""
input groups_on_conflict {
  constraint: groups_constraint!
  update_columns: [groups_update_column!]! = []
  where: groups_bool_exp
}

"""Ordering options when selecting data from "groups"."""
input groups_order_by {
  comment: order_by
  consent_templates_aggregate: consent_templates_aggregate_order_by
  consents_aggregate: consents_aggregate_order_by
  name: order_by
}

"""primary key columns input for table: groups"""
input groups_pk_columns_input {
  name: String!
}

"""
select columns of table "groups"
"""
enum groups_select_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
input type for updating data in table "groups"
"""
input groups_set_input {
  comment: String
  name: String
}

"""
update columns of table "groups"
"""
enum groups_update_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
columns and relationships of "initiators"
"""
type initiators {
  comment: String
  name: String!

  """An array relationship"""
  queries(
    """distinct select on columns"""
    distinct_on: [queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [queries_order_by!]

    """filter the rows returned"""
    where: queries_bool_exp
  ): [queries!]!

  """An aggregate relationship"""
  queries_aggregate(
    """distinct select on columns"""
    distinct_on: [queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [queries_order_by!]

    """filter the rows returned"""
    where: queries_bool_exp
  ): queries_aggregate!
}

"""
aggregated selection of "initiators"
"""
type initiators_aggregate {
  aggregate: initiators_aggregate_fields
  nodes: [initiators!]!
}

"""
aggregate fields of "initiators"
"""
type initiators_aggregate_fields {
  count(columns: [initiators_select_column!], distinct: Boolean): Int!
  max: initiators_max_fields
  min: initiators_min_fields
}

"""
Boolean expression to filter rows from the table "initiators". All fields are combined with a logical 'AND'.
"""
input initiators_bool_exp {
  _and: [initiators_bool_exp!]
  _not: initiators_bool_exp
  _or: [initiators_bool_exp!]
  comment: String_comparison_exp
  name: String_comparison_exp
  queries: queries_bool_exp
}

"""
unique or primary key constraints on table "initiators"
"""
enum initiators_constraint {
  """unique or primary key constraint"""
  initiators_pkey
}

"""
input type for inserting data into table "initiators"
"""
input initiators_insert_input {
  comment: String
  name: String
  queries: queries_arr_rel_insert_input
}

"""aggregate max on columns"""
type initiators_max_fields {
  comment: String
  name: String
}

"""aggregate min on columns"""
type initiators_min_fields {
  comment: String
  name: String
}

"""
response of any mutation on the table "initiators"
"""
type initiators_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [initiators!]!
}

"""
input type for inserting object relation for remote table "initiators"
"""
input initiators_obj_rel_insert_input {
  data: initiators_insert_input!

  """on conflict condition"""
  on_conflict: initiators_on_conflict
}

"""
on conflict condition type for table "initiators"
"""
input initiators_on_conflict {
  constraint: initiators_constraint!
  update_columns: [initiators_update_column!]! = []
  where: initiators_bool_exp
}

"""Ordering options when selecting data from "initiators"."""
input initiators_order_by {
  comment: order_by
  name: order_by
  queries_aggregate: queries_aggregate_order_by
}

"""primary key columns input for table: initiators"""
input initiators_pk_columns_input {
  name: String!
}

"""
select columns of table "initiators"
"""
enum initiators_select_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
input type for updating data in table "initiators"
"""
input initiators_set_input {
  comment: String
  name: String
}

"""
update columns of table "initiators"
"""
enum initiators_update_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
columns and relationships of "migrations"
"""
type migrations {
  batch: bigint!
  id: bigint!
  migration: String!
}

"""
aggregated selection of "migrations"
"""
type migrations_aggregate {
  aggregate: migrations_aggregate_fields
  nodes: [migrations!]!
}

"""
aggregate fields of "migrations"
"""
type migrations_aggregate_fields {
  avg: migrations_avg_fields
  count(columns: [migrations_select_column!], distinct: Boolean): Int!
  max: migrations_max_fields
  min: migrations_min_fields
  stddev: migrations_stddev_fields
  stddev_pop: migrations_stddev_pop_fields
  stddev_samp: migrations_stddev_samp_fields
  sum: migrations_sum_fields
  var_pop: migrations_var_pop_fields
  var_samp: migrations_var_samp_fields
  variance: migrations_variance_fields
}

"""aggregate avg on columns"""
type migrations_avg_fields {
  batch: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "migrations". All fields are combined with a logical 'AND'.
"""
input migrations_bool_exp {
  _and: [migrations_bool_exp!]
  _not: migrations_bool_exp
  _or: [migrations_bool_exp!]
  batch: bigint_comparison_exp
  id: bigint_comparison_exp
  migration: String_comparison_exp
}

"""
unique or primary key constraints on table "migrations"
"""
enum migrations_constraint {
  """unique or primary key constraint"""
  idx_51501_primary
}

"""
input type for incrementing numeric columns in table "migrations"
"""
input migrations_inc_input {
  batch: bigint
  id: bigint
}

"""
input type for inserting data into table "migrations"
"""
input migrations_insert_input {
  batch: bigint
  id: bigint
  migration: String
}

"""aggregate max on columns"""
type migrations_max_fields {
  batch: bigint
  id: bigint
  migration: String
}

"""aggregate min on columns"""
type migrations_min_fields {
  batch: bigint
  id: bigint
  migration: String
}

"""
response of any mutation on the table "migrations"
"""
type migrations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [migrations!]!
}

"""
on conflict condition type for table "migrations"
"""
input migrations_on_conflict {
  constraint: migrations_constraint!
  update_columns: [migrations_update_column!]! = []
  where: migrations_bool_exp
}

"""Ordering options when selecting data from "migrations"."""
input migrations_order_by {
  batch: order_by
  id: order_by
  migration: order_by
}

"""primary key columns input for table: migrations"""
input migrations_pk_columns_input {
  id: bigint!
}

"""
select columns of table "migrations"
"""
enum migrations_select_column {
  """column name"""
  batch

  """column name"""
  id

  """column name"""
  migration
}

"""
input type for updating data in table "migrations"
"""
input migrations_set_input {
  batch: bigint
  id: bigint
  migration: String
}

"""aggregate stddev on columns"""
type migrations_stddev_fields {
  batch: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type migrations_stddev_pop_fields {
  batch: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type migrations_stddev_samp_fields {
  batch: Float
  id: Float
}

"""aggregate sum on columns"""
type migrations_sum_fields {
  batch: bigint
  id: bigint
}

"""
update columns of table "migrations"
"""
enum migrations_update_column {
  """column name"""
  batch

  """column name"""
  id

  """column name"""
  migration
}

"""aggregate var_pop on columns"""
type migrations_var_pop_fields {
  batch: Float
  id: Float
}

"""aggregate var_samp on columns"""
type migrations_var_samp_fields {
  batch: Float
  id: Float
}

"""aggregate variance on columns"""
type migrations_variance_fields {
  batch: Float
  id: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "accessible"
  """
  delete_accessible(
    """filter the rows which have to be deleted"""
    where: accessible_bool_exp!
  ): accessible_mutation_response

  """
  delete single row from the table: "accessible"
  """
  delete_accessible_by_pk(name: String!): accessible

  """
  delete data from the table: "anonymous_answers"
  """
  delete_anonymous_answers(
    """filter the rows which have to be deleted"""
    where: anonymous_answers_bool_exp!
  ): anonymous_answers_mutation_response

  """
  delete single row from the table: "anonymous_answers"
  """
  delete_anonymous_answers_by_pk(id: bigint!): anonymous_answers

  """
  delete data from the table: "anonymous_invitations"
  """
  delete_anonymous_invitations(
    """filter the rows which have to be deleted"""
    where: anonymous_invitations_bool_exp!
  ): anonymous_invitations_mutation_response

  """
  delete single row from the table: "anonymous_invitations"
  """
  delete_anonymous_invitations_by_pk(id: bigint!): anonymous_invitations

  """
  delete data from the table: "anonymous_queries"
  """
  delete_anonymous_queries(
    """filter the rows which have to be deleted"""
    where: anonymous_queries_bool_exp!
  ): anonymous_queries_mutation_response

  """
  delete single row from the table: "anonymous_queries"
  """
  delete_anonymous_queries_by_pk(id: bigint!): anonymous_queries

  """
  delete data from the table: "anonymous_sms"
  """
  delete_anonymous_sms(
    """filter the rows which have to be deleted"""
    where: anonymous_sms_bool_exp!
  ): anonymous_sms_mutation_response

  """
  delete single row from the table: "anonymous_sms"
  """
  delete_anonymous_sms_by_pk(id: bigint!): anonymous_sms

  """
  delete data from the table: "anonymous_template_question"
  """
  delete_anonymous_template_question(
    """filter the rows which have to be deleted"""
    where: anonymous_template_question_bool_exp!
  ): anonymous_template_question_mutation_response

  """
  delete data from the table: "anonymous_templates"
  """
  delete_anonymous_templates(
    """filter the rows which have to be deleted"""
    where: anonymous_templates_bool_exp!
  ): anonymous_templates_mutation_response

  """
  delete single row from the table: "anonymous_templates"
  """
  delete_anonymous_templates_by_pk(id: bigint!): anonymous_templates

  """
  delete data from the table: "categories"
  """
  delete_categories(
    """filter the rows which have to be deleted"""
    where: categories_bool_exp!
  ): categories_mutation_response

  """
  delete single row from the table: "categories"
  """
  delete_categories_by_pk(name: String!): categories

  """
  delete data from the table: "consent_patient"
  """
  delete_consent_patient(
    """filter the rows which have to be deleted"""
    where: consent_patient_bool_exp!
  ): consent_patient_mutation_response

  """
  delete data from the table: "consent_template_to_template"
  """
  delete_consent_template_to_template(
    """filter the rows which have to be deleted"""
    where: consent_template_to_template_bool_exp!
  ): consent_template_to_template_mutation_response

  """
  delete data from the table: "consent_templates"
  """
  delete_consent_templates(
    """filter the rows which have to be deleted"""
    where: consent_templates_bool_exp!
  ): consent_templates_mutation_response

  """
  delete single row from the table: "consent_templates"
  """
  delete_consent_templates_by_pk(id: bigint!): consent_templates

  """
  delete data from the table: "consents"
  """
  delete_consents(
    """filter the rows which have to be deleted"""
    where: consents_bool_exp!
  ): consents_mutation_response

  """
  delete single row from the table: "consents"
  """
  delete_consents_by_pk(id: bigint!): consents

  """
  delete data from the table: "contexts"
  """
  delete_contexts(
    """filter the rows which have to be deleted"""
    where: contexts_bool_exp!
  ): contexts_mutation_response

  """
  delete single row from the table: "contexts"
  """
  delete_contexts_by_pk(name: String!): contexts

  """
  delete data from the table: "custom_db_nodes"
  """
  delete_custom_db_nodes(
    """filter the rows which have to be deleted"""
    where: custom_db_nodes_bool_exp!
  ): custom_db_nodes_mutation_response

  """
  delete single row from the table: "custom_db_nodes"
  """
  delete_custom_db_nodes_by_pk(id: bigint!): custom_db_nodes

  """
  delete data from the table: "document_patient"
  """
  delete_document_patient(
    """filter the rows which have to be deleted"""
    where: document_patient_bool_exp!
  ): document_patient_mutation_response

  """
  delete single row from the table: "document_patient"
  """
  delete_document_patient_by_pk(
    document_id: bigint!

    """(DC2Type:guid)"""
    patient_id: String!
  ): document_patient

  """
  delete data from the table: "document_sms"
  """
  delete_document_sms(
    """filter the rows which have to be deleted"""
    where: document_sms_bool_exp!
  ): document_sms_mutation_response

  """
  delete data from the table: "documents"
  """
  delete_documents(
    """filter the rows which have to be deleted"""
    where: documents_bool_exp!
  ): documents_mutation_response

  """
  delete single row from the table: "documents"
  """
  delete_documents_by_pk(id: bigint!): documents

  """
  delete data from the table: "groups"
  """
  delete_groups(
    """filter the rows which have to be deleted"""
    where: groups_bool_exp!
  ): groups_mutation_response

  """
  delete single row from the table: "groups"
  """
  delete_groups_by_pk(name: String!): groups

  """
  delete data from the table: "initiators"
  """
  delete_initiators(
    """filter the rows which have to be deleted"""
    where: initiators_bool_exp!
  ): initiators_mutation_response

  """
  delete single row from the table: "initiators"
  """
  delete_initiators_by_pk(name: String!): initiators

  """
  delete data from the table: "migrations"
  """
  delete_migrations(
    """filter the rows which have to be deleted"""
    where: migrations_bool_exp!
  ): migrations_mutation_response

  """
  delete single row from the table: "migrations"
  """
  delete_migrations_by_pk(id: bigint!): migrations

  """
  delete data from the table: "projects"
  """
  delete_projects(
    """filter the rows which have to be deleted"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  delete single row from the table: "projects"
  """
  delete_projects_by_pk(
    """(DC2Type:guid)"""
    customer_id: String!
    journal_project_id: String!
    shortcut_id: String!
  ): projects

  """
  delete data from the table: "queries"
  """
  delete_queries(
    """filter the rows which have to be deleted"""
    where: queries_bool_exp!
  ): queries_mutation_response

  """
  delete single row from the table: "queries"
  """
  delete_queries_by_pk(id: bigint!): queries

  """
  delete data from the table: "question_composite_question"
  """
  delete_question_composite_question(
    """filter the rows which have to be deleted"""
    where: question_composite_question_bool_exp!
  ): question_composite_question_mutation_response

  """
  delete data from the table: "question_template"
  """
  delete_question_template(
    """filter the rows which have to be deleted"""
    where: question_template_bool_exp!
  ): question_template_mutation_response

  """
  delete data from the table: "questions"
  """
  delete_questions(
    """filter the rows which have to be deleted"""
    where: questions_bool_exp!
  ): questions_mutation_response

  """
  delete single row from the table: "questions"
  """
  delete_questions_by_pk(id: bigint!): questions

  """
  delete data from the table: "security_levels"
  """
  delete_security_levels(
    """filter the rows which have to be deleted"""
    where: security_levels_bool_exp!
  ): security_levels_mutation_response

  """
  delete single row from the table: "security_levels"
  """
  delete_security_levels_by_pk(name: String!): security_levels

  """
  delete data from the table: "settings"
  """
  delete_settings(
    """filter the rows which have to be deleted"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  delete single row from the table: "settings"
  """
  delete_settings_by_pk(id: bigint!): settings

  """
  delete data from the table: "shortcuts"
  """
  delete_shortcuts(
    """filter the rows which have to be deleted"""
    where: shortcuts_bool_exp!
  ): shortcuts_mutation_response

  """
  delete single row from the table: "shortcuts"
  """
  delete_shortcuts_by_pk(id: String!): shortcuts

  """
  delete data from the table: "sms"
  """
  delete_sms(
    """filter the rows which have to be deleted"""
    where: sms_bool_exp!
  ): sms_mutation_response

  """
  delete single row from the table: "sms"
  """
  delete_sms_by_pk(id: bigint!): sms

  """
  delete data from the table: "sms_template_template"
  """
  delete_sms_template_template(
    """filter the rows which have to be deleted"""
    where: sms_template_template_bool_exp!
  ): sms_template_template_mutation_response

  """
  delete single row from the table: "sms_template_template"
  """
  delete_sms_template_template_by_pk(sms_template_id: bigint!, template_id: bigint!): sms_template_template

  """
  delete data from the table: "sms_templates"
  """
  delete_sms_templates(
    """filter the rows which have to be deleted"""
    where: sms_templates_bool_exp!
  ): sms_templates_mutation_response

  """
  delete single row from the table: "sms_templates"
  """
  delete_sms_templates_by_pk(id: bigint!): sms_templates

  """
  delete data from the table: "status"
  """
  delete_status(
    """filter the rows which have to be deleted"""
    where: status_bool_exp!
  ): status_mutation_response

  """
  delete single row from the table: "status"
  """
  delete_status_by_pk(name: String!): status

  """
  delete data from the table: "templates"
  """
  delete_templates(
    """filter the rows which have to be deleted"""
    where: templates_bool_exp!
  ): templates_mutation_response

  """
  delete single row from the table: "templates"
  """
  delete_templates_by_pk(id: bigint!): templates

  """
  delete data from the table: "types"
  """
  delete_types(
    """filter the rows which have to be deleted"""
    where: types_bool_exp!
  ): types_mutation_response

  """
  delete single row from the table: "types"
  """
  delete_types_by_pk(name: String!): types

  """
  insert data into the table: "accessible"
  """
  insert_accessible(
    """the rows to be inserted"""
    objects: [accessible_insert_input!]!

    """on conflict condition"""
    on_conflict: accessible_on_conflict
  ): accessible_mutation_response

  """
  insert a single row into the table: "accessible"
  """
  insert_accessible_one(
    """the row to be inserted"""
    object: accessible_insert_input!

    """on conflict condition"""
    on_conflict: accessible_on_conflict
  ): accessible

  """
  insert data into the table: "anonymous_answers"
  """
  insert_anonymous_answers(
    """the rows to be inserted"""
    objects: [anonymous_answers_insert_input!]!

    """on conflict condition"""
    on_conflict: anonymous_answers_on_conflict
  ): anonymous_answers_mutation_response

  """
  insert a single row into the table: "anonymous_answers"
  """
  insert_anonymous_answers_one(
    """the row to be inserted"""
    object: anonymous_answers_insert_input!

    """on conflict condition"""
    on_conflict: anonymous_answers_on_conflict
  ): anonymous_answers

  """
  insert data into the table: "anonymous_invitations"
  """
  insert_anonymous_invitations(
    """the rows to be inserted"""
    objects: [anonymous_invitations_insert_input!]!

    """on conflict condition"""
    on_conflict: anonymous_invitations_on_conflict
  ): anonymous_invitations_mutation_response

  """
  insert a single row into the table: "anonymous_invitations"
  """
  insert_anonymous_invitations_one(
    """the row to be inserted"""
    object: anonymous_invitations_insert_input!

    """on conflict condition"""
    on_conflict: anonymous_invitations_on_conflict
  ): anonymous_invitations

  """
  insert data into the table: "anonymous_queries"
  """
  insert_anonymous_queries(
    """the rows to be inserted"""
    objects: [anonymous_queries_insert_input!]!

    """on conflict condition"""
    on_conflict: anonymous_queries_on_conflict
  ): anonymous_queries_mutation_response

  """
  insert a single row into the table: "anonymous_queries"
  """
  insert_anonymous_queries_one(
    """the row to be inserted"""
    object: anonymous_queries_insert_input!

    """on conflict condition"""
    on_conflict: anonymous_queries_on_conflict
  ): anonymous_queries

  """
  insert data into the table: "anonymous_sms"
  """
  insert_anonymous_sms(
    """the rows to be inserted"""
    objects: [anonymous_sms_insert_input!]!

    """on conflict condition"""
    on_conflict: anonymous_sms_on_conflict
  ): anonymous_sms_mutation_response

  """
  insert a single row into the table: "anonymous_sms"
  """
  insert_anonymous_sms_one(
    """the row to be inserted"""
    object: anonymous_sms_insert_input!

    """on conflict condition"""
    on_conflict: anonymous_sms_on_conflict
  ): anonymous_sms

  """
  insert data into the table: "anonymous_template_question"
  """
  insert_anonymous_template_question(
    """the rows to be inserted"""
    objects: [anonymous_template_question_insert_input!]!

    """on conflict condition"""
    on_conflict: anonymous_template_question_on_conflict
  ): anonymous_template_question_mutation_response

  """
  insert a single row into the table: "anonymous_template_question"
  """
  insert_anonymous_template_question_one(
    """the row to be inserted"""
    object: anonymous_template_question_insert_input!

    """on conflict condition"""
    on_conflict: anonymous_template_question_on_conflict
  ): anonymous_template_question

  """
  insert data into the table: "anonymous_templates"
  """
  insert_anonymous_templates(
    """the rows to be inserted"""
    objects: [anonymous_templates_insert_input!]!

    """on conflict condition"""
    on_conflict: anonymous_templates_on_conflict
  ): anonymous_templates_mutation_response

  """
  insert a single row into the table: "anonymous_templates"
  """
  insert_anonymous_templates_one(
    """the row to be inserted"""
    object: anonymous_templates_insert_input!

    """on conflict condition"""
    on_conflict: anonymous_templates_on_conflict
  ): anonymous_templates

  """
  insert data into the table: "categories"
  """
  insert_categories(
    """the rows to be inserted"""
    objects: [categories_insert_input!]!

    """on conflict condition"""
    on_conflict: categories_on_conflict
  ): categories_mutation_response

  """
  insert a single row into the table: "categories"
  """
  insert_categories_one(
    """the row to be inserted"""
    object: categories_insert_input!

    """on conflict condition"""
    on_conflict: categories_on_conflict
  ): categories

  """
  insert data into the table: "consent_patient"
  """
  insert_consent_patient(
    """the rows to be inserted"""
    objects: [consent_patient_insert_input!]!
  ): consent_patient_mutation_response

  """
  insert a single row into the table: "consent_patient"
  """
  insert_consent_patient_one(
    """the row to be inserted"""
    object: consent_patient_insert_input!
  ): consent_patient

  """
  insert data into the table: "consent_template_to_template"
  """
  insert_consent_template_to_template(
    """the rows to be inserted"""
    objects: [consent_template_to_template_insert_input!]!

    """on conflict condition"""
    on_conflict: consent_template_to_template_on_conflict
  ): consent_template_to_template_mutation_response

  """
  insert a single row into the table: "consent_template_to_template"
  """
  insert_consent_template_to_template_one(
    """the row to be inserted"""
    object: consent_template_to_template_insert_input!

    """on conflict condition"""
    on_conflict: consent_template_to_template_on_conflict
  ): consent_template_to_template

  """
  insert data into the table: "consent_templates"
  """
  insert_consent_templates(
    """the rows to be inserted"""
    objects: [consent_templates_insert_input!]!

    """on conflict condition"""
    on_conflict: consent_templates_on_conflict
  ): consent_templates_mutation_response

  """
  insert a single row into the table: "consent_templates"
  """
  insert_consent_templates_one(
    """the row to be inserted"""
    object: consent_templates_insert_input!

    """on conflict condition"""
    on_conflict: consent_templates_on_conflict
  ): consent_templates

  """
  insert data into the table: "consents"
  """
  insert_consents(
    """the rows to be inserted"""
    objects: [consents_insert_input!]!

    """on conflict condition"""
    on_conflict: consents_on_conflict
  ): consents_mutation_response

  """
  insert a single row into the table: "consents"
  """
  insert_consents_one(
    """the row to be inserted"""
    object: consents_insert_input!

    """on conflict condition"""
    on_conflict: consents_on_conflict
  ): consents

  """
  insert data into the table: "contexts"
  """
  insert_contexts(
    """the rows to be inserted"""
    objects: [contexts_insert_input!]!

    """on conflict condition"""
    on_conflict: contexts_on_conflict
  ): contexts_mutation_response

  """
  insert a single row into the table: "contexts"
  """
  insert_contexts_one(
    """the row to be inserted"""
    object: contexts_insert_input!

    """on conflict condition"""
    on_conflict: contexts_on_conflict
  ): contexts

  """
  insert data into the table: "custom_db_nodes"
  """
  insert_custom_db_nodes(
    """the rows to be inserted"""
    objects: [custom_db_nodes_insert_input!]!

    """on conflict condition"""
    on_conflict: custom_db_nodes_on_conflict
  ): custom_db_nodes_mutation_response

  """
  insert a single row into the table: "custom_db_nodes"
  """
  insert_custom_db_nodes_one(
    """the row to be inserted"""
    object: custom_db_nodes_insert_input!

    """on conflict condition"""
    on_conflict: custom_db_nodes_on_conflict
  ): custom_db_nodes

  """
  insert data into the table: "document_patient"
  """
  insert_document_patient(
    """the rows to be inserted"""
    objects: [document_patient_insert_input!]!

    """on conflict condition"""
    on_conflict: document_patient_on_conflict
  ): document_patient_mutation_response

  """
  insert a single row into the table: "document_patient"
  """
  insert_document_patient_one(
    """the row to be inserted"""
    object: document_patient_insert_input!

    """on conflict condition"""
    on_conflict: document_patient_on_conflict
  ): document_patient

  """
  insert data into the table: "document_sms"
  """
  insert_document_sms(
    """the rows to be inserted"""
    objects: [document_sms_insert_input!]!
  ): document_sms_mutation_response

  """
  insert a single row into the table: "document_sms"
  """
  insert_document_sms_one(
    """the row to be inserted"""
    object: document_sms_insert_input!
  ): document_sms

  """
  insert data into the table: "documents"
  """
  insert_documents(
    """the rows to be inserted"""
    objects: [documents_insert_input!]!

    """on conflict condition"""
    on_conflict: documents_on_conflict
  ): documents_mutation_response

  """
  insert a single row into the table: "documents"
  """
  insert_documents_one(
    """the row to be inserted"""
    object: documents_insert_input!

    """on conflict condition"""
    on_conflict: documents_on_conflict
  ): documents

  """
  insert data into the table: "groups"
  """
  insert_groups(
    """the rows to be inserted"""
    objects: [groups_insert_input!]!

    """on conflict condition"""
    on_conflict: groups_on_conflict
  ): groups_mutation_response

  """
  insert a single row into the table: "groups"
  """
  insert_groups_one(
    """the row to be inserted"""
    object: groups_insert_input!

    """on conflict condition"""
    on_conflict: groups_on_conflict
  ): groups

  """
  insert data into the table: "initiators"
  """
  insert_initiators(
    """the rows to be inserted"""
    objects: [initiators_insert_input!]!

    """on conflict condition"""
    on_conflict: initiators_on_conflict
  ): initiators_mutation_response

  """
  insert a single row into the table: "initiators"
  """
  insert_initiators_one(
    """the row to be inserted"""
    object: initiators_insert_input!

    """on conflict condition"""
    on_conflict: initiators_on_conflict
  ): initiators

  """
  insert data into the table: "migrations"
  """
  insert_migrations(
    """the rows to be inserted"""
    objects: [migrations_insert_input!]!

    """on conflict condition"""
    on_conflict: migrations_on_conflict
  ): migrations_mutation_response

  """
  insert a single row into the table: "migrations"
  """
  insert_migrations_one(
    """the row to be inserted"""
    object: migrations_insert_input!

    """on conflict condition"""
    on_conflict: migrations_on_conflict
  ): migrations

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  insert data into the table: "queries"
  """
  insert_queries(
    """the rows to be inserted"""
    objects: [queries_insert_input!]!

    """on conflict condition"""
    on_conflict: queries_on_conflict
  ): queries_mutation_response

  """
  insert a single row into the table: "queries"
  """
  insert_queries_one(
    """the row to be inserted"""
    object: queries_insert_input!

    """on conflict condition"""
    on_conflict: queries_on_conflict
  ): queries

  """
  insert data into the table: "question_composite_question"
  """
  insert_question_composite_question(
    """the rows to be inserted"""
    objects: [question_composite_question_insert_input!]!

    """on conflict condition"""
    on_conflict: question_composite_question_on_conflict
  ): question_composite_question_mutation_response

  """
  insert a single row into the table: "question_composite_question"
  """
  insert_question_composite_question_one(
    """the row to be inserted"""
    object: question_composite_question_insert_input!

    """on conflict condition"""
    on_conflict: question_composite_question_on_conflict
  ): question_composite_question

  """
  insert data into the table: "question_template"
  """
  insert_question_template(
    """the rows to be inserted"""
    objects: [question_template_insert_input!]!

    """on conflict condition"""
    on_conflict: question_template_on_conflict
  ): question_template_mutation_response

  """
  insert a single row into the table: "question_template"
  """
  insert_question_template_one(
    """the row to be inserted"""
    object: question_template_insert_input!

    """on conflict condition"""
    on_conflict: question_template_on_conflict
  ): question_template

  """
  insert data into the table: "questions"
  """
  insert_questions(
    """the rows to be inserted"""
    objects: [questions_insert_input!]!

    """on conflict condition"""
    on_conflict: questions_on_conflict
  ): questions_mutation_response

  """
  insert a single row into the table: "questions"
  """
  insert_questions_one(
    """the row to be inserted"""
    object: questions_insert_input!

    """on conflict condition"""
    on_conflict: questions_on_conflict
  ): questions

  """
  insert data into the table: "security_levels"
  """
  insert_security_levels(
    """the rows to be inserted"""
    objects: [security_levels_insert_input!]!

    """on conflict condition"""
    on_conflict: security_levels_on_conflict
  ): security_levels_mutation_response

  """
  insert a single row into the table: "security_levels"
  """
  insert_security_levels_one(
    """the row to be inserted"""
    object: security_levels_insert_input!

    """on conflict condition"""
    on_conflict: security_levels_on_conflict
  ): security_levels

  """
  insert data into the table: "settings"
  """
  insert_settings(
    """the rows to be inserted"""
    objects: [settings_insert_input!]!

    """on conflict condition"""
    on_conflict: settings_on_conflict
  ): settings_mutation_response

  """
  insert a single row into the table: "settings"
  """
  insert_settings_one(
    """the row to be inserted"""
    object: settings_insert_input!

    """on conflict condition"""
    on_conflict: settings_on_conflict
  ): settings

  """
  insert data into the table: "shortcuts"
  """
  insert_shortcuts(
    """the rows to be inserted"""
    objects: [shortcuts_insert_input!]!

    """on conflict condition"""
    on_conflict: shortcuts_on_conflict
  ): shortcuts_mutation_response

  """
  insert a single row into the table: "shortcuts"
  """
  insert_shortcuts_one(
    """the row to be inserted"""
    object: shortcuts_insert_input!

    """on conflict condition"""
    on_conflict: shortcuts_on_conflict
  ): shortcuts

  """
  insert data into the table: "sms"
  """
  insert_sms(
    """the rows to be inserted"""
    objects: [sms_insert_input!]!

    """on conflict condition"""
    on_conflict: sms_on_conflict
  ): sms_mutation_response

  """
  insert a single row into the table: "sms"
  """
  insert_sms_one(
    """the row to be inserted"""
    object: sms_insert_input!

    """on conflict condition"""
    on_conflict: sms_on_conflict
  ): sms

  """
  insert data into the table: "sms_template_template"
  """
  insert_sms_template_template(
    """the rows to be inserted"""
    objects: [sms_template_template_insert_input!]!

    """on conflict condition"""
    on_conflict: sms_template_template_on_conflict
  ): sms_template_template_mutation_response

  """
  insert a single row into the table: "sms_template_template"
  """
  insert_sms_template_template_one(
    """the row to be inserted"""
    object: sms_template_template_insert_input!

    """on conflict condition"""
    on_conflict: sms_template_template_on_conflict
  ): sms_template_template

  """
  insert data into the table: "sms_templates"
  """
  insert_sms_templates(
    """the rows to be inserted"""
    objects: [sms_templates_insert_input!]!

    """on conflict condition"""
    on_conflict: sms_templates_on_conflict
  ): sms_templates_mutation_response

  """
  insert a single row into the table: "sms_templates"
  """
  insert_sms_templates_one(
    """the row to be inserted"""
    object: sms_templates_insert_input!

    """on conflict condition"""
    on_conflict: sms_templates_on_conflict
  ): sms_templates

  """
  insert data into the table: "status"
  """
  insert_status(
    """the rows to be inserted"""
    objects: [status_insert_input!]!

    """on conflict condition"""
    on_conflict: status_on_conflict
  ): status_mutation_response

  """
  insert a single row into the table: "status"
  """
  insert_status_one(
    """the row to be inserted"""
    object: status_insert_input!

    """on conflict condition"""
    on_conflict: status_on_conflict
  ): status

  """
  insert data into the table: "templates"
  """
  insert_templates(
    """the rows to be inserted"""
    objects: [templates_insert_input!]!

    """on conflict condition"""
    on_conflict: templates_on_conflict
  ): templates_mutation_response

  """
  insert a single row into the table: "templates"
  """
  insert_templates_one(
    """the row to be inserted"""
    object: templates_insert_input!

    """on conflict condition"""
    on_conflict: templates_on_conflict
  ): templates

  """
  insert data into the table: "types"
  """
  insert_types(
    """the rows to be inserted"""
    objects: [types_insert_input!]!

    """on conflict condition"""
    on_conflict: types_on_conflict
  ): types_mutation_response

  """
  insert a single row into the table: "types"
  """
  insert_types_one(
    """the row to be inserted"""
    object: types_insert_input!

    """on conflict condition"""
    on_conflict: types_on_conflict
  ): types

  """
  update data of the table: "accessible"
  """
  update_accessible(
    """sets the columns of the filtered rows to the given values"""
    _set: accessible_set_input

    """filter the rows which have to be updated"""
    where: accessible_bool_exp!
  ): accessible_mutation_response

  """
  update single row of the table: "accessible"
  """
  update_accessible_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: accessible_set_input
    pk_columns: accessible_pk_columns_input!
  ): accessible

  """
  update data of the table: "anonymous_answers"
  """
  update_anonymous_answers(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_answers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_answers_set_input

    """filter the rows which have to be updated"""
    where: anonymous_answers_bool_exp!
  ): anonymous_answers_mutation_response

  """
  update single row of the table: "anonymous_answers"
  """
  update_anonymous_answers_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_answers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_answers_set_input
    pk_columns: anonymous_answers_pk_columns_input!
  ): anonymous_answers

  """
  update data of the table: "anonymous_invitations"
  """
  update_anonymous_invitations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_invitations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_invitations_set_input

    """filter the rows which have to be updated"""
    where: anonymous_invitations_bool_exp!
  ): anonymous_invitations_mutation_response

  """
  update single row of the table: "anonymous_invitations"
  """
  update_anonymous_invitations_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_invitations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_invitations_set_input
    pk_columns: anonymous_invitations_pk_columns_input!
  ): anonymous_invitations

  """
  update data of the table: "anonymous_queries"
  """
  update_anonymous_queries(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_queries_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_queries_set_input

    """filter the rows which have to be updated"""
    where: anonymous_queries_bool_exp!
  ): anonymous_queries_mutation_response

  """
  update single row of the table: "anonymous_queries"
  """
  update_anonymous_queries_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_queries_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_queries_set_input
    pk_columns: anonymous_queries_pk_columns_input!
  ): anonymous_queries

  """
  update data of the table: "anonymous_sms"
  """
  update_anonymous_sms(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_sms_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_sms_set_input

    """filter the rows which have to be updated"""
    where: anonymous_sms_bool_exp!
  ): anonymous_sms_mutation_response

  """
  update single row of the table: "anonymous_sms"
  """
  update_anonymous_sms_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_sms_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_sms_set_input
    pk_columns: anonymous_sms_pk_columns_input!
  ): anonymous_sms

  """
  update data of the table: "anonymous_template_question"
  """
  update_anonymous_template_question(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_template_question_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_template_question_set_input

    """filter the rows which have to be updated"""
    where: anonymous_template_question_bool_exp!
  ): anonymous_template_question_mutation_response

  """
  update data of the table: "anonymous_templates"
  """
  update_anonymous_templates(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_templates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_templates_set_input

    """filter the rows which have to be updated"""
    where: anonymous_templates_bool_exp!
  ): anonymous_templates_mutation_response

  """
  update single row of the table: "anonymous_templates"
  """
  update_anonymous_templates_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: anonymous_templates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: anonymous_templates_set_input
    pk_columns: anonymous_templates_pk_columns_input!
  ): anonymous_templates

  """
  update data of the table: "categories"
  """
  update_categories(
    """sets the columns of the filtered rows to the given values"""
    _set: categories_set_input

    """filter the rows which have to be updated"""
    where: categories_bool_exp!
  ): categories_mutation_response

  """
  update single row of the table: "categories"
  """
  update_categories_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: categories_set_input
    pk_columns: categories_pk_columns_input!
  ): categories

  """
  update data of the table: "consent_patient"
  """
  update_consent_patient(
    """increments the numeric columns with given value of the filtered values"""
    _inc: consent_patient_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: consent_patient_set_input

    """filter the rows which have to be updated"""
    where: consent_patient_bool_exp!
  ): consent_patient_mutation_response

  """
  update data of the table: "consent_template_to_template"
  """
  update_consent_template_to_template(
    """increments the numeric columns with given value of the filtered values"""
    _inc: consent_template_to_template_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: consent_template_to_template_set_input

    """filter the rows which have to be updated"""
    where: consent_template_to_template_bool_exp!
  ): consent_template_to_template_mutation_response

  """
  update data of the table: "consent_templates"
  """
  update_consent_templates(
    """increments the numeric columns with given value of the filtered values"""
    _inc: consent_templates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: consent_templates_set_input

    """filter the rows which have to be updated"""
    where: consent_templates_bool_exp!
  ): consent_templates_mutation_response

  """
  update single row of the table: "consent_templates"
  """
  update_consent_templates_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: consent_templates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: consent_templates_set_input
    pk_columns: consent_templates_pk_columns_input!
  ): consent_templates

  """
  update data of the table: "consents"
  """
  update_consents(
    """increments the numeric columns with given value of the filtered values"""
    _inc: consents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: consents_set_input

    """filter the rows which have to be updated"""
    where: consents_bool_exp!
  ): consents_mutation_response

  """
  update single row of the table: "consents"
  """
  update_consents_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: consents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: consents_set_input
    pk_columns: consents_pk_columns_input!
  ): consents

  """
  update data of the table: "contexts"
  """
  update_contexts(
    """sets the columns of the filtered rows to the given values"""
    _set: contexts_set_input

    """filter the rows which have to be updated"""
    where: contexts_bool_exp!
  ): contexts_mutation_response

  """
  update single row of the table: "contexts"
  """
  update_contexts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: contexts_set_input
    pk_columns: contexts_pk_columns_input!
  ): contexts

  """
  update data of the table: "custom_db_nodes"
  """
  update_custom_db_nodes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: custom_db_nodes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: custom_db_nodes_set_input

    """filter the rows which have to be updated"""
    where: custom_db_nodes_bool_exp!
  ): custom_db_nodes_mutation_response

  """
  update single row of the table: "custom_db_nodes"
  """
  update_custom_db_nodes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: custom_db_nodes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: custom_db_nodes_set_input
    pk_columns: custom_db_nodes_pk_columns_input!
  ): custom_db_nodes

  """
  update data of the table: "document_patient"
  """
  update_document_patient(
    """increments the numeric columns with given value of the filtered values"""
    _inc: document_patient_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: document_patient_set_input

    """filter the rows which have to be updated"""
    where: document_patient_bool_exp!
  ): document_patient_mutation_response

  """
  update single row of the table: "document_patient"
  """
  update_document_patient_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: document_patient_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: document_patient_set_input
    pk_columns: document_patient_pk_columns_input!
  ): document_patient

  """
  update data of the table: "document_sms"
  """
  update_document_sms(
    """increments the numeric columns with given value of the filtered values"""
    _inc: document_sms_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: document_sms_set_input

    """filter the rows which have to be updated"""
    where: document_sms_bool_exp!
  ): document_sms_mutation_response

  """
  update data of the table: "documents"
  """
  update_documents(
    """increments the numeric columns with given value of the filtered values"""
    _inc: documents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: documents_set_input

    """filter the rows which have to be updated"""
    where: documents_bool_exp!
  ): documents_mutation_response

  """
  update single row of the table: "documents"
  """
  update_documents_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: documents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: documents_set_input
    pk_columns: documents_pk_columns_input!
  ): documents

  """
  update data of the table: "groups"
  """
  update_groups(
    """sets the columns of the filtered rows to the given values"""
    _set: groups_set_input

    """filter the rows which have to be updated"""
    where: groups_bool_exp!
  ): groups_mutation_response

  """
  update single row of the table: "groups"
  """
  update_groups_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: groups_set_input
    pk_columns: groups_pk_columns_input!
  ): groups

  """
  update data of the table: "initiators"
  """
  update_initiators(
    """sets the columns of the filtered rows to the given values"""
    _set: initiators_set_input

    """filter the rows which have to be updated"""
    where: initiators_bool_exp!
  ): initiators_mutation_response

  """
  update single row of the table: "initiators"
  """
  update_initiators_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: initiators_set_input
    pk_columns: initiators_pk_columns_input!
  ): initiators

  """
  update data of the table: "migrations"
  """
  update_migrations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: migrations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: migrations_set_input

    """filter the rows which have to be updated"""
    where: migrations_bool_exp!
  ): migrations_mutation_response

  """
  update single row of the table: "migrations"
  """
  update_migrations_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: migrations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: migrations_set_input
    pk_columns: migrations_pk_columns_input!
  ): migrations

  """
  update data of the table: "projects"
  """
  update_projects(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input

    """filter the rows which have to be updated"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  update single row of the table: "projects"
  """
  update_projects_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input
    pk_columns: projects_pk_columns_input!
  ): projects

  """
  update data of the table: "queries"
  """
  update_queries(
    """increments the numeric columns with given value of the filtered values"""
    _inc: queries_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: queries_set_input

    """filter the rows which have to be updated"""
    where: queries_bool_exp!
  ): queries_mutation_response

  """
  update single row of the table: "queries"
  """
  update_queries_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: queries_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: queries_set_input
    pk_columns: queries_pk_columns_input!
  ): queries

  """
  update data of the table: "question_composite_question"
  """
  update_question_composite_question(
    """increments the numeric columns with given value of the filtered values"""
    _inc: question_composite_question_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: question_composite_question_set_input

    """filter the rows which have to be updated"""
    where: question_composite_question_bool_exp!
  ): question_composite_question_mutation_response

  """
  update data of the table: "question_template"
  """
  update_question_template(
    """increments the numeric columns with given value of the filtered values"""
    _inc: question_template_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: question_template_set_input

    """filter the rows which have to be updated"""
    where: question_template_bool_exp!
  ): question_template_mutation_response

  """
  update data of the table: "questions"
  """
  update_questions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: questions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: questions_set_input

    """filter the rows which have to be updated"""
    where: questions_bool_exp!
  ): questions_mutation_response

  """
  update single row of the table: "questions"
  """
  update_questions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: questions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: questions_set_input
    pk_columns: questions_pk_columns_input!
  ): questions

  """
  update data of the table: "security_levels"
  """
  update_security_levels(
    """sets the columns of the filtered rows to the given values"""
    _set: security_levels_set_input

    """filter the rows which have to be updated"""
    where: security_levels_bool_exp!
  ): security_levels_mutation_response

  """
  update single row of the table: "security_levels"
  """
  update_security_levels_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: security_levels_set_input
    pk_columns: security_levels_pk_columns_input!
  ): security_levels

  """
  update data of the table: "settings"
  """
  update_settings(
    """increments the numeric columns with given value of the filtered values"""
    _inc: settings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input

    """filter the rows which have to be updated"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  update single row of the table: "settings"
  """
  update_settings_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: settings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input
    pk_columns: settings_pk_columns_input!
  ): settings

  """
  update data of the table: "shortcuts"
  """
  update_shortcuts(
    """sets the columns of the filtered rows to the given values"""
    _set: shortcuts_set_input

    """filter the rows which have to be updated"""
    where: shortcuts_bool_exp!
  ): shortcuts_mutation_response

  """
  update single row of the table: "shortcuts"
  """
  update_shortcuts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: shortcuts_set_input
    pk_columns: shortcuts_pk_columns_input!
  ): shortcuts

  """
  update data of the table: "sms"
  """
  update_sms(
    """increments the numeric columns with given value of the filtered values"""
    _inc: sms_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sms_set_input

    """filter the rows which have to be updated"""
    where: sms_bool_exp!
  ): sms_mutation_response

  """
  update single row of the table: "sms"
  """
  update_sms_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: sms_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sms_set_input
    pk_columns: sms_pk_columns_input!
  ): sms

  """
  update data of the table: "sms_template_template"
  """
  update_sms_template_template(
    """increments the numeric columns with given value of the filtered values"""
    _inc: sms_template_template_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sms_template_template_set_input

    """filter the rows which have to be updated"""
    where: sms_template_template_bool_exp!
  ): sms_template_template_mutation_response

  """
  update single row of the table: "sms_template_template"
  """
  update_sms_template_template_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: sms_template_template_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sms_template_template_set_input
    pk_columns: sms_template_template_pk_columns_input!
  ): sms_template_template

  """
  update data of the table: "sms_templates"
  """
  update_sms_templates(
    """increments the numeric columns with given value of the filtered values"""
    _inc: sms_templates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sms_templates_set_input

    """filter the rows which have to be updated"""
    where: sms_templates_bool_exp!
  ): sms_templates_mutation_response

  """
  update single row of the table: "sms_templates"
  """
  update_sms_templates_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: sms_templates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sms_templates_set_input
    pk_columns: sms_templates_pk_columns_input!
  ): sms_templates

  """
  update data of the table: "status"
  """
  update_status(
    """sets the columns of the filtered rows to the given values"""
    _set: status_set_input

    """filter the rows which have to be updated"""
    where: status_bool_exp!
  ): status_mutation_response

  """
  update single row of the table: "status"
  """
  update_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: status_set_input
    pk_columns: status_pk_columns_input!
  ): status

  """
  update data of the table: "templates"
  """
  update_templates(
    """increments the numeric columns with given value of the filtered values"""
    _inc: templates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: templates_set_input

    """filter the rows which have to be updated"""
    where: templates_bool_exp!
  ): templates_mutation_response

  """
  update single row of the table: "templates"
  """
  update_templates_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: templates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: templates_set_input
    pk_columns: templates_pk_columns_input!
  ): templates

  """
  update data of the table: "types"
  """
  update_types(
    """sets the columns of the filtered rows to the given values"""
    _set: types_set_input

    """filter the rows which have to be updated"""
    where: types_bool_exp!
  ): types_mutation_response

  """
  update single row of the table: "types"
  """
  update_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: types_set_input
    pk_columns: types_pk_columns_input!
  ): types
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "projects"
"""
type projects {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  id: String!
  journal_project_id: String!

  """An object relationship"""
  shortcut: shortcuts!
  shortcut_id: String!
  updated_at: timestamptz
}

"""
aggregated selection of "projects"
"""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

"""
aggregate fields of "projects"
"""
type projects_aggregate_fields {
  count(columns: [projects_select_column!], distinct: Boolean): Int!
  max: projects_max_fields
  min: projects_min_fields
}

"""
order by aggregate values of table "projects"
"""
input projects_aggregate_order_by {
  count: order_by
  max: projects_max_order_by
  min: projects_min_order_by
}

"""
input type for inserting array relation for remote table "projects"
"""
input projects_arr_rel_insert_input {
  data: [projects_insert_input!]!

  """on conflict condition"""
  on_conflict: projects_on_conflict
}

"""
Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
"""
input projects_bool_exp {
  _and: [projects_bool_exp!]
  _not: projects_bool_exp
  _or: [projects_bool_exp!]
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  id: String_comparison_exp
  journal_project_id: String_comparison_exp
  shortcut: shortcuts_bool_exp
  shortcut_id: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "projects"
"""
enum projects_constraint {
  """unique or primary key constraint"""
  idx_51505_primary

  """unique or primary key constraint"""
  idx_51505_projects_id_unique
}

"""
input type for inserting data into table "projects"
"""
input projects_insert_input {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  id: String
  journal_project_id: String
  shortcut: shortcuts_obj_rel_insert_input
  shortcut_id: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type projects_max_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  id: String
  journal_project_id: String
  shortcut_id: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "projects"
"""
input projects_max_order_by {
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  id: order_by
  journal_project_id: order_by
  shortcut_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type projects_min_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  id: String
  journal_project_id: String
  shortcut_id: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "projects"
"""
input projects_min_order_by {
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  id: order_by
  journal_project_id: order_by
  shortcut_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "projects"
"""
type projects_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [projects!]!
}

"""
on conflict condition type for table "projects"
"""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]! = []
  where: projects_bool_exp
}

"""Ordering options when selecting data from "projects"."""
input projects_order_by {
  created_at: order_by
  customer_id: order_by
  id: order_by
  journal_project_id: order_by
  shortcut: shortcuts_order_by
  shortcut_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: projects"""
input projects_pk_columns_input {
  """(DC2Type:guid)"""
  customer_id: String!
  journal_project_id: String!
  shortcut_id: String!
}

"""
select columns of table "projects"
"""
enum projects_select_column {
  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  id

  """column name"""
  journal_project_id

  """column name"""
  shortcut_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "projects"
"""
input projects_set_input {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  id: String
  journal_project_id: String
  shortcut_id: String
  updated_at: timestamptz
}

"""
update columns of table "projects"
"""
enum projects_update_column {
  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  id

  """column name"""
  journal_project_id

  """column name"""
  shortcut_id

  """column name"""
  updated_at
}

"""
columns and relationships of "queries"
"""
type queries {
  archived: Boolean!

  """An array relationship"""
  consents(
    """distinct select on columns"""
    distinct_on: [consents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consents_order_by!]

    """filter the rows returned"""
    where: consents_bool_exp
  ): [consents!]!

  """An aggregate relationship"""
  consents_aggregate(
    """distinct select on columns"""
    distinct_on: [consents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consents_order_by!]

    """filter the rows returned"""
    where: consents_bool_exp
  ): consents_aggregate!
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  deleted_at: timestamptz
  hide_for_patient: Boolean
  id: bigint!
  initiator: String

  """An object relationship"""
  initiatorByInitiator: initiators

  """(DC2Type:guid)"""
  patient_id: String!
  properties: String
  query_uuid: String!
  region: String!
  rejected: Boolean!
  security_level: smallint!
  seen_by_therapist: Boolean

  """An array relationship"""
  sms(
    """distinct select on columns"""
    distinct_on: [sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_order_by!]

    """filter the rows returned"""
    where: sms_bool_exp
  ): [sms!]!

  """An aggregate relationship"""
  sms_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_order_by!]

    """filter the rows returned"""
    where: sms_bool_exp
  ): sms_aggregate!
  soknad_id: String
  status: String

  """An object relationship"""
  statusByStatus: status
  template_id: bigint!
  title: String!
  updated_at: timestamptz
  valid_from: date
  valid_to: date!
}

"""
aggregated selection of "queries"
"""
type queries_aggregate {
  aggregate: queries_aggregate_fields
  nodes: [queries!]!
}

"""
aggregate fields of "queries"
"""
type queries_aggregate_fields {
  avg: queries_avg_fields
  count(columns: [queries_select_column!], distinct: Boolean): Int!
  max: queries_max_fields
  min: queries_min_fields
  stddev: queries_stddev_fields
  stddev_pop: queries_stddev_pop_fields
  stddev_samp: queries_stddev_samp_fields
  sum: queries_sum_fields
  var_pop: queries_var_pop_fields
  var_samp: queries_var_samp_fields
  variance: queries_variance_fields
}

"""
order by aggregate values of table "queries"
"""
input queries_aggregate_order_by {
  avg: queries_avg_order_by
  count: order_by
  max: queries_max_order_by
  min: queries_min_order_by
  stddev: queries_stddev_order_by
  stddev_pop: queries_stddev_pop_order_by
  stddev_samp: queries_stddev_samp_order_by
  sum: queries_sum_order_by
  var_pop: queries_var_pop_order_by
  var_samp: queries_var_samp_order_by
  variance: queries_variance_order_by
}

"""
input type for inserting array relation for remote table "queries"
"""
input queries_arr_rel_insert_input {
  data: [queries_insert_input!]!

  """on conflict condition"""
  on_conflict: queries_on_conflict
}

"""aggregate avg on columns"""
type queries_avg_fields {
  id: Float
  security_level: Float
  template_id: Float
}

"""
order by avg() on columns of table "queries"
"""
input queries_avg_order_by {
  id: order_by
  security_level: order_by
  template_id: order_by
}

"""
Boolean expression to filter rows from the table "queries". All fields are combined with a logical 'AND'.
"""
input queries_bool_exp {
  _and: [queries_bool_exp!]
  _not: queries_bool_exp
  _or: [queries_bool_exp!]
  archived: Boolean_comparison_exp
  consents: consents_bool_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  deleted_at: timestamptz_comparison_exp
  hide_for_patient: Boolean_comparison_exp
  id: bigint_comparison_exp
  initiator: String_comparison_exp
  initiatorByInitiator: initiators_bool_exp
  patient_id: String_comparison_exp
  properties: String_comparison_exp
  query_uuid: String_comparison_exp
  region: String_comparison_exp
  rejected: Boolean_comparison_exp
  security_level: smallint_comparison_exp
  seen_by_therapist: Boolean_comparison_exp
  sms: sms_bool_exp
  soknad_id: String_comparison_exp
  status: String_comparison_exp
  statusByStatus: status_bool_exp
  template_id: bigint_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  valid_from: date_comparison_exp
  valid_to: date_comparison_exp
}

"""
unique or primary key constraints on table "queries"
"""
enum queries_constraint {
  """unique or primary key constraint"""
  idx_51513_primary

  """unique or primary key constraint"""
  idx_51513_queries_query_uuid_unique
}

"""
input type for incrementing numeric columns in table "queries"
"""
input queries_inc_input {
  id: bigint
  security_level: smallint
  template_id: bigint
}

"""
input type for inserting data into table "queries"
"""
input queries_insert_input {
  archived: Boolean
  consents: consents_arr_rel_insert_input
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  hide_for_patient: Boolean
  id: bigint
  initiator: String
  initiatorByInitiator: initiators_obj_rel_insert_input

  """(DC2Type:guid)"""
  patient_id: String
  properties: String
  query_uuid: String
  region: String
  rejected: Boolean
  security_level: smallint
  seen_by_therapist: Boolean
  sms: sms_arr_rel_insert_input
  soknad_id: String
  status: String
  statusByStatus: status_obj_rel_insert_input
  template_id: bigint
  title: String
  updated_at: timestamptz
  valid_from: date
  valid_to: date
}

"""aggregate max on columns"""
type queries_max_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  initiator: String

  """(DC2Type:guid)"""
  patient_id: String
  properties: String
  query_uuid: String
  region: String
  security_level: smallint
  soknad_id: String
  status: String
  template_id: bigint
  title: String
  updated_at: timestamptz
  valid_from: date
  valid_to: date
}

"""
order by max() on columns of table "queries"
"""
input queries_max_order_by {
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  initiator: order_by

  """(DC2Type:guid)"""
  patient_id: order_by
  properties: order_by
  query_uuid: order_by
  region: order_by
  security_level: order_by
  soknad_id: order_by
  status: order_by
  template_id: order_by
  title: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""aggregate min on columns"""
type queries_min_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  initiator: String

  """(DC2Type:guid)"""
  patient_id: String
  properties: String
  query_uuid: String
  region: String
  security_level: smallint
  soknad_id: String
  status: String
  template_id: bigint
  title: String
  updated_at: timestamptz
  valid_from: date
  valid_to: date
}

"""
order by min() on columns of table "queries"
"""
input queries_min_order_by {
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  initiator: order_by

  """(DC2Type:guid)"""
  patient_id: order_by
  properties: order_by
  query_uuid: order_by
  region: order_by
  security_level: order_by
  soknad_id: order_by
  status: order_by
  template_id: order_by
  title: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""
response of any mutation on the table "queries"
"""
type queries_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [queries!]!
}

"""
input type for inserting object relation for remote table "queries"
"""
input queries_obj_rel_insert_input {
  data: queries_insert_input!

  """on conflict condition"""
  on_conflict: queries_on_conflict
}

"""
on conflict condition type for table "queries"
"""
input queries_on_conflict {
  constraint: queries_constraint!
  update_columns: [queries_update_column!]! = []
  where: queries_bool_exp
}

"""Ordering options when selecting data from "queries"."""
input queries_order_by {
  archived: order_by
  consents_aggregate: consents_aggregate_order_by
  created_at: order_by
  customer_id: order_by
  deleted_at: order_by
  hide_for_patient: order_by
  id: order_by
  initiator: order_by
  initiatorByInitiator: initiators_order_by
  patient_id: order_by
  properties: order_by
  query_uuid: order_by
  region: order_by
  rejected: order_by
  security_level: order_by
  seen_by_therapist: order_by
  sms_aggregate: sms_aggregate_order_by
  soknad_id: order_by
  status: order_by
  statusByStatus: status_order_by
  template_id: order_by
  title: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""primary key columns input for table: queries"""
input queries_pk_columns_input {
  id: bigint!
}

"""
select columns of table "queries"
"""
enum queries_select_column {
  """column name"""
  archived

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  hide_for_patient

  """column name"""
  id

  """column name"""
  initiator

  """column name"""
  patient_id

  """column name"""
  properties

  """column name"""
  query_uuid

  """column name"""
  region

  """column name"""
  rejected

  """column name"""
  security_level

  """column name"""
  seen_by_therapist

  """column name"""
  soknad_id

  """column name"""
  status

  """column name"""
  template_id

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  valid_from

  """column name"""
  valid_to
}

"""
input type for updating data in table "queries"
"""
input queries_set_input {
  archived: Boolean
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  hide_for_patient: Boolean
  id: bigint
  initiator: String

  """(DC2Type:guid)"""
  patient_id: String
  properties: String
  query_uuid: String
  region: String
  rejected: Boolean
  security_level: smallint
  seen_by_therapist: Boolean
  soknad_id: String
  status: String
  template_id: bigint
  title: String
  updated_at: timestamptz
  valid_from: date
  valid_to: date
}

"""aggregate stddev on columns"""
type queries_stddev_fields {
  id: Float
  security_level: Float
  template_id: Float
}

"""
order by stddev() on columns of table "queries"
"""
input queries_stddev_order_by {
  id: order_by
  security_level: order_by
  template_id: order_by
}

"""aggregate stddev_pop on columns"""
type queries_stddev_pop_fields {
  id: Float
  security_level: Float
  template_id: Float
}

"""
order by stddev_pop() on columns of table "queries"
"""
input queries_stddev_pop_order_by {
  id: order_by
  security_level: order_by
  template_id: order_by
}

"""aggregate stddev_samp on columns"""
type queries_stddev_samp_fields {
  id: Float
  security_level: Float
  template_id: Float
}

"""
order by stddev_samp() on columns of table "queries"
"""
input queries_stddev_samp_order_by {
  id: order_by
  security_level: order_by
  template_id: order_by
}

"""aggregate sum on columns"""
type queries_sum_fields {
  id: bigint
  security_level: smallint
  template_id: bigint
}

"""
order by sum() on columns of table "queries"
"""
input queries_sum_order_by {
  id: order_by
  security_level: order_by
  template_id: order_by
}

"""
update columns of table "queries"
"""
enum queries_update_column {
  """column name"""
  archived

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  hide_for_patient

  """column name"""
  id

  """column name"""
  initiator

  """column name"""
  patient_id

  """column name"""
  properties

  """column name"""
  query_uuid

  """column name"""
  region

  """column name"""
  rejected

  """column name"""
  security_level

  """column name"""
  seen_by_therapist

  """column name"""
  soknad_id

  """column name"""
  status

  """column name"""
  template_id

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  valid_from

  """column name"""
  valid_to
}

"""aggregate var_pop on columns"""
type queries_var_pop_fields {
  id: Float
  security_level: Float
  template_id: Float
}

"""
order by var_pop() on columns of table "queries"
"""
input queries_var_pop_order_by {
  id: order_by
  security_level: order_by
  template_id: order_by
}

"""aggregate var_samp on columns"""
type queries_var_samp_fields {
  id: Float
  security_level: Float
  template_id: Float
}

"""
order by var_samp() on columns of table "queries"
"""
input queries_var_samp_order_by {
  id: order_by
  security_level: order_by
  template_id: order_by
}

"""aggregate variance on columns"""
type queries_variance_fields {
  id: Float
  security_level: Float
  template_id: Float
}

"""
order by variance() on columns of table "queries"
"""
input queries_variance_order_by {
  id: order_by
  security_level: order_by
  template_id: order_by
}

type query_root {
  """
  fetch data from the table: "accessible"
  """
  accessible(
    """distinct select on columns"""
    distinct_on: [accessible_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accessible_order_by!]

    """filter the rows returned"""
    where: accessible_bool_exp
  ): [accessible!]!

  """
  fetch aggregated fields from the table: "accessible"
  """
  accessible_aggregate(
    """distinct select on columns"""
    distinct_on: [accessible_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accessible_order_by!]

    """filter the rows returned"""
    where: accessible_bool_exp
  ): accessible_aggregate!

  """fetch data from the table: "accessible" using primary key columns"""
  accessible_by_pk(name: String!): accessible

  """An array relationship"""
  anonymous_answers(
    """distinct select on columns"""
    distinct_on: [anonymous_answers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_answers_order_by!]

    """filter the rows returned"""
    where: anonymous_answers_bool_exp
  ): [anonymous_answers!]!

  """An aggregate relationship"""
  anonymous_answers_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_answers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_answers_order_by!]

    """filter the rows returned"""
    where: anonymous_answers_bool_exp
  ): anonymous_answers_aggregate!

  """
  fetch data from the table: "anonymous_answers" using primary key columns
  """
  anonymous_answers_by_pk(id: bigint!): anonymous_answers

  """An array relationship"""
  anonymous_invitations(
    """distinct select on columns"""
    distinct_on: [anonymous_invitations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_invitations_order_by!]

    """filter the rows returned"""
    where: anonymous_invitations_bool_exp
  ): [anonymous_invitations!]!

  """An aggregate relationship"""
  anonymous_invitations_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_invitations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_invitations_order_by!]

    """filter the rows returned"""
    where: anonymous_invitations_bool_exp
  ): anonymous_invitations_aggregate!

  """
  fetch data from the table: "anonymous_invitations" using primary key columns
  """
  anonymous_invitations_by_pk(id: bigint!): anonymous_invitations

  """An array relationship"""
  anonymous_queries(
    """distinct select on columns"""
    distinct_on: [anonymous_queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_queries_order_by!]

    """filter the rows returned"""
    where: anonymous_queries_bool_exp
  ): [anonymous_queries!]!

  """An aggregate relationship"""
  anonymous_queries_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_queries_order_by!]

    """filter the rows returned"""
    where: anonymous_queries_bool_exp
  ): anonymous_queries_aggregate!

  """
  fetch data from the table: "anonymous_queries" using primary key columns
  """
  anonymous_queries_by_pk(id: bigint!): anonymous_queries

  """An array relationship"""
  anonymous_sms(
    """distinct select on columns"""
    distinct_on: [anonymous_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_sms_order_by!]

    """filter the rows returned"""
    where: anonymous_sms_bool_exp
  ): [anonymous_sms!]!

  """An aggregate relationship"""
  anonymous_sms_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_sms_order_by!]

    """filter the rows returned"""
    where: anonymous_sms_bool_exp
  ): anonymous_sms_aggregate!

  """fetch data from the table: "anonymous_sms" using primary key columns"""
  anonymous_sms_by_pk(id: bigint!): anonymous_sms

  """
  fetch data from the table: "anonymous_template_question"
  """
  anonymous_template_question(
    """distinct select on columns"""
    distinct_on: [anonymous_template_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_template_question_order_by!]

    """filter the rows returned"""
    where: anonymous_template_question_bool_exp
  ): [anonymous_template_question!]!

  """
  fetch aggregated fields from the table: "anonymous_template_question"
  """
  anonymous_template_question_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_template_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_template_question_order_by!]

    """filter the rows returned"""
    where: anonymous_template_question_bool_exp
  ): anonymous_template_question_aggregate!

  """
  fetch data from the table: "anonymous_templates"
  """
  anonymous_templates(
    """distinct select on columns"""
    distinct_on: [anonymous_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_templates_order_by!]

    """filter the rows returned"""
    where: anonymous_templates_bool_exp
  ): [anonymous_templates!]!

  """
  fetch aggregated fields from the table: "anonymous_templates"
  """
  anonymous_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_templates_order_by!]

    """filter the rows returned"""
    where: anonymous_templates_bool_exp
  ): anonymous_templates_aggregate!

  """
  fetch data from the table: "anonymous_templates" using primary key columns
  """
  anonymous_templates_by_pk(id: bigint!): anonymous_templates

  """
  fetch data from the table: "categories"
  """
  categories(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): [categories!]!

  """
  fetch aggregated fields from the table: "categories"
  """
  categories_aggregate(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): categories_aggregate!

  """fetch data from the table: "categories" using primary key columns"""
  categories_by_pk(name: String!): categories

  """
  fetch data from the table: "consent_patient"
  """
  consent_patient(
    """distinct select on columns"""
    distinct_on: [consent_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_patient_order_by!]

    """filter the rows returned"""
    where: consent_patient_bool_exp
  ): [consent_patient!]!

  """
  fetch aggregated fields from the table: "consent_patient"
  """
  consent_patient_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_patient_order_by!]

    """filter the rows returned"""
    where: consent_patient_bool_exp
  ): consent_patient_aggregate!

  """
  fetch data from the table: "consent_template_to_template"
  """
  consent_template_to_template(
    """distinct select on columns"""
    distinct_on: [consent_template_to_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_template_to_template_order_by!]

    """filter the rows returned"""
    where: consent_template_to_template_bool_exp
  ): [consent_template_to_template!]!

  """
  fetch aggregated fields from the table: "consent_template_to_template"
  """
  consent_template_to_template_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_template_to_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_template_to_template_order_by!]

    """filter the rows returned"""
    where: consent_template_to_template_bool_exp
  ): consent_template_to_template_aggregate!

  """An array relationship"""
  consent_templates(
    """distinct select on columns"""
    distinct_on: [consent_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_templates_order_by!]

    """filter the rows returned"""
    where: consent_templates_bool_exp
  ): [consent_templates!]!

  """An aggregate relationship"""
  consent_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_templates_order_by!]

    """filter the rows returned"""
    where: consent_templates_bool_exp
  ): consent_templates_aggregate!

  """
  fetch data from the table: "consent_templates" using primary key columns
  """
  consent_templates_by_pk(id: bigint!): consent_templates

  """An array relationship"""
  consents(
    """distinct select on columns"""
    distinct_on: [consents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consents_order_by!]

    """filter the rows returned"""
    where: consents_bool_exp
  ): [consents!]!

  """An aggregate relationship"""
  consents_aggregate(
    """distinct select on columns"""
    distinct_on: [consents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consents_order_by!]

    """filter the rows returned"""
    where: consents_bool_exp
  ): consents_aggregate!

  """fetch data from the table: "consents" using primary key columns"""
  consents_by_pk(id: bigint!): consents

  """
  fetch data from the table: "contexts"
  """
  contexts(
    """distinct select on columns"""
    distinct_on: [contexts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contexts_order_by!]

    """filter the rows returned"""
    where: contexts_bool_exp
  ): [contexts!]!

  """
  fetch aggregated fields from the table: "contexts"
  """
  contexts_aggregate(
    """distinct select on columns"""
    distinct_on: [contexts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contexts_order_by!]

    """filter the rows returned"""
    where: contexts_bool_exp
  ): contexts_aggregate!

  """fetch data from the table: "contexts" using primary key columns"""
  contexts_by_pk(name: String!): contexts

  """
  fetch data from the table: "custom_db_nodes"
  """
  custom_db_nodes(
    """distinct select on columns"""
    distinct_on: [custom_db_nodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [custom_db_nodes_order_by!]

    """filter the rows returned"""
    where: custom_db_nodes_bool_exp
  ): [custom_db_nodes!]!

  """
  fetch aggregated fields from the table: "custom_db_nodes"
  """
  custom_db_nodes_aggregate(
    """distinct select on columns"""
    distinct_on: [custom_db_nodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [custom_db_nodes_order_by!]

    """filter the rows returned"""
    where: custom_db_nodes_bool_exp
  ): custom_db_nodes_aggregate!

  """fetch data from the table: "custom_db_nodes" using primary key columns"""
  custom_db_nodes_by_pk(id: bigint!): custom_db_nodes

  """
  fetch data from the table: "document_patient"
  """
  document_patient(
    """distinct select on columns"""
    distinct_on: [document_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_patient_order_by!]

    """filter the rows returned"""
    where: document_patient_bool_exp
  ): [document_patient!]!

  """
  fetch aggregated fields from the table: "document_patient"
  """
  document_patient_aggregate(
    """distinct select on columns"""
    distinct_on: [document_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_patient_order_by!]

    """filter the rows returned"""
    where: document_patient_bool_exp
  ): document_patient_aggregate!

  """
  fetch data from the table: "document_patient" using primary key columns
  """
  document_patient_by_pk(
    document_id: bigint!

    """(DC2Type:guid)"""
    patient_id: String!
  ): document_patient

  """An array relationship"""
  document_sms(
    """distinct select on columns"""
    distinct_on: [document_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sms_order_by!]

    """filter the rows returned"""
    where: document_sms_bool_exp
  ): [document_sms!]!

  """An aggregate relationship"""
  document_sms_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sms_order_by!]

    """filter the rows returned"""
    where: document_sms_bool_exp
  ): document_sms_aggregate!

  """
  fetch data from the table: "documents"
  """
  documents(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): [documents!]!

  """
  fetch aggregated fields from the table: "documents"
  """
  documents_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): documents_aggregate!

  """fetch data from the table: "documents" using primary key columns"""
  documents_by_pk(id: bigint!): documents

  """
  fetch data from the table: "groups"
  """
  groups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  fetch aggregated fields from the table: "groups"
  """
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """fetch data from the table: "groups" using primary key columns"""
  groups_by_pk(name: String!): groups

  """
  fetch data from the table: "initiators"
  """
  initiators(
    """distinct select on columns"""
    distinct_on: [initiators_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [initiators_order_by!]

    """filter the rows returned"""
    where: initiators_bool_exp
  ): [initiators!]!

  """
  fetch aggregated fields from the table: "initiators"
  """
  initiators_aggregate(
    """distinct select on columns"""
    distinct_on: [initiators_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [initiators_order_by!]

    """filter the rows returned"""
    where: initiators_bool_exp
  ): initiators_aggregate!

  """fetch data from the table: "initiators" using primary key columns"""
  initiators_by_pk(name: String!): initiators

  """
  fetch data from the table: "migrations"
  """
  migrations(
    """distinct select on columns"""
    distinct_on: [migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migrations_order_by!]

    """filter the rows returned"""
    where: migrations_bool_exp
  ): [migrations!]!

  """
  fetch aggregated fields from the table: "migrations"
  """
  migrations_aggregate(
    """distinct select on columns"""
    distinct_on: [migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migrations_order_by!]

    """filter the rows returned"""
    where: migrations_bool_exp
  ): migrations_aggregate!

  """fetch data from the table: "migrations" using primary key columns"""
  migrations_by_pk(id: bigint!): migrations

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(
    """(DC2Type:guid)"""
    customer_id: String!
    journal_project_id: String!
    shortcut_id: String!
  ): projects

  """An array relationship"""
  queries(
    """distinct select on columns"""
    distinct_on: [queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [queries_order_by!]

    """filter the rows returned"""
    where: queries_bool_exp
  ): [queries!]!

  """An aggregate relationship"""
  queries_aggregate(
    """distinct select on columns"""
    distinct_on: [queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [queries_order_by!]

    """filter the rows returned"""
    where: queries_bool_exp
  ): queries_aggregate!

  """fetch data from the table: "queries" using primary key columns"""
  queries_by_pk(id: bigint!): queries

  """
  fetch data from the table: "question_composite_question"
  """
  question_composite_question(
    """distinct select on columns"""
    distinct_on: [question_composite_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_composite_question_order_by!]

    """filter the rows returned"""
    where: question_composite_question_bool_exp
  ): [question_composite_question!]!

  """
  fetch aggregated fields from the table: "question_composite_question"
  """
  question_composite_question_aggregate(
    """distinct select on columns"""
    distinct_on: [question_composite_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_composite_question_order_by!]

    """filter the rows returned"""
    where: question_composite_question_bool_exp
  ): question_composite_question_aggregate!

  """
  fetch data from the table: "question_template"
  """
  question_template(
    """distinct select on columns"""
    distinct_on: [question_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_template_order_by!]

    """filter the rows returned"""
    where: question_template_bool_exp
  ): [question_template!]!

  """
  fetch aggregated fields from the table: "question_template"
  """
  question_template_aggregate(
    """distinct select on columns"""
    distinct_on: [question_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_template_order_by!]

    """filter the rows returned"""
    where: question_template_bool_exp
  ): question_template_aggregate!

  """
  fetch data from the table: "questions"
  """
  questions(
    """distinct select on columns"""
    distinct_on: [questions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [questions_order_by!]

    """filter the rows returned"""
    where: questions_bool_exp
  ): [questions!]!

  """
  fetch aggregated fields from the table: "questions"
  """
  questions_aggregate(
    """distinct select on columns"""
    distinct_on: [questions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [questions_order_by!]

    """filter the rows returned"""
    where: questions_bool_exp
  ): questions_aggregate!

  """fetch data from the table: "questions" using primary key columns"""
  questions_by_pk(id: bigint!): questions

  """
  fetch data from the table: "security_levels"
  """
  security_levels(
    """distinct select on columns"""
    distinct_on: [security_levels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [security_levels_order_by!]

    """filter the rows returned"""
    where: security_levels_bool_exp
  ): [security_levels!]!

  """
  fetch aggregated fields from the table: "security_levels"
  """
  security_levels_aggregate(
    """distinct select on columns"""
    distinct_on: [security_levels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [security_levels_order_by!]

    """filter the rows returned"""
    where: security_levels_bool_exp
  ): security_levels_aggregate!

  """fetch data from the table: "security_levels" using primary key columns"""
  security_levels_by_pk(name: String!): security_levels

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch aggregated fields from the table: "settings"
  """
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(id: bigint!): settings

  """
  fetch data from the table: "shortcuts"
  """
  shortcuts(
    """distinct select on columns"""
    distinct_on: [shortcuts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shortcuts_order_by!]

    """filter the rows returned"""
    where: shortcuts_bool_exp
  ): [shortcuts!]!

  """
  fetch aggregated fields from the table: "shortcuts"
  """
  shortcuts_aggregate(
    """distinct select on columns"""
    distinct_on: [shortcuts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shortcuts_order_by!]

    """filter the rows returned"""
    where: shortcuts_bool_exp
  ): shortcuts_aggregate!

  """fetch data from the table: "shortcuts" using primary key columns"""
  shortcuts_by_pk(id: String!): shortcuts

  """An array relationship"""
  sms(
    """distinct select on columns"""
    distinct_on: [sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_order_by!]

    """filter the rows returned"""
    where: sms_bool_exp
  ): [sms!]!

  """An aggregate relationship"""
  sms_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_order_by!]

    """filter the rows returned"""
    where: sms_bool_exp
  ): sms_aggregate!

  """fetch data from the table: "sms" using primary key columns"""
  sms_by_pk(id: bigint!): sms

  """
  fetch data from the table: "sms_template_template"
  """
  sms_template_template(
    """distinct select on columns"""
    distinct_on: [sms_template_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_template_template_order_by!]

    """filter the rows returned"""
    where: sms_template_template_bool_exp
  ): [sms_template_template!]!

  """
  fetch aggregated fields from the table: "sms_template_template"
  """
  sms_template_template_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_template_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_template_template_order_by!]

    """filter the rows returned"""
    where: sms_template_template_bool_exp
  ): sms_template_template_aggregate!

  """
  fetch data from the table: "sms_template_template" using primary key columns
  """
  sms_template_template_by_pk(sms_template_id: bigint!, template_id: bigint!): sms_template_template

  """An array relationship"""
  sms_templates(
    """distinct select on columns"""
    distinct_on: [sms_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_templates_order_by!]

    """filter the rows returned"""
    where: sms_templates_bool_exp
  ): [sms_templates!]!

  """An aggregate relationship"""
  sms_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_templates_order_by!]

    """filter the rows returned"""
    where: sms_templates_bool_exp
  ): sms_templates_aggregate!

  """fetch data from the table: "sms_templates" using primary key columns"""
  sms_templates_by_pk(id: bigint!): sms_templates

  """
  fetch data from the table: "status"
  """
  status(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): [status!]!

  """
  fetch aggregated fields from the table: "status"
  """
  status_aggregate(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): status_aggregate!

  """fetch data from the table: "status" using primary key columns"""
  status_by_pk(name: String!): status

  """An array relationship"""
  templates(
    """distinct select on columns"""
    distinct_on: [templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [templates_order_by!]

    """filter the rows returned"""
    where: templates_bool_exp
  ): [templates!]!

  """An aggregate relationship"""
  templates_aggregate(
    """distinct select on columns"""
    distinct_on: [templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [templates_order_by!]

    """filter the rows returned"""
    where: templates_bool_exp
  ): templates_aggregate!

  """fetch data from the table: "templates" using primary key columns"""
  templates_by_pk(id: bigint!): templates

  """
  fetch data from the table: "types"
  """
  types(
    """distinct select on columns"""
    distinct_on: [types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [types_order_by!]

    """filter the rows returned"""
    where: types_bool_exp
  ): [types!]!

  """
  fetch aggregated fields from the table: "types"
  """
  types_aggregate(
    """distinct select on columns"""
    distinct_on: [types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [types_order_by!]

    """filter the rows returned"""
    where: types_bool_exp
  ): types_aggregate!

  """fetch data from the table: "types" using primary key columns"""
  types_by_pk(name: String!): types

  """
  fetch data from the table: "unseen_documents"
  """
  unseen_documents(
    """distinct select on columns"""
    distinct_on: [unseen_documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unseen_documents_order_by!]

    """filter the rows returned"""
    where: unseen_documents_bool_exp
  ): [unseen_documents!]!

  """
  fetch aggregated fields from the table: "unseen_documents"
  """
  unseen_documents_aggregate(
    """distinct select on columns"""
    distinct_on: [unseen_documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unseen_documents_order_by!]

    """filter the rows returned"""
    where: unseen_documents_bool_exp
  ): unseen_documents_aggregate!

  """
  fetch data from the table: "unseen_queries"
  """
  unseen_queries(
    """distinct select on columns"""
    distinct_on: [unseen_queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unseen_queries_order_by!]

    """filter the rows returned"""
    where: unseen_queries_bool_exp
  ): [unseen_queries!]!

  """
  fetch aggregated fields from the table: "unseen_queries"
  """
  unseen_queries_aggregate(
    """distinct select on columns"""
    distinct_on: [unseen_queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unseen_queries_order_by!]

    """filter the rows returned"""
    where: unseen_queries_bool_exp
  ): unseen_queries_aggregate!
}

"""
columns and relationships of "question_composite_question"
"""
type question_composite_question {
  description: String!
  narrative: String!
  position: bigint!
  properties: String

  """An object relationship"""
  question: questions!

  """An object relationship"""
  questionByQuestionParentId: questions!
  question_child_id: bigint!
  question_parent_id: bigint!
  row: bigint!
  title: String!
}

"""
aggregated selection of "question_composite_question"
"""
type question_composite_question_aggregate {
  aggregate: question_composite_question_aggregate_fields
  nodes: [question_composite_question!]!
}

"""
aggregate fields of "question_composite_question"
"""
type question_composite_question_aggregate_fields {
  avg: question_composite_question_avg_fields
  count(columns: [question_composite_question_select_column!], distinct: Boolean): Int!
  max: question_composite_question_max_fields
  min: question_composite_question_min_fields
  stddev: question_composite_question_stddev_fields
  stddev_pop: question_composite_question_stddev_pop_fields
  stddev_samp: question_composite_question_stddev_samp_fields
  sum: question_composite_question_sum_fields
  var_pop: question_composite_question_var_pop_fields
  var_samp: question_composite_question_var_samp_fields
  variance: question_composite_question_variance_fields
}

"""
order by aggregate values of table "question_composite_question"
"""
input question_composite_question_aggregate_order_by {
  avg: question_composite_question_avg_order_by
  count: order_by
  max: question_composite_question_max_order_by
  min: question_composite_question_min_order_by
  stddev: question_composite_question_stddev_order_by
  stddev_pop: question_composite_question_stddev_pop_order_by
  stddev_samp: question_composite_question_stddev_samp_order_by
  sum: question_composite_question_sum_order_by
  var_pop: question_composite_question_var_pop_order_by
  var_samp: question_composite_question_var_samp_order_by
  variance: question_composite_question_variance_order_by
}

"""
input type for inserting array relation for remote table "question_composite_question"
"""
input question_composite_question_arr_rel_insert_input {
  data: [question_composite_question_insert_input!]!

  """on conflict condition"""
  on_conflict: question_composite_question_on_conflict
}

"""aggregate avg on columns"""
type question_composite_question_avg_fields {
  position: Float
  question_child_id: Float
  question_parent_id: Float
  row: Float
}

"""
order by avg() on columns of table "question_composite_question"
"""
input question_composite_question_avg_order_by {
  position: order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
}

"""
Boolean expression to filter rows from the table "question_composite_question". All fields are combined with a logical 'AND'.
"""
input question_composite_question_bool_exp {
  _and: [question_composite_question_bool_exp!]
  _not: question_composite_question_bool_exp
  _or: [question_composite_question_bool_exp!]
  description: String_comparison_exp
  narrative: String_comparison_exp
  position: bigint_comparison_exp
  properties: String_comparison_exp
  question: questions_bool_exp
  questionByQuestionParentId: questions_bool_exp
  question_child_id: bigint_comparison_exp
  question_parent_id: bigint_comparison_exp
  row: bigint_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "question_composite_question"
"""
enum question_composite_question_constraint {
  """unique or primary key constraint"""
  idx_51537_quest_comp_quest_parent_child
}

"""
input type for incrementing numeric columns in table "question_composite_question"
"""
input question_composite_question_inc_input {
  position: bigint
  question_child_id: bigint
  question_parent_id: bigint
  row: bigint
}

"""
input type for inserting data into table "question_composite_question"
"""
input question_composite_question_insert_input {
  description: String
  narrative: String
  position: bigint
  properties: String
  question: questions_obj_rel_insert_input
  questionByQuestionParentId: questions_obj_rel_insert_input
  question_child_id: bigint
  question_parent_id: bigint
  row: bigint
  title: String
}

"""aggregate max on columns"""
type question_composite_question_max_fields {
  description: String
  narrative: String
  position: bigint
  properties: String
  question_child_id: bigint
  question_parent_id: bigint
  row: bigint
  title: String
}

"""
order by max() on columns of table "question_composite_question"
"""
input question_composite_question_max_order_by {
  description: order_by
  narrative: order_by
  position: order_by
  properties: order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
  title: order_by
}

"""aggregate min on columns"""
type question_composite_question_min_fields {
  description: String
  narrative: String
  position: bigint
  properties: String
  question_child_id: bigint
  question_parent_id: bigint
  row: bigint
  title: String
}

"""
order by min() on columns of table "question_composite_question"
"""
input question_composite_question_min_order_by {
  description: order_by
  narrative: order_by
  position: order_by
  properties: order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
  title: order_by
}

"""
response of any mutation on the table "question_composite_question"
"""
type question_composite_question_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [question_composite_question!]!
}

"""
on conflict condition type for table "question_composite_question"
"""
input question_composite_question_on_conflict {
  constraint: question_composite_question_constraint!
  update_columns: [question_composite_question_update_column!]! = []
  where: question_composite_question_bool_exp
}

"""
Ordering options when selecting data from "question_composite_question".
"""
input question_composite_question_order_by {
  description: order_by
  narrative: order_by
  position: order_by
  properties: order_by
  question: questions_order_by
  questionByQuestionParentId: questions_order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
  title: order_by
}

"""
select columns of table "question_composite_question"
"""
enum question_composite_question_select_column {
  """column name"""
  description

  """column name"""
  narrative

  """column name"""
  position

  """column name"""
  properties

  """column name"""
  question_child_id

  """column name"""
  question_parent_id

  """column name"""
  row

  """column name"""
  title
}

"""
input type for updating data in table "question_composite_question"
"""
input question_composite_question_set_input {
  description: String
  narrative: String
  position: bigint
  properties: String
  question_child_id: bigint
  question_parent_id: bigint
  row: bigint
  title: String
}

"""aggregate stddev on columns"""
type question_composite_question_stddev_fields {
  position: Float
  question_child_id: Float
  question_parent_id: Float
  row: Float
}

"""
order by stddev() on columns of table "question_composite_question"
"""
input question_composite_question_stddev_order_by {
  position: order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
}

"""aggregate stddev_pop on columns"""
type question_composite_question_stddev_pop_fields {
  position: Float
  question_child_id: Float
  question_parent_id: Float
  row: Float
}

"""
order by stddev_pop() on columns of table "question_composite_question"
"""
input question_composite_question_stddev_pop_order_by {
  position: order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
}

"""aggregate stddev_samp on columns"""
type question_composite_question_stddev_samp_fields {
  position: Float
  question_child_id: Float
  question_parent_id: Float
  row: Float
}

"""
order by stddev_samp() on columns of table "question_composite_question"
"""
input question_composite_question_stddev_samp_order_by {
  position: order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
}

"""aggregate sum on columns"""
type question_composite_question_sum_fields {
  position: bigint
  question_child_id: bigint
  question_parent_id: bigint
  row: bigint
}

"""
order by sum() on columns of table "question_composite_question"
"""
input question_composite_question_sum_order_by {
  position: order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
}

"""
update columns of table "question_composite_question"
"""
enum question_composite_question_update_column {
  """column name"""
  description

  """column name"""
  narrative

  """column name"""
  position

  """column name"""
  properties

  """column name"""
  question_child_id

  """column name"""
  question_parent_id

  """column name"""
  row

  """column name"""
  title
}

"""aggregate var_pop on columns"""
type question_composite_question_var_pop_fields {
  position: Float
  question_child_id: Float
  question_parent_id: Float
  row: Float
}

"""
order by var_pop() on columns of table "question_composite_question"
"""
input question_composite_question_var_pop_order_by {
  position: order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
}

"""aggregate var_samp on columns"""
type question_composite_question_var_samp_fields {
  position: Float
  question_child_id: Float
  question_parent_id: Float
  row: Float
}

"""
order by var_samp() on columns of table "question_composite_question"
"""
input question_composite_question_var_samp_order_by {
  position: order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
}

"""aggregate variance on columns"""
type question_composite_question_variance_fields {
  position: Float
  question_child_id: Float
  question_parent_id: Float
  row: Float
}

"""
order by variance() on columns of table "question_composite_question"
"""
input question_composite_question_variance_order_by {
  position: order_by
  question_child_id: order_by
  question_parent_id: order_by
  row: order_by
}

"""
columns and relationships of "question_template"
"""
type question_template {
  description: String!
  narrative: String!
  position: bigint!
  properties: String

  """An object relationship"""
  question: questions!
  question_id: bigint!

  """An object relationship"""
  template: templates!
  template_id: bigint!
  title: String!
}

"""
aggregated selection of "question_template"
"""
type question_template_aggregate {
  aggregate: question_template_aggregate_fields
  nodes: [question_template!]!
}

"""
aggregate fields of "question_template"
"""
type question_template_aggregate_fields {
  avg: question_template_avg_fields
  count(columns: [question_template_select_column!], distinct: Boolean): Int!
  max: question_template_max_fields
  min: question_template_min_fields
  stddev: question_template_stddev_fields
  stddev_pop: question_template_stddev_pop_fields
  stddev_samp: question_template_stddev_samp_fields
  sum: question_template_sum_fields
  var_pop: question_template_var_pop_fields
  var_samp: question_template_var_samp_fields
  variance: question_template_variance_fields
}

"""
order by aggregate values of table "question_template"
"""
input question_template_aggregate_order_by {
  avg: question_template_avg_order_by
  count: order_by
  max: question_template_max_order_by
  min: question_template_min_order_by
  stddev: question_template_stddev_order_by
  stddev_pop: question_template_stddev_pop_order_by
  stddev_samp: question_template_stddev_samp_order_by
  sum: question_template_sum_order_by
  var_pop: question_template_var_pop_order_by
  var_samp: question_template_var_samp_order_by
  variance: question_template_variance_order_by
}

"""
input type for inserting array relation for remote table "question_template"
"""
input question_template_arr_rel_insert_input {
  data: [question_template_insert_input!]!

  """on conflict condition"""
  on_conflict: question_template_on_conflict
}

"""aggregate avg on columns"""
type question_template_avg_fields {
  position: Float
  question_id: Float
  template_id: Float
}

"""
order by avg() on columns of table "question_template"
"""
input question_template_avg_order_by {
  position: order_by
  question_id: order_by
  template_id: order_by
}

"""
Boolean expression to filter rows from the table "question_template". All fields are combined with a logical 'AND'.
"""
input question_template_bool_exp {
  _and: [question_template_bool_exp!]
  _not: question_template_bool_exp
  _or: [question_template_bool_exp!]
  description: String_comparison_exp
  narrative: String_comparison_exp
  position: bigint_comparison_exp
  properties: String_comparison_exp
  question: questions_bool_exp
  question_id: bigint_comparison_exp
  template: templates_bool_exp
  template_id: bigint_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "question_template"
"""
enum question_template_constraint {
  """unique or primary key constraint"""
  idx_51543_question_template_template_id_question_id_unique
}

"""
input type for incrementing numeric columns in table "question_template"
"""
input question_template_inc_input {
  position: bigint
  question_id: bigint
  template_id: bigint
}

"""
input type for inserting data into table "question_template"
"""
input question_template_insert_input {
  description: String
  narrative: String
  position: bigint
  properties: String
  question: questions_obj_rel_insert_input
  question_id: bigint
  template: templates_obj_rel_insert_input
  template_id: bigint
  title: String
}

"""aggregate max on columns"""
type question_template_max_fields {
  description: String
  narrative: String
  position: bigint
  properties: String
  question_id: bigint
  template_id: bigint
  title: String
}

"""
order by max() on columns of table "question_template"
"""
input question_template_max_order_by {
  description: order_by
  narrative: order_by
  position: order_by
  properties: order_by
  question_id: order_by
  template_id: order_by
  title: order_by
}

"""aggregate min on columns"""
type question_template_min_fields {
  description: String
  narrative: String
  position: bigint
  properties: String
  question_id: bigint
  template_id: bigint
  title: String
}

"""
order by min() on columns of table "question_template"
"""
input question_template_min_order_by {
  description: order_by
  narrative: order_by
  position: order_by
  properties: order_by
  question_id: order_by
  template_id: order_by
  title: order_by
}

"""
response of any mutation on the table "question_template"
"""
type question_template_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [question_template!]!
}

"""
on conflict condition type for table "question_template"
"""
input question_template_on_conflict {
  constraint: question_template_constraint!
  update_columns: [question_template_update_column!]! = []
  where: question_template_bool_exp
}

"""Ordering options when selecting data from "question_template"."""
input question_template_order_by {
  description: order_by
  narrative: order_by
  position: order_by
  properties: order_by
  question: questions_order_by
  question_id: order_by
  template: templates_order_by
  template_id: order_by
  title: order_by
}

"""
select columns of table "question_template"
"""
enum question_template_select_column {
  """column name"""
  description

  """column name"""
  narrative

  """column name"""
  position

  """column name"""
  properties

  """column name"""
  question_id

  """column name"""
  template_id

  """column name"""
  title
}

"""
input type for updating data in table "question_template"
"""
input question_template_set_input {
  description: String
  narrative: String
  position: bigint
  properties: String
  question_id: bigint
  template_id: bigint
  title: String
}

"""aggregate stddev on columns"""
type question_template_stddev_fields {
  position: Float
  question_id: Float
  template_id: Float
}

"""
order by stddev() on columns of table "question_template"
"""
input question_template_stddev_order_by {
  position: order_by
  question_id: order_by
  template_id: order_by
}

"""aggregate stddev_pop on columns"""
type question_template_stddev_pop_fields {
  position: Float
  question_id: Float
  template_id: Float
}

"""
order by stddev_pop() on columns of table "question_template"
"""
input question_template_stddev_pop_order_by {
  position: order_by
  question_id: order_by
  template_id: order_by
}

"""aggregate stddev_samp on columns"""
type question_template_stddev_samp_fields {
  position: Float
  question_id: Float
  template_id: Float
}

"""
order by stddev_samp() on columns of table "question_template"
"""
input question_template_stddev_samp_order_by {
  position: order_by
  question_id: order_by
  template_id: order_by
}

"""aggregate sum on columns"""
type question_template_sum_fields {
  position: bigint
  question_id: bigint
  template_id: bigint
}

"""
order by sum() on columns of table "question_template"
"""
input question_template_sum_order_by {
  position: order_by
  question_id: order_by
  template_id: order_by
}

"""
update columns of table "question_template"
"""
enum question_template_update_column {
  """column name"""
  description

  """column name"""
  narrative

  """column name"""
  position

  """column name"""
  properties

  """column name"""
  question_id

  """column name"""
  template_id

  """column name"""
  title
}

"""aggregate var_pop on columns"""
type question_template_var_pop_fields {
  position: Float
  question_id: Float
  template_id: Float
}

"""
order by var_pop() on columns of table "question_template"
"""
input question_template_var_pop_order_by {
  position: order_by
  question_id: order_by
  template_id: order_by
}

"""aggregate var_samp on columns"""
type question_template_var_samp_fields {
  position: Float
  question_id: Float
  template_id: Float
}

"""
order by var_samp() on columns of table "question_template"
"""
input question_template_var_samp_order_by {
  position: order_by
  question_id: order_by
  template_id: order_by
}

"""aggregate variance on columns"""
type question_template_variance_fields {
  position: Float
  question_id: Float
  template_id: Float
}

"""
order by variance() on columns of table "question_template"
"""
input question_template_variance_order_by {
  position: order_by
  question_id: order_by
  template_id: order_by
}

"""
columns and relationships of "questions"
"""
type questions {
  """An array relationship"""
  anonymous_template_questions(
    """distinct select on columns"""
    distinct_on: [anonymous_template_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_template_question_order_by!]

    """filter the rows returned"""
    where: anonymous_template_question_bool_exp
  ): [anonymous_template_question!]!

  """An aggregate relationship"""
  anonymous_template_questions_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_template_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_template_question_order_by!]

    """filter the rows returned"""
    where: anonymous_template_question_bool_exp
  ): anonymous_template_question_aggregate!
  created_at: timestamptz
  description: String!
  external_key_id: String!
  id: bigint!
  properties: String!

  """An array relationship"""
  questionCompositeQuestionsByQuestionParentId(
    """distinct select on columns"""
    distinct_on: [question_composite_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_composite_question_order_by!]

    """filter the rows returned"""
    where: question_composite_question_bool_exp
  ): [question_composite_question!]!

  """An aggregate relationship"""
  questionCompositeQuestionsByQuestionParentId_aggregate(
    """distinct select on columns"""
    distinct_on: [question_composite_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_composite_question_order_by!]

    """filter the rows returned"""
    where: question_composite_question_bool_exp
  ): question_composite_question_aggregate!

  """An array relationship"""
  question_composite_questions(
    """distinct select on columns"""
    distinct_on: [question_composite_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_composite_question_order_by!]

    """filter the rows returned"""
    where: question_composite_question_bool_exp
  ): [question_composite_question!]!

  """An aggregate relationship"""
  question_composite_questions_aggregate(
    """distinct select on columns"""
    distinct_on: [question_composite_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_composite_question_order_by!]

    """filter the rows returned"""
    where: question_composite_question_bool_exp
  ): question_composite_question_aggregate!

  """An array relationship"""
  question_templates(
    """distinct select on columns"""
    distinct_on: [question_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_template_order_by!]

    """filter the rows returned"""
    where: question_template_bool_exp
  ): [question_template!]!

  """An aggregate relationship"""
  question_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [question_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_template_order_by!]

    """filter the rows returned"""
    where: question_template_bool_exp
  ): question_template_aggregate!
  question_uuid: String!
  region: String!
  title: String!
  updated_at: timestamptz
}

"""
aggregated selection of "questions"
"""
type questions_aggregate {
  aggregate: questions_aggregate_fields
  nodes: [questions!]!
}

"""
aggregate fields of "questions"
"""
type questions_aggregate_fields {
  avg: questions_avg_fields
  count(columns: [questions_select_column!], distinct: Boolean): Int!
  max: questions_max_fields
  min: questions_min_fields
  stddev: questions_stddev_fields
  stddev_pop: questions_stddev_pop_fields
  stddev_samp: questions_stddev_samp_fields
  sum: questions_sum_fields
  var_pop: questions_var_pop_fields
  var_samp: questions_var_samp_fields
  variance: questions_variance_fields
}

"""aggregate avg on columns"""
type questions_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "questions". All fields are combined with a logical 'AND'.
"""
input questions_bool_exp {
  _and: [questions_bool_exp!]
  _not: questions_bool_exp
  _or: [questions_bool_exp!]
  anonymous_template_questions: anonymous_template_question_bool_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  external_key_id: String_comparison_exp
  id: bigint_comparison_exp
  properties: String_comparison_exp
  questionCompositeQuestionsByQuestionParentId: question_composite_question_bool_exp
  question_composite_questions: question_composite_question_bool_exp
  question_templates: question_template_bool_exp
  question_uuid: String_comparison_exp
  region: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "questions"
"""
enum questions_constraint {
  """unique or primary key constraint"""
  idx_51529_primary

  """unique or primary key constraint"""
  idx_51529_questions_external_key_id_unique

  """unique or primary key constraint"""
  idx_51529_questions_question_uuid_unique
}

"""
input type for incrementing numeric columns in table "questions"
"""
input questions_inc_input {
  id: bigint
}

"""
input type for inserting data into table "questions"
"""
input questions_insert_input {
  anonymous_template_questions: anonymous_template_question_arr_rel_insert_input
  created_at: timestamptz
  description: String
  external_key_id: String
  id: bigint
  properties: String
  questionCompositeQuestionsByQuestionParentId: question_composite_question_arr_rel_insert_input
  question_composite_questions: question_composite_question_arr_rel_insert_input
  question_templates: question_template_arr_rel_insert_input
  question_uuid: String
  region: String
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type questions_max_fields {
  created_at: timestamptz
  description: String
  external_key_id: String
  id: bigint
  properties: String
  question_uuid: String
  region: String
  title: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type questions_min_fields {
  created_at: timestamptz
  description: String
  external_key_id: String
  id: bigint
  properties: String
  question_uuid: String
  region: String
  title: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "questions"
"""
type questions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [questions!]!
}

"""
input type for inserting object relation for remote table "questions"
"""
input questions_obj_rel_insert_input {
  data: questions_insert_input!

  """on conflict condition"""
  on_conflict: questions_on_conflict
}

"""
on conflict condition type for table "questions"
"""
input questions_on_conflict {
  constraint: questions_constraint!
  update_columns: [questions_update_column!]! = []
  where: questions_bool_exp
}

"""Ordering options when selecting data from "questions"."""
input questions_order_by {
  anonymous_template_questions_aggregate: anonymous_template_question_aggregate_order_by
  created_at: order_by
  description: order_by
  external_key_id: order_by
  id: order_by
  properties: order_by
  questionCompositeQuestionsByQuestionParentId_aggregate: question_composite_question_aggregate_order_by
  question_composite_questions_aggregate: question_composite_question_aggregate_order_by
  question_templates_aggregate: question_template_aggregate_order_by
  question_uuid: order_by
  region: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: questions"""
input questions_pk_columns_input {
  id: bigint!
}

"""
select columns of table "questions"
"""
enum questions_select_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  external_key_id

  """column name"""
  id

  """column name"""
  properties

  """column name"""
  question_uuid

  """column name"""
  region

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "questions"
"""
input questions_set_input {
  created_at: timestamptz
  description: String
  external_key_id: String
  id: bigint
  properties: String
  question_uuid: String
  region: String
  title: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type questions_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type questions_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type questions_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type questions_sum_fields {
  id: bigint
}

"""
update columns of table "questions"
"""
enum questions_update_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  external_key_id

  """column name"""
  id

  """column name"""
  properties

  """column name"""
  question_uuid

  """column name"""
  region

  """column name"""
  title

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type questions_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type questions_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type questions_variance_fields {
  id: Float
}

"""
columns and relationships of "security_levels"
"""
type security_levels {
  comment: String

  """An array relationship"""
  document_patients(
    """distinct select on columns"""
    distinct_on: [document_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_patient_order_by!]

    """filter the rows returned"""
    where: document_patient_bool_exp
  ): [document_patient!]!

  """An aggregate relationship"""
  document_patients_aggregate(
    """distinct select on columns"""
    distinct_on: [document_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_patient_order_by!]

    """filter the rows returned"""
    where: document_patient_bool_exp
  ): document_patient_aggregate!
  name: String!
}

"""
aggregated selection of "security_levels"
"""
type security_levels_aggregate {
  aggregate: security_levels_aggregate_fields
  nodes: [security_levels!]!
}

"""
aggregate fields of "security_levels"
"""
type security_levels_aggregate_fields {
  count(columns: [security_levels_select_column!], distinct: Boolean): Int!
  max: security_levels_max_fields
  min: security_levels_min_fields
}

"""
Boolean expression to filter rows from the table "security_levels". All fields are combined with a logical 'AND'.
"""
input security_levels_bool_exp {
  _and: [security_levels_bool_exp!]
  _not: security_levels_bool_exp
  _or: [security_levels_bool_exp!]
  comment: String_comparison_exp
  document_patients: document_patient_bool_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "security_levels"
"""
enum security_levels_constraint {
  """unique or primary key constraint"""
  security_levels_pkey
}

"""
input type for inserting data into table "security_levels"
"""
input security_levels_insert_input {
  comment: String
  document_patients: document_patient_arr_rel_insert_input
  name: String
}

"""aggregate max on columns"""
type security_levels_max_fields {
  comment: String
  name: String
}

"""aggregate min on columns"""
type security_levels_min_fields {
  comment: String
  name: String
}

"""
response of any mutation on the table "security_levels"
"""
type security_levels_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [security_levels!]!
}

"""
input type for inserting object relation for remote table "security_levels"
"""
input security_levels_obj_rel_insert_input {
  data: security_levels_insert_input!

  """on conflict condition"""
  on_conflict: security_levels_on_conflict
}

"""
on conflict condition type for table "security_levels"
"""
input security_levels_on_conflict {
  constraint: security_levels_constraint!
  update_columns: [security_levels_update_column!]! = []
  where: security_levels_bool_exp
}

"""Ordering options when selecting data from "security_levels"."""
input security_levels_order_by {
  comment: order_by
  document_patients_aggregate: document_patient_aggregate_order_by
  name: order_by
}

"""primary key columns input for table: security_levels"""
input security_levels_pk_columns_input {
  name: String!
}

"""
select columns of table "security_levels"
"""
enum security_levels_select_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
input type for updating data in table "security_levels"
"""
input security_levels_set_input {
  comment: String
  name: String
}

"""
update columns of table "security_levels"
"""
enum security_levels_update_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
columns and relationships of "settings"
"""
type settings {
  id: bigint!
  key: String!
  value: String!
}

"""
aggregated selection of "settings"
"""
type settings_aggregate {
  aggregate: settings_aggregate_fields
  nodes: [settings!]!
}

"""
aggregate fields of "settings"
"""
type settings_aggregate_fields {
  avg: settings_avg_fields
  count(columns: [settings_select_column!], distinct: Boolean): Int!
  max: settings_max_fields
  min: settings_min_fields
  stddev: settings_stddev_fields
  stddev_pop: settings_stddev_pop_fields
  stddev_samp: settings_stddev_samp_fields
  sum: settings_sum_fields
  var_pop: settings_var_pop_fields
  var_samp: settings_var_samp_fields
  variance: settings_variance_fields
}

"""aggregate avg on columns"""
type settings_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "settings". All fields are combined with a logical 'AND'.
"""
input settings_bool_exp {
  _and: [settings_bool_exp!]
  _not: settings_bool_exp
  _or: [settings_bool_exp!]
  id: bigint_comparison_exp
  key: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "settings"
"""
enum settings_constraint {
  """unique or primary key constraint"""
  idx_51551_primary

  """unique or primary key constraint"""
  idx_51551_settings_key_unique
}

"""
input type for incrementing numeric columns in table "settings"
"""
input settings_inc_input {
  id: bigint
}

"""
input type for inserting data into table "settings"
"""
input settings_insert_input {
  id: bigint
  key: String
  value: String
}

"""aggregate max on columns"""
type settings_max_fields {
  id: bigint
  key: String
  value: String
}

"""aggregate min on columns"""
type settings_min_fields {
  id: bigint
  key: String
  value: String
}

"""
response of any mutation on the table "settings"
"""
type settings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [settings!]!
}

"""
on conflict condition type for table "settings"
"""
input settings_on_conflict {
  constraint: settings_constraint!
  update_columns: [settings_update_column!]! = []
  where: settings_bool_exp
}

"""Ordering options when selecting data from "settings"."""
input settings_order_by {
  id: order_by
  key: order_by
  value: order_by
}

"""primary key columns input for table: settings"""
input settings_pk_columns_input {
  id: bigint!
}

"""
select columns of table "settings"
"""
enum settings_select_column {
  """column name"""
  id

  """column name"""
  key

  """column name"""
  value
}

"""
input type for updating data in table "settings"
"""
input settings_set_input {
  id: bigint
  key: String
  value: String
}

"""aggregate stddev on columns"""
type settings_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type settings_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type settings_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type settings_sum_fields {
  id: bigint
}

"""
update columns of table "settings"
"""
enum settings_update_column {
  """column name"""
  id

  """column name"""
  key

  """column name"""
  value
}

"""aggregate var_pop on columns"""
type settings_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type settings_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type settings_variance_fields {
  id: Float
}

"""
columns and relationships of "shortcuts"
"""
type shortcuts {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  description: String!
  id: String!
  link: String!

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!
  title: String!
  updated_at: timestamptz
}

"""
aggregated selection of "shortcuts"
"""
type shortcuts_aggregate {
  aggregate: shortcuts_aggregate_fields
  nodes: [shortcuts!]!
}

"""
aggregate fields of "shortcuts"
"""
type shortcuts_aggregate_fields {
  count(columns: [shortcuts_select_column!], distinct: Boolean): Int!
  max: shortcuts_max_fields
  min: shortcuts_min_fields
}

"""
Boolean expression to filter rows from the table "shortcuts". All fields are combined with a logical 'AND'.
"""
input shortcuts_bool_exp {
  _and: [shortcuts_bool_exp!]
  _not: shortcuts_bool_exp
  _or: [shortcuts_bool_exp!]
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  description: String_comparison_exp
  id: String_comparison_exp
  link: String_comparison_exp
  projects: projects_bool_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "shortcuts"
"""
enum shortcuts_constraint {
  """unique or primary key constraint"""
  idx_51558_primary
}

"""
input type for inserting data into table "shortcuts"
"""
input shortcuts_insert_input {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  id: String
  link: String
  projects: projects_arr_rel_insert_input
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type shortcuts_max_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  id: String
  link: String
  title: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type shortcuts_min_fields {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  id: String
  link: String
  title: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "shortcuts"
"""
type shortcuts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [shortcuts!]!
}

"""
input type for inserting object relation for remote table "shortcuts"
"""
input shortcuts_obj_rel_insert_input {
  data: shortcuts_insert_input!

  """on conflict condition"""
  on_conflict: shortcuts_on_conflict
}

"""
on conflict condition type for table "shortcuts"
"""
input shortcuts_on_conflict {
  constraint: shortcuts_constraint!
  update_columns: [shortcuts_update_column!]! = []
  where: shortcuts_bool_exp
}

"""Ordering options when selecting data from "shortcuts"."""
input shortcuts_order_by {
  created_at: order_by
  customer_id: order_by
  description: order_by
  id: order_by
  link: order_by
  projects_aggregate: projects_aggregate_order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: shortcuts"""
input shortcuts_pk_columns_input {
  id: String!
}

"""
select columns of table "shortcuts"
"""
enum shortcuts_select_column {
  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  description

  """column name"""
  id

  """column name"""
  link

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "shortcuts"
"""
input shortcuts_set_input {
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  description: String
  id: String
  link: String
  title: String
  updated_at: timestamptz
}

"""
update columns of table "shortcuts"
"""
enum shortcuts_update_column {
  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  description

  """column name"""
  id

  """column name"""
  link

  """column name"""
  title

  """column name"""
  updated_at
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

"""
columns and relationships of "sms"
"""
type sms {
  content: String!
  create_user: String!
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  deleted_at: timestamptz

  """An array relationship"""
  document_sms(
    """distinct select on columns"""
    distinct_on: [document_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sms_order_by!]

    """filter the rows returned"""
    where: document_sms_bool_exp
  ): [document_sms!]!

  """An aggregate relationship"""
  document_sms_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sms_order_by!]

    """filter the rows returned"""
    where: document_sms_bool_exp
  ): document_sms_aggregate!
  id: bigint!
  message_id: String!

  """An object relationship"""
  query: queries
  query_id: bigint
  region: String!

  """An object relationship"""
  sms_template: sms_templates
  sms_template_id: bigint
  soknad_id: String
  tlfmobil: String!
  uid: String!
  updated_at: timestamptz
}

"""
aggregated selection of "sms"
"""
type sms_aggregate {
  aggregate: sms_aggregate_fields
  nodes: [sms!]!
}

"""
aggregate fields of "sms"
"""
type sms_aggregate_fields {
  avg: sms_avg_fields
  count(columns: [sms_select_column!], distinct: Boolean): Int!
  max: sms_max_fields
  min: sms_min_fields
  stddev: sms_stddev_fields
  stddev_pop: sms_stddev_pop_fields
  stddev_samp: sms_stddev_samp_fields
  sum: sms_sum_fields
  var_pop: sms_var_pop_fields
  var_samp: sms_var_samp_fields
  variance: sms_variance_fields
}

"""
order by aggregate values of table "sms"
"""
input sms_aggregate_order_by {
  avg: sms_avg_order_by
  count: order_by
  max: sms_max_order_by
  min: sms_min_order_by
  stddev: sms_stddev_order_by
  stddev_pop: sms_stddev_pop_order_by
  stddev_samp: sms_stddev_samp_order_by
  sum: sms_sum_order_by
  var_pop: sms_var_pop_order_by
  var_samp: sms_var_samp_order_by
  variance: sms_variance_order_by
}

"""
input type for inserting array relation for remote table "sms"
"""
input sms_arr_rel_insert_input {
  data: [sms_insert_input!]!

  """on conflict condition"""
  on_conflict: sms_on_conflict
}

"""aggregate avg on columns"""
type sms_avg_fields {
  id: Float
  query_id: Float
  sms_template_id: Float
}

"""
order by avg() on columns of table "sms"
"""
input sms_avg_order_by {
  id: order_by
  query_id: order_by
  sms_template_id: order_by
}

"""
Boolean expression to filter rows from the table "sms". All fields are combined with a logical 'AND'.
"""
input sms_bool_exp {
  _and: [sms_bool_exp!]
  _not: sms_bool_exp
  _or: [sms_bool_exp!]
  content: String_comparison_exp
  create_user: String_comparison_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  deleted_at: timestamptz_comparison_exp
  document_sms: document_sms_bool_exp
  id: bigint_comparison_exp
  message_id: String_comparison_exp
  query: queries_bool_exp
  query_id: bigint_comparison_exp
  region: String_comparison_exp
  sms_template: sms_templates_bool_exp
  sms_template_id: bigint_comparison_exp
  soknad_id: String_comparison_exp
  tlfmobil: String_comparison_exp
  uid: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "sms"
"""
enum sms_constraint {
  """unique or primary key constraint"""
  idx_51566_primary
}

"""
input type for incrementing numeric columns in table "sms"
"""
input sms_inc_input {
  id: bigint
  query_id: bigint
  sms_template_id: bigint
}

"""
input type for inserting data into table "sms"
"""
input sms_insert_input {
  content: String
  create_user: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  document_sms: document_sms_arr_rel_insert_input
  id: bigint
  message_id: String
  query: queries_obj_rel_insert_input
  query_id: bigint
  region: String
  sms_template: sms_templates_obj_rel_insert_input
  sms_template_id: bigint
  soknad_id: String
  tlfmobil: String
  uid: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type sms_max_fields {
  content: String
  create_user: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  message_id: String
  query_id: bigint
  region: String
  sms_template_id: bigint
  soknad_id: String
  tlfmobil: String
  uid: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "sms"
"""
input sms_max_order_by {
  content: order_by
  create_user: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  message_id: order_by
  query_id: order_by
  region: order_by
  sms_template_id: order_by
  soknad_id: order_by
  tlfmobil: order_by
  uid: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type sms_min_fields {
  content: String
  create_user: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  message_id: String
  query_id: bigint
  region: String
  sms_template_id: bigint
  soknad_id: String
  tlfmobil: String
  uid: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "sms"
"""
input sms_min_order_by {
  content: order_by
  create_user: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  message_id: order_by
  query_id: order_by
  region: order_by
  sms_template_id: order_by
  soknad_id: order_by
  tlfmobil: order_by
  uid: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "sms"
"""
type sms_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sms!]!
}

"""
input type for inserting object relation for remote table "sms"
"""
input sms_obj_rel_insert_input {
  data: sms_insert_input!

  """on conflict condition"""
  on_conflict: sms_on_conflict
}

"""
on conflict condition type for table "sms"
"""
input sms_on_conflict {
  constraint: sms_constraint!
  update_columns: [sms_update_column!]! = []
  where: sms_bool_exp
}

"""Ordering options when selecting data from "sms"."""
input sms_order_by {
  content: order_by
  create_user: order_by
  created_at: order_by
  customer_id: order_by
  deleted_at: order_by
  document_sms_aggregate: document_sms_aggregate_order_by
  id: order_by
  message_id: order_by
  query: queries_order_by
  query_id: order_by
  region: order_by
  sms_template: sms_templates_order_by
  sms_template_id: order_by
  soknad_id: order_by
  tlfmobil: order_by
  uid: order_by
  updated_at: order_by
}

"""primary key columns input for table: sms"""
input sms_pk_columns_input {
  id: bigint!
}

"""
select columns of table "sms"
"""
enum sms_select_column {
  """column name"""
  content

  """column name"""
  create_user

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  message_id

  """column name"""
  query_id

  """column name"""
  region

  """column name"""
  sms_template_id

  """column name"""
  soknad_id

  """column name"""
  tlfmobil

  """column name"""
  uid

  """column name"""
  updated_at
}

"""
input type for updating data in table "sms"
"""
input sms_set_input {
  content: String
  create_user: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  message_id: String
  query_id: bigint
  region: String
  sms_template_id: bigint
  soknad_id: String
  tlfmobil: String
  uid: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type sms_stddev_fields {
  id: Float
  query_id: Float
  sms_template_id: Float
}

"""
order by stddev() on columns of table "sms"
"""
input sms_stddev_order_by {
  id: order_by
  query_id: order_by
  sms_template_id: order_by
}

"""aggregate stddev_pop on columns"""
type sms_stddev_pop_fields {
  id: Float
  query_id: Float
  sms_template_id: Float
}

"""
order by stddev_pop() on columns of table "sms"
"""
input sms_stddev_pop_order_by {
  id: order_by
  query_id: order_by
  sms_template_id: order_by
}

"""aggregate stddev_samp on columns"""
type sms_stddev_samp_fields {
  id: Float
  query_id: Float
  sms_template_id: Float
}

"""
order by stddev_samp() on columns of table "sms"
"""
input sms_stddev_samp_order_by {
  id: order_by
  query_id: order_by
  sms_template_id: order_by
}

"""aggregate sum on columns"""
type sms_sum_fields {
  id: bigint
  query_id: bigint
  sms_template_id: bigint
}

"""
order by sum() on columns of table "sms"
"""
input sms_sum_order_by {
  id: order_by
  query_id: order_by
  sms_template_id: order_by
}

"""
columns and relationships of "sms_template_template"
"""
type sms_template_template {
  """An object relationship"""
  sms_template: sms_templates!
  sms_template_id: bigint!

  """An object relationship"""
  template: templates!
  template_id: bigint!
}

"""
aggregated selection of "sms_template_template"
"""
type sms_template_template_aggregate {
  aggregate: sms_template_template_aggregate_fields
  nodes: [sms_template_template!]!
}

"""
aggregate fields of "sms_template_template"
"""
type sms_template_template_aggregate_fields {
  avg: sms_template_template_avg_fields
  count(columns: [sms_template_template_select_column!], distinct: Boolean): Int!
  max: sms_template_template_max_fields
  min: sms_template_template_min_fields
  stddev: sms_template_template_stddev_fields
  stddev_pop: sms_template_template_stddev_pop_fields
  stddev_samp: sms_template_template_stddev_samp_fields
  sum: sms_template_template_sum_fields
  var_pop: sms_template_template_var_pop_fields
  var_samp: sms_template_template_var_samp_fields
  variance: sms_template_template_variance_fields
}

"""
order by aggregate values of table "sms_template_template"
"""
input sms_template_template_aggregate_order_by {
  avg: sms_template_template_avg_order_by
  count: order_by
  max: sms_template_template_max_order_by
  min: sms_template_template_min_order_by
  stddev: sms_template_template_stddev_order_by
  stddev_pop: sms_template_template_stddev_pop_order_by
  stddev_samp: sms_template_template_stddev_samp_order_by
  sum: sms_template_template_sum_order_by
  var_pop: sms_template_template_var_pop_order_by
  var_samp: sms_template_template_var_samp_order_by
  variance: sms_template_template_variance_order_by
}

"""
input type for inserting array relation for remote table "sms_template_template"
"""
input sms_template_template_arr_rel_insert_input {
  data: [sms_template_template_insert_input!]!

  """on conflict condition"""
  on_conflict: sms_template_template_on_conflict
}

"""aggregate avg on columns"""
type sms_template_template_avg_fields {
  sms_template_id: Float
  template_id: Float
}

"""
order by avg() on columns of table "sms_template_template"
"""
input sms_template_template_avg_order_by {
  sms_template_id: order_by
  template_id: order_by
}

"""
Boolean expression to filter rows from the table "sms_template_template". All fields are combined with a logical 'AND'.
"""
input sms_template_template_bool_exp {
  _and: [sms_template_template_bool_exp!]
  _not: sms_template_template_bool_exp
  _or: [sms_template_template_bool_exp!]
  sms_template: sms_templates_bool_exp
  sms_template_id: bigint_comparison_exp
  template: templates_bool_exp
  template_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "sms_template_template"
"""
enum sms_template_template_constraint {
  """unique or primary key constraint"""
  idx_51585_primary
}

"""
input type for incrementing numeric columns in table "sms_template_template"
"""
input sms_template_template_inc_input {
  sms_template_id: bigint
  template_id: bigint
}

"""
input type for inserting data into table "sms_template_template"
"""
input sms_template_template_insert_input {
  sms_template: sms_templates_obj_rel_insert_input
  sms_template_id: bigint
  template: templates_obj_rel_insert_input
  template_id: bigint
}

"""aggregate max on columns"""
type sms_template_template_max_fields {
  sms_template_id: bigint
  template_id: bigint
}

"""
order by max() on columns of table "sms_template_template"
"""
input sms_template_template_max_order_by {
  sms_template_id: order_by
  template_id: order_by
}

"""aggregate min on columns"""
type sms_template_template_min_fields {
  sms_template_id: bigint
  template_id: bigint
}

"""
order by min() on columns of table "sms_template_template"
"""
input sms_template_template_min_order_by {
  sms_template_id: order_by
  template_id: order_by
}

"""
response of any mutation on the table "sms_template_template"
"""
type sms_template_template_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sms_template_template!]!
}

"""
on conflict condition type for table "sms_template_template"
"""
input sms_template_template_on_conflict {
  constraint: sms_template_template_constraint!
  update_columns: [sms_template_template_update_column!]! = []
  where: sms_template_template_bool_exp
}

"""Ordering options when selecting data from "sms_template_template"."""
input sms_template_template_order_by {
  sms_template: sms_templates_order_by
  sms_template_id: order_by
  template: templates_order_by
  template_id: order_by
}

"""primary key columns input for table: sms_template_template"""
input sms_template_template_pk_columns_input {
  sms_template_id: bigint!
  template_id: bigint!
}

"""
select columns of table "sms_template_template"
"""
enum sms_template_template_select_column {
  """column name"""
  sms_template_id

  """column name"""
  template_id
}

"""
input type for updating data in table "sms_template_template"
"""
input sms_template_template_set_input {
  sms_template_id: bigint
  template_id: bigint
}

"""aggregate stddev on columns"""
type sms_template_template_stddev_fields {
  sms_template_id: Float
  template_id: Float
}

"""
order by stddev() on columns of table "sms_template_template"
"""
input sms_template_template_stddev_order_by {
  sms_template_id: order_by
  template_id: order_by
}

"""aggregate stddev_pop on columns"""
type sms_template_template_stddev_pop_fields {
  sms_template_id: Float
  template_id: Float
}

"""
order by stddev_pop() on columns of table "sms_template_template"
"""
input sms_template_template_stddev_pop_order_by {
  sms_template_id: order_by
  template_id: order_by
}

"""aggregate stddev_samp on columns"""
type sms_template_template_stddev_samp_fields {
  sms_template_id: Float
  template_id: Float
}

"""
order by stddev_samp() on columns of table "sms_template_template"
"""
input sms_template_template_stddev_samp_order_by {
  sms_template_id: order_by
  template_id: order_by
}

"""aggregate sum on columns"""
type sms_template_template_sum_fields {
  sms_template_id: bigint
  template_id: bigint
}

"""
order by sum() on columns of table "sms_template_template"
"""
input sms_template_template_sum_order_by {
  sms_template_id: order_by
  template_id: order_by
}

"""
update columns of table "sms_template_template"
"""
enum sms_template_template_update_column {
  """column name"""
  sms_template_id

  """column name"""
  template_id
}

"""aggregate var_pop on columns"""
type sms_template_template_var_pop_fields {
  sms_template_id: Float
  template_id: Float
}

"""
order by var_pop() on columns of table "sms_template_template"
"""
input sms_template_template_var_pop_order_by {
  sms_template_id: order_by
  template_id: order_by
}

"""aggregate var_samp on columns"""
type sms_template_template_var_samp_fields {
  sms_template_id: Float
  template_id: Float
}

"""
order by var_samp() on columns of table "sms_template_template"
"""
input sms_template_template_var_samp_order_by {
  sms_template_id: order_by
  template_id: order_by
}

"""aggregate variance on columns"""
type sms_template_template_variance_fields {
  sms_template_id: Float
  template_id: Float
}

"""
order by variance() on columns of table "sms_template_template"
"""
input sms_template_template_variance_order_by {
  sms_template_id: order_by
  template_id: order_by
}

"""
columns and relationships of "sms_templates"
"""
type sms_templates {
  category: String

  """An object relationship"""
  categoryByCategory: categories
  content: String!
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  id: bigint!
  region: String!

  """An array relationship"""
  sms(
    """distinct select on columns"""
    distinct_on: [sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_order_by!]

    """filter the rows returned"""
    where: sms_bool_exp
  ): [sms!]!

  """An aggregate relationship"""
  sms_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_order_by!]

    """filter the rows returned"""
    where: sms_bool_exp
  ): sms_aggregate!

  """An array relationship"""
  sms_template_templates(
    """distinct select on columns"""
    distinct_on: [sms_template_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_template_template_order_by!]

    """filter the rows returned"""
    where: sms_template_template_bool_exp
  ): [sms_template_template!]!

  """An aggregate relationship"""
  sms_template_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_template_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_template_template_order_by!]

    """filter the rows returned"""
    where: sms_template_template_bool_exp
  ): sms_template_template_aggregate!
  title: String!
  updated_at: timestamptz
}

"""
aggregated selection of "sms_templates"
"""
type sms_templates_aggregate {
  aggregate: sms_templates_aggregate_fields
  nodes: [sms_templates!]!
}

"""
aggregate fields of "sms_templates"
"""
type sms_templates_aggregate_fields {
  avg: sms_templates_avg_fields
  count(columns: [sms_templates_select_column!], distinct: Boolean): Int!
  max: sms_templates_max_fields
  min: sms_templates_min_fields
  stddev: sms_templates_stddev_fields
  stddev_pop: sms_templates_stddev_pop_fields
  stddev_samp: sms_templates_stddev_samp_fields
  sum: sms_templates_sum_fields
  var_pop: sms_templates_var_pop_fields
  var_samp: sms_templates_var_samp_fields
  variance: sms_templates_variance_fields
}

"""
order by aggregate values of table "sms_templates"
"""
input sms_templates_aggregate_order_by {
  avg: sms_templates_avg_order_by
  count: order_by
  max: sms_templates_max_order_by
  min: sms_templates_min_order_by
  stddev: sms_templates_stddev_order_by
  stddev_pop: sms_templates_stddev_pop_order_by
  stddev_samp: sms_templates_stddev_samp_order_by
  sum: sms_templates_sum_order_by
  var_pop: sms_templates_var_pop_order_by
  var_samp: sms_templates_var_samp_order_by
  variance: sms_templates_variance_order_by
}

"""
input type for inserting array relation for remote table "sms_templates"
"""
input sms_templates_arr_rel_insert_input {
  data: [sms_templates_insert_input!]!

  """on conflict condition"""
  on_conflict: sms_templates_on_conflict
}

"""aggregate avg on columns"""
type sms_templates_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "sms_templates"
"""
input sms_templates_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "sms_templates". All fields are combined with a logical 'AND'.
"""
input sms_templates_bool_exp {
  _and: [sms_templates_bool_exp!]
  _not: sms_templates_bool_exp
  _or: [sms_templates_bool_exp!]
  category: String_comparison_exp
  categoryByCategory: categories_bool_exp
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  id: bigint_comparison_exp
  region: String_comparison_exp
  sms: sms_bool_exp
  sms_template_templates: sms_template_template_bool_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "sms_templates"
"""
enum sms_templates_constraint {
  """unique or primary key constraint"""
  idx_51576_primary
}

"""
input type for incrementing numeric columns in table "sms_templates"
"""
input sms_templates_inc_input {
  id: bigint
}

"""
input type for inserting data into table "sms_templates"
"""
input sms_templates_insert_input {
  category: String
  categoryByCategory: categories_obj_rel_insert_input
  content: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  id: bigint
  region: String
  sms: sms_arr_rel_insert_input
  sms_template_templates: sms_template_template_arr_rel_insert_input
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type sms_templates_max_fields {
  category: String
  content: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  id: bigint
  region: String
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "sms_templates"
"""
input sms_templates_max_order_by {
  category: order_by
  content: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  id: order_by
  region: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type sms_templates_min_fields {
  category: String
  content: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  id: bigint
  region: String
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "sms_templates"
"""
input sms_templates_min_order_by {
  category: order_by
  content: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  id: order_by
  region: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "sms_templates"
"""
type sms_templates_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sms_templates!]!
}

"""
input type for inserting object relation for remote table "sms_templates"
"""
input sms_templates_obj_rel_insert_input {
  data: sms_templates_insert_input!

  """on conflict condition"""
  on_conflict: sms_templates_on_conflict
}

"""
on conflict condition type for table "sms_templates"
"""
input sms_templates_on_conflict {
  constraint: sms_templates_constraint!
  update_columns: [sms_templates_update_column!]! = []
  where: sms_templates_bool_exp
}

"""Ordering options when selecting data from "sms_templates"."""
input sms_templates_order_by {
  category: order_by
  categoryByCategory: categories_order_by
  content: order_by
  created_at: order_by
  customer_id: order_by
  id: order_by
  region: order_by
  sms_aggregate: sms_aggregate_order_by
  sms_template_templates_aggregate: sms_template_template_aggregate_order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: sms_templates"""
input sms_templates_pk_columns_input {
  id: bigint!
}

"""
select columns of table "sms_templates"
"""
enum sms_templates_select_column {
  """column name"""
  category

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  id

  """column name"""
  region

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "sms_templates"
"""
input sms_templates_set_input {
  category: String
  content: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  id: bigint
  region: String
  title: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type sms_templates_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "sms_templates"
"""
input sms_templates_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type sms_templates_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "sms_templates"
"""
input sms_templates_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type sms_templates_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "sms_templates"
"""
input sms_templates_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type sms_templates_sum_fields {
  id: bigint
}

"""
order by sum() on columns of table "sms_templates"
"""
input sms_templates_sum_order_by {
  id: order_by
}

"""
update columns of table "sms_templates"
"""
enum sms_templates_update_column {
  """column name"""
  category

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  id

  """column name"""
  region

  """column name"""
  title

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type sms_templates_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "sms_templates"
"""
input sms_templates_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type sms_templates_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "sms_templates"
"""
input sms_templates_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type sms_templates_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "sms_templates"
"""
input sms_templates_variance_order_by {
  id: order_by
}

"""
update columns of table "sms"
"""
enum sms_update_column {
  """column name"""
  content

  """column name"""
  create_user

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  message_id

  """column name"""
  query_id

  """column name"""
  region

  """column name"""
  sms_template_id

  """column name"""
  soknad_id

  """column name"""
  tlfmobil

  """column name"""
  uid

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type sms_var_pop_fields {
  id: Float
  query_id: Float
  sms_template_id: Float
}

"""
order by var_pop() on columns of table "sms"
"""
input sms_var_pop_order_by {
  id: order_by
  query_id: order_by
  sms_template_id: order_by
}

"""aggregate var_samp on columns"""
type sms_var_samp_fields {
  id: Float
  query_id: Float
  sms_template_id: Float
}

"""
order by var_samp() on columns of table "sms"
"""
input sms_var_samp_order_by {
  id: order_by
  query_id: order_by
  sms_template_id: order_by
}

"""aggregate variance on columns"""
type sms_variance_fields {
  id: Float
  query_id: Float
  sms_template_id: Float
}

"""
order by variance() on columns of table "sms"
"""
input sms_variance_order_by {
  id: order_by
  query_id: order_by
  sms_template_id: order_by
}

"""
columns and relationships of "status"
"""
type status {
  comment: String
  name: String!

  """An array relationship"""
  queries(
    """distinct select on columns"""
    distinct_on: [queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [queries_order_by!]

    """filter the rows returned"""
    where: queries_bool_exp
  ): [queries!]!

  """An aggregate relationship"""
  queries_aggregate(
    """distinct select on columns"""
    distinct_on: [queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [queries_order_by!]

    """filter the rows returned"""
    where: queries_bool_exp
  ): queries_aggregate!
}

"""
aggregated selection of "status"
"""
type status_aggregate {
  aggregate: status_aggregate_fields
  nodes: [status!]!
}

"""
aggregate fields of "status"
"""
type status_aggregate_fields {
  count(columns: [status_select_column!], distinct: Boolean): Int!
  max: status_max_fields
  min: status_min_fields
}

"""
Boolean expression to filter rows from the table "status". All fields are combined with a logical 'AND'.
"""
input status_bool_exp {
  _and: [status_bool_exp!]
  _not: status_bool_exp
  _or: [status_bool_exp!]
  comment: String_comparison_exp
  name: String_comparison_exp
  queries: queries_bool_exp
}

"""
unique or primary key constraints on table "status"
"""
enum status_constraint {
  """unique or primary key constraint"""
  status_pkey
}

"""
input type for inserting data into table "status"
"""
input status_insert_input {
  comment: String
  name: String
  queries: queries_arr_rel_insert_input
}

"""aggregate max on columns"""
type status_max_fields {
  comment: String
  name: String
}

"""aggregate min on columns"""
type status_min_fields {
  comment: String
  name: String
}

"""
response of any mutation on the table "status"
"""
type status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [status!]!
}

"""
input type for inserting object relation for remote table "status"
"""
input status_obj_rel_insert_input {
  data: status_insert_input!

  """on conflict condition"""
  on_conflict: status_on_conflict
}

"""
on conflict condition type for table "status"
"""
input status_on_conflict {
  constraint: status_constraint!
  update_columns: [status_update_column!]! = []
  where: status_bool_exp
}

"""Ordering options when selecting data from "status"."""
input status_order_by {
  comment: order_by
  name: order_by
  queries_aggregate: queries_aggregate_order_by
}

"""primary key columns input for table: status"""
input status_pk_columns_input {
  name: String!
}

"""
select columns of table "status"
"""
enum status_select_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
input type for updating data in table "status"
"""
input status_set_input {
  comment: String
  name: String
}

"""
update columns of table "status"
"""
enum status_update_column {
  """column name"""
  comment

  """column name"""
  name
}

type subscription_root {
  """
  fetch data from the table: "accessible"
  """
  accessible(
    """distinct select on columns"""
    distinct_on: [accessible_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accessible_order_by!]

    """filter the rows returned"""
    where: accessible_bool_exp
  ): [accessible!]!

  """
  fetch aggregated fields from the table: "accessible"
  """
  accessible_aggregate(
    """distinct select on columns"""
    distinct_on: [accessible_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accessible_order_by!]

    """filter the rows returned"""
    where: accessible_bool_exp
  ): accessible_aggregate!

  """fetch data from the table: "accessible" using primary key columns"""
  accessible_by_pk(name: String!): accessible

  """An array relationship"""
  anonymous_answers(
    """distinct select on columns"""
    distinct_on: [anonymous_answers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_answers_order_by!]

    """filter the rows returned"""
    where: anonymous_answers_bool_exp
  ): [anonymous_answers!]!

  """An aggregate relationship"""
  anonymous_answers_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_answers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_answers_order_by!]

    """filter the rows returned"""
    where: anonymous_answers_bool_exp
  ): anonymous_answers_aggregate!

  """
  fetch data from the table: "anonymous_answers" using primary key columns
  """
  anonymous_answers_by_pk(id: bigint!): anonymous_answers

  """An array relationship"""
  anonymous_invitations(
    """distinct select on columns"""
    distinct_on: [anonymous_invitations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_invitations_order_by!]

    """filter the rows returned"""
    where: anonymous_invitations_bool_exp
  ): [anonymous_invitations!]!

  """An aggregate relationship"""
  anonymous_invitations_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_invitations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_invitations_order_by!]

    """filter the rows returned"""
    where: anonymous_invitations_bool_exp
  ): anonymous_invitations_aggregate!

  """
  fetch data from the table: "anonymous_invitations" using primary key columns
  """
  anonymous_invitations_by_pk(id: bigint!): anonymous_invitations

  """An array relationship"""
  anonymous_queries(
    """distinct select on columns"""
    distinct_on: [anonymous_queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_queries_order_by!]

    """filter the rows returned"""
    where: anonymous_queries_bool_exp
  ): [anonymous_queries!]!

  """An aggregate relationship"""
  anonymous_queries_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_queries_order_by!]

    """filter the rows returned"""
    where: anonymous_queries_bool_exp
  ): anonymous_queries_aggregate!

  """
  fetch data from the table: "anonymous_queries" using primary key columns
  """
  anonymous_queries_by_pk(id: bigint!): anonymous_queries

  """An array relationship"""
  anonymous_sms(
    """distinct select on columns"""
    distinct_on: [anonymous_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_sms_order_by!]

    """filter the rows returned"""
    where: anonymous_sms_bool_exp
  ): [anonymous_sms!]!

  """An aggregate relationship"""
  anonymous_sms_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_sms_order_by!]

    """filter the rows returned"""
    where: anonymous_sms_bool_exp
  ): anonymous_sms_aggregate!

  """fetch data from the table: "anonymous_sms" using primary key columns"""
  anonymous_sms_by_pk(id: bigint!): anonymous_sms

  """
  fetch data from the table: "anonymous_template_question"
  """
  anonymous_template_question(
    """distinct select on columns"""
    distinct_on: [anonymous_template_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_template_question_order_by!]

    """filter the rows returned"""
    where: anonymous_template_question_bool_exp
  ): [anonymous_template_question!]!

  """
  fetch aggregated fields from the table: "anonymous_template_question"
  """
  anonymous_template_question_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_template_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_template_question_order_by!]

    """filter the rows returned"""
    where: anonymous_template_question_bool_exp
  ): anonymous_template_question_aggregate!

  """
  fetch data from the table: "anonymous_templates"
  """
  anonymous_templates(
    """distinct select on columns"""
    distinct_on: [anonymous_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_templates_order_by!]

    """filter the rows returned"""
    where: anonymous_templates_bool_exp
  ): [anonymous_templates!]!

  """
  fetch aggregated fields from the table: "anonymous_templates"
  """
  anonymous_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [anonymous_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [anonymous_templates_order_by!]

    """filter the rows returned"""
    where: anonymous_templates_bool_exp
  ): anonymous_templates_aggregate!

  """
  fetch data from the table: "anonymous_templates" using primary key columns
  """
  anonymous_templates_by_pk(id: bigint!): anonymous_templates

  """
  fetch data from the table: "categories"
  """
  categories(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): [categories!]!

  """
  fetch aggregated fields from the table: "categories"
  """
  categories_aggregate(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): categories_aggregate!

  """fetch data from the table: "categories" using primary key columns"""
  categories_by_pk(name: String!): categories

  """
  fetch data from the table: "consent_patient"
  """
  consent_patient(
    """distinct select on columns"""
    distinct_on: [consent_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_patient_order_by!]

    """filter the rows returned"""
    where: consent_patient_bool_exp
  ): [consent_patient!]!

  """
  fetch aggregated fields from the table: "consent_patient"
  """
  consent_patient_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_patient_order_by!]

    """filter the rows returned"""
    where: consent_patient_bool_exp
  ): consent_patient_aggregate!

  """
  fetch data from the table: "consent_template_to_template"
  """
  consent_template_to_template(
    """distinct select on columns"""
    distinct_on: [consent_template_to_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_template_to_template_order_by!]

    """filter the rows returned"""
    where: consent_template_to_template_bool_exp
  ): [consent_template_to_template!]!

  """
  fetch aggregated fields from the table: "consent_template_to_template"
  """
  consent_template_to_template_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_template_to_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_template_to_template_order_by!]

    """filter the rows returned"""
    where: consent_template_to_template_bool_exp
  ): consent_template_to_template_aggregate!

  """An array relationship"""
  consent_templates(
    """distinct select on columns"""
    distinct_on: [consent_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_templates_order_by!]

    """filter the rows returned"""
    where: consent_templates_bool_exp
  ): [consent_templates!]!

  """An aggregate relationship"""
  consent_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_templates_order_by!]

    """filter the rows returned"""
    where: consent_templates_bool_exp
  ): consent_templates_aggregate!

  """
  fetch data from the table: "consent_templates" using primary key columns
  """
  consent_templates_by_pk(id: bigint!): consent_templates

  """An array relationship"""
  consents(
    """distinct select on columns"""
    distinct_on: [consents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consents_order_by!]

    """filter the rows returned"""
    where: consents_bool_exp
  ): [consents!]!

  """An aggregate relationship"""
  consents_aggregate(
    """distinct select on columns"""
    distinct_on: [consents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consents_order_by!]

    """filter the rows returned"""
    where: consents_bool_exp
  ): consents_aggregate!

  """fetch data from the table: "consents" using primary key columns"""
  consents_by_pk(id: bigint!): consents

  """
  fetch data from the table: "contexts"
  """
  contexts(
    """distinct select on columns"""
    distinct_on: [contexts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contexts_order_by!]

    """filter the rows returned"""
    where: contexts_bool_exp
  ): [contexts!]!

  """
  fetch aggregated fields from the table: "contexts"
  """
  contexts_aggregate(
    """distinct select on columns"""
    distinct_on: [contexts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contexts_order_by!]

    """filter the rows returned"""
    where: contexts_bool_exp
  ): contexts_aggregate!

  """fetch data from the table: "contexts" using primary key columns"""
  contexts_by_pk(name: String!): contexts

  """
  fetch data from the table: "custom_db_nodes"
  """
  custom_db_nodes(
    """distinct select on columns"""
    distinct_on: [custom_db_nodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [custom_db_nodes_order_by!]

    """filter the rows returned"""
    where: custom_db_nodes_bool_exp
  ): [custom_db_nodes!]!

  """
  fetch aggregated fields from the table: "custom_db_nodes"
  """
  custom_db_nodes_aggregate(
    """distinct select on columns"""
    distinct_on: [custom_db_nodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [custom_db_nodes_order_by!]

    """filter the rows returned"""
    where: custom_db_nodes_bool_exp
  ): custom_db_nodes_aggregate!

  """fetch data from the table: "custom_db_nodes" using primary key columns"""
  custom_db_nodes_by_pk(id: bigint!): custom_db_nodes

  """
  fetch data from the table: "document_patient"
  """
  document_patient(
    """distinct select on columns"""
    distinct_on: [document_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_patient_order_by!]

    """filter the rows returned"""
    where: document_patient_bool_exp
  ): [document_patient!]!

  """
  fetch aggregated fields from the table: "document_patient"
  """
  document_patient_aggregate(
    """distinct select on columns"""
    distinct_on: [document_patient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_patient_order_by!]

    """filter the rows returned"""
    where: document_patient_bool_exp
  ): document_patient_aggregate!

  """
  fetch data from the table: "document_patient" using primary key columns
  """
  document_patient_by_pk(
    document_id: bigint!

    """(DC2Type:guid)"""
    patient_id: String!
  ): document_patient

  """An array relationship"""
  document_sms(
    """distinct select on columns"""
    distinct_on: [document_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sms_order_by!]

    """filter the rows returned"""
    where: document_sms_bool_exp
  ): [document_sms!]!

  """An aggregate relationship"""
  document_sms_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sms_order_by!]

    """filter the rows returned"""
    where: document_sms_bool_exp
  ): document_sms_aggregate!

  """
  fetch data from the table: "documents"
  """
  documents(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): [documents!]!

  """
  fetch aggregated fields from the table: "documents"
  """
  documents_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): documents_aggregate!

  """fetch data from the table: "documents" using primary key columns"""
  documents_by_pk(id: bigint!): documents

  """
  fetch data from the table: "groups"
  """
  groups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  fetch aggregated fields from the table: "groups"
  """
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """fetch data from the table: "groups" using primary key columns"""
  groups_by_pk(name: String!): groups

  """
  fetch data from the table: "initiators"
  """
  initiators(
    """distinct select on columns"""
    distinct_on: [initiators_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [initiators_order_by!]

    """filter the rows returned"""
    where: initiators_bool_exp
  ): [initiators!]!

  """
  fetch aggregated fields from the table: "initiators"
  """
  initiators_aggregate(
    """distinct select on columns"""
    distinct_on: [initiators_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [initiators_order_by!]

    """filter the rows returned"""
    where: initiators_bool_exp
  ): initiators_aggregate!

  """fetch data from the table: "initiators" using primary key columns"""
  initiators_by_pk(name: String!): initiators

  """
  fetch data from the table: "migrations"
  """
  migrations(
    """distinct select on columns"""
    distinct_on: [migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migrations_order_by!]

    """filter the rows returned"""
    where: migrations_bool_exp
  ): [migrations!]!

  """
  fetch aggregated fields from the table: "migrations"
  """
  migrations_aggregate(
    """distinct select on columns"""
    distinct_on: [migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migrations_order_by!]

    """filter the rows returned"""
    where: migrations_bool_exp
  ): migrations_aggregate!

  """fetch data from the table: "migrations" using primary key columns"""
  migrations_by_pk(id: bigint!): migrations

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(
    """(DC2Type:guid)"""
    customer_id: String!
    journal_project_id: String!
    shortcut_id: String!
  ): projects

  """An array relationship"""
  queries(
    """distinct select on columns"""
    distinct_on: [queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [queries_order_by!]

    """filter the rows returned"""
    where: queries_bool_exp
  ): [queries!]!

  """An aggregate relationship"""
  queries_aggregate(
    """distinct select on columns"""
    distinct_on: [queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [queries_order_by!]

    """filter the rows returned"""
    where: queries_bool_exp
  ): queries_aggregate!

  """fetch data from the table: "queries" using primary key columns"""
  queries_by_pk(id: bigint!): queries

  """
  fetch data from the table: "question_composite_question"
  """
  question_composite_question(
    """distinct select on columns"""
    distinct_on: [question_composite_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_composite_question_order_by!]

    """filter the rows returned"""
    where: question_composite_question_bool_exp
  ): [question_composite_question!]!

  """
  fetch aggregated fields from the table: "question_composite_question"
  """
  question_composite_question_aggregate(
    """distinct select on columns"""
    distinct_on: [question_composite_question_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_composite_question_order_by!]

    """filter the rows returned"""
    where: question_composite_question_bool_exp
  ): question_composite_question_aggregate!

  """
  fetch data from the table: "question_template"
  """
  question_template(
    """distinct select on columns"""
    distinct_on: [question_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_template_order_by!]

    """filter the rows returned"""
    where: question_template_bool_exp
  ): [question_template!]!

  """
  fetch aggregated fields from the table: "question_template"
  """
  question_template_aggregate(
    """distinct select on columns"""
    distinct_on: [question_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_template_order_by!]

    """filter the rows returned"""
    where: question_template_bool_exp
  ): question_template_aggregate!

  """
  fetch data from the table: "questions"
  """
  questions(
    """distinct select on columns"""
    distinct_on: [questions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [questions_order_by!]

    """filter the rows returned"""
    where: questions_bool_exp
  ): [questions!]!

  """
  fetch aggregated fields from the table: "questions"
  """
  questions_aggregate(
    """distinct select on columns"""
    distinct_on: [questions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [questions_order_by!]

    """filter the rows returned"""
    where: questions_bool_exp
  ): questions_aggregate!

  """fetch data from the table: "questions" using primary key columns"""
  questions_by_pk(id: bigint!): questions

  """
  fetch data from the table: "security_levels"
  """
  security_levels(
    """distinct select on columns"""
    distinct_on: [security_levels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [security_levels_order_by!]

    """filter the rows returned"""
    where: security_levels_bool_exp
  ): [security_levels!]!

  """
  fetch aggregated fields from the table: "security_levels"
  """
  security_levels_aggregate(
    """distinct select on columns"""
    distinct_on: [security_levels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [security_levels_order_by!]

    """filter the rows returned"""
    where: security_levels_bool_exp
  ): security_levels_aggregate!

  """fetch data from the table: "security_levels" using primary key columns"""
  security_levels_by_pk(name: String!): security_levels

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch aggregated fields from the table: "settings"
  """
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(id: bigint!): settings

  """
  fetch data from the table: "shortcuts"
  """
  shortcuts(
    """distinct select on columns"""
    distinct_on: [shortcuts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shortcuts_order_by!]

    """filter the rows returned"""
    where: shortcuts_bool_exp
  ): [shortcuts!]!

  """
  fetch aggregated fields from the table: "shortcuts"
  """
  shortcuts_aggregate(
    """distinct select on columns"""
    distinct_on: [shortcuts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shortcuts_order_by!]

    """filter the rows returned"""
    where: shortcuts_bool_exp
  ): shortcuts_aggregate!

  """fetch data from the table: "shortcuts" using primary key columns"""
  shortcuts_by_pk(id: String!): shortcuts

  """An array relationship"""
  sms(
    """distinct select on columns"""
    distinct_on: [sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_order_by!]

    """filter the rows returned"""
    where: sms_bool_exp
  ): [sms!]!

  """An aggregate relationship"""
  sms_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_order_by!]

    """filter the rows returned"""
    where: sms_bool_exp
  ): sms_aggregate!

  """fetch data from the table: "sms" using primary key columns"""
  sms_by_pk(id: bigint!): sms

  """
  fetch data from the table: "sms_template_template"
  """
  sms_template_template(
    """distinct select on columns"""
    distinct_on: [sms_template_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_template_template_order_by!]

    """filter the rows returned"""
    where: sms_template_template_bool_exp
  ): [sms_template_template!]!

  """
  fetch aggregated fields from the table: "sms_template_template"
  """
  sms_template_template_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_template_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_template_template_order_by!]

    """filter the rows returned"""
    where: sms_template_template_bool_exp
  ): sms_template_template_aggregate!

  """
  fetch data from the table: "sms_template_template" using primary key columns
  """
  sms_template_template_by_pk(sms_template_id: bigint!, template_id: bigint!): sms_template_template

  """An array relationship"""
  sms_templates(
    """distinct select on columns"""
    distinct_on: [sms_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_templates_order_by!]

    """filter the rows returned"""
    where: sms_templates_bool_exp
  ): [sms_templates!]!

  """An aggregate relationship"""
  sms_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_templates_order_by!]

    """filter the rows returned"""
    where: sms_templates_bool_exp
  ): sms_templates_aggregate!

  """fetch data from the table: "sms_templates" using primary key columns"""
  sms_templates_by_pk(id: bigint!): sms_templates

  """
  fetch data from the table: "status"
  """
  status(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): [status!]!

  """
  fetch aggregated fields from the table: "status"
  """
  status_aggregate(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): status_aggregate!

  """fetch data from the table: "status" using primary key columns"""
  status_by_pk(name: String!): status

  """An array relationship"""
  templates(
    """distinct select on columns"""
    distinct_on: [templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [templates_order_by!]

    """filter the rows returned"""
    where: templates_bool_exp
  ): [templates!]!

  """An aggregate relationship"""
  templates_aggregate(
    """distinct select on columns"""
    distinct_on: [templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [templates_order_by!]

    """filter the rows returned"""
    where: templates_bool_exp
  ): templates_aggregate!

  """fetch data from the table: "templates" using primary key columns"""
  templates_by_pk(id: bigint!): templates

  """
  fetch data from the table: "types"
  """
  types(
    """distinct select on columns"""
    distinct_on: [types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [types_order_by!]

    """filter the rows returned"""
    where: types_bool_exp
  ): [types!]!

  """
  fetch aggregated fields from the table: "types"
  """
  types_aggregate(
    """distinct select on columns"""
    distinct_on: [types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [types_order_by!]

    """filter the rows returned"""
    where: types_bool_exp
  ): types_aggregate!

  """fetch data from the table: "types" using primary key columns"""
  types_by_pk(name: String!): types

  """
  fetch data from the table: "unseen_documents"
  """
  unseen_documents(
    """distinct select on columns"""
    distinct_on: [unseen_documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unseen_documents_order_by!]

    """filter the rows returned"""
    where: unseen_documents_bool_exp
  ): [unseen_documents!]!

  """
  fetch aggregated fields from the table: "unseen_documents"
  """
  unseen_documents_aggregate(
    """distinct select on columns"""
    distinct_on: [unseen_documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unseen_documents_order_by!]

    """filter the rows returned"""
    where: unseen_documents_bool_exp
  ): unseen_documents_aggregate!

  """
  fetch data from the table: "unseen_queries"
  """
  unseen_queries(
    """distinct select on columns"""
    distinct_on: [unseen_queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unseen_queries_order_by!]

    """filter the rows returned"""
    where: unseen_queries_bool_exp
  ): [unseen_queries!]!

  """
  fetch aggregated fields from the table: "unseen_queries"
  """
  unseen_queries_aggregate(
    """distinct select on columns"""
    distinct_on: [unseen_queries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unseen_queries_order_by!]

    """filter the rows returned"""
    where: unseen_queries_bool_exp
  ): unseen_queries_aggregate!
}

"""
columns and relationships of "templates"
"""
type templates {
  accessible: String

  """An object relationship"""
  accessibleByAccessible: accessible
  archived: Boolean!
  attributes: String!

  """An array relationship"""
  consent_template_to_templates(
    """distinct select on columns"""
    distinct_on: [consent_template_to_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_template_to_template_order_by!]

    """filter the rows returned"""
    where: consent_template_to_template_bool_exp
  ): [consent_template_to_template!]!

  """An aggregate relationship"""
  consent_template_to_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_template_to_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_template_to_template_order_by!]

    """filter the rows returned"""
    where: consent_template_to_template_bool_exp
  ): consent_template_to_template_aggregate!
  context: String

  """An object relationship"""
  contextByContext: contexts
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String!
  deleted_at: timestamptz
  id: bigint!

  """An array relationship"""
  question_templates(
    """distinct select on columns"""
    distinct_on: [question_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_template_order_by!]

    """filter the rows returned"""
    where: question_template_bool_exp
  ): [question_template!]!

  """An aggregate relationship"""
  question_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [question_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [question_template_order_by!]

    """filter the rows returned"""
    where: question_template_bool_exp
  ): question_template_aggregate!
  region: String!

  """An array relationship"""
  sms_template_templates(
    """distinct select on columns"""
    distinct_on: [sms_template_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_template_template_order_by!]

    """filter the rows returned"""
    where: sms_template_template_bool_exp
  ): [sms_template_template!]!

  """An aggregate relationship"""
  sms_template_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [sms_template_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sms_template_template_order_by!]

    """filter the rows returned"""
    where: sms_template_template_bool_exp
  ): sms_template_template_aggregate!
  template_uuid: String!
  therapist_role: String
  title: String!
  updated_at: timestamptz
}

"""
aggregated selection of "templates"
"""
type templates_aggregate {
  aggregate: templates_aggregate_fields
  nodes: [templates!]!
}

"""
aggregate fields of "templates"
"""
type templates_aggregate_fields {
  avg: templates_avg_fields
  count(columns: [templates_select_column!], distinct: Boolean): Int!
  max: templates_max_fields
  min: templates_min_fields
  stddev: templates_stddev_fields
  stddev_pop: templates_stddev_pop_fields
  stddev_samp: templates_stddev_samp_fields
  sum: templates_sum_fields
  var_pop: templates_var_pop_fields
  var_samp: templates_var_samp_fields
  variance: templates_variance_fields
}

"""
order by aggregate values of table "templates"
"""
input templates_aggregate_order_by {
  avg: templates_avg_order_by
  count: order_by
  max: templates_max_order_by
  min: templates_min_order_by
  stddev: templates_stddev_order_by
  stddev_pop: templates_stddev_pop_order_by
  stddev_samp: templates_stddev_samp_order_by
  sum: templates_sum_order_by
  var_pop: templates_var_pop_order_by
  var_samp: templates_var_samp_order_by
  variance: templates_variance_order_by
}

"""
input type for inserting array relation for remote table "templates"
"""
input templates_arr_rel_insert_input {
  data: [templates_insert_input!]!

  """on conflict condition"""
  on_conflict: templates_on_conflict
}

"""aggregate avg on columns"""
type templates_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "templates"
"""
input templates_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "templates". All fields are combined with a logical 'AND'.
"""
input templates_bool_exp {
  _and: [templates_bool_exp!]
  _not: templates_bool_exp
  _or: [templates_bool_exp!]
  accessible: String_comparison_exp
  accessibleByAccessible: accessible_bool_exp
  archived: Boolean_comparison_exp
  attributes: String_comparison_exp
  consent_template_to_templates: consent_template_to_template_bool_exp
  context: String_comparison_exp
  contextByContext: contexts_bool_exp
  created_at: timestamptz_comparison_exp
  customer_id: String_comparison_exp
  deleted_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  question_templates: question_template_bool_exp
  region: String_comparison_exp
  sms_template_templates: sms_template_template_bool_exp
  template_uuid: String_comparison_exp
  therapist_role: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "templates"
"""
enum templates_constraint {
  """unique or primary key constraint"""
  idx_51590_primary
}

"""
input type for incrementing numeric columns in table "templates"
"""
input templates_inc_input {
  id: bigint
}

"""
input type for inserting data into table "templates"
"""
input templates_insert_input {
  accessible: String
  accessibleByAccessible: accessible_obj_rel_insert_input
  archived: Boolean
  attributes: String
  consent_template_to_templates: consent_template_to_template_arr_rel_insert_input
  context: String
  contextByContext: contexts_obj_rel_insert_input
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  question_templates: question_template_arr_rel_insert_input
  region: String
  sms_template_templates: sms_template_template_arr_rel_insert_input
  template_uuid: String
  therapist_role: String
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type templates_max_fields {
  accessible: String
  attributes: String
  context: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  region: String
  template_uuid: String
  therapist_role: String
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "templates"
"""
input templates_max_order_by {
  accessible: order_by
  attributes: order_by
  context: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  region: order_by
  template_uuid: order_by
  therapist_role: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type templates_min_fields {
  accessible: String
  attributes: String
  context: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  region: String
  template_uuid: String
  therapist_role: String
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "templates"
"""
input templates_min_order_by {
  accessible: order_by
  attributes: order_by
  context: order_by
  created_at: order_by

  """(DC2Type:guid)"""
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  region: order_by
  template_uuid: order_by
  therapist_role: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "templates"
"""
type templates_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [templates!]!
}

"""
input type for inserting object relation for remote table "templates"
"""
input templates_obj_rel_insert_input {
  data: templates_insert_input!

  """on conflict condition"""
  on_conflict: templates_on_conflict
}

"""
on conflict condition type for table "templates"
"""
input templates_on_conflict {
  constraint: templates_constraint!
  update_columns: [templates_update_column!]! = []
  where: templates_bool_exp
}

"""Ordering options when selecting data from "templates"."""
input templates_order_by {
  accessible: order_by
  accessibleByAccessible: accessible_order_by
  archived: order_by
  attributes: order_by
  consent_template_to_templates_aggregate: consent_template_to_template_aggregate_order_by
  context: order_by
  contextByContext: contexts_order_by
  created_at: order_by
  customer_id: order_by
  deleted_at: order_by
  id: order_by
  question_templates_aggregate: question_template_aggregate_order_by
  region: order_by
  sms_template_templates_aggregate: sms_template_template_aggregate_order_by
  template_uuid: order_by
  therapist_role: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: templates"""
input templates_pk_columns_input {
  id: bigint!
}

"""
select columns of table "templates"
"""
enum templates_select_column {
  """column name"""
  accessible

  """column name"""
  archived

  """column name"""
  attributes

  """column name"""
  context

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  region

  """column name"""
  template_uuid

  """column name"""
  therapist_role

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "templates"
"""
input templates_set_input {
  accessible: String
  archived: Boolean
  attributes: String
  context: String
  created_at: timestamptz

  """(DC2Type:guid)"""
  customer_id: String
  deleted_at: timestamptz
  id: bigint
  region: String
  template_uuid: String
  therapist_role: String
  title: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type templates_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "templates"
"""
input templates_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type templates_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "templates"
"""
input templates_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type templates_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "templates"
"""
input templates_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type templates_sum_fields {
  id: bigint
}

"""
order by sum() on columns of table "templates"
"""
input templates_sum_order_by {
  id: order_by
}

"""
update columns of table "templates"
"""
enum templates_update_column {
  """column name"""
  accessible

  """column name"""
  archived

  """column name"""
  attributes

  """column name"""
  context

  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  region

  """column name"""
  template_uuid

  """column name"""
  therapist_role

  """column name"""
  title

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type templates_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "templates"
"""
input templates_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type templates_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "templates"
"""
input templates_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type templates_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "templates"
"""
input templates_variance_order_by {
  id: order_by
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "types"
"""
type types {
  comment: String

  """An array relationship"""
  consent_templates(
    """distinct select on columns"""
    distinct_on: [consent_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_templates_order_by!]

    """filter the rows returned"""
    where: consent_templates_bool_exp
  ): [consent_templates!]!

  """An aggregate relationship"""
  consent_templates_aggregate(
    """distinct select on columns"""
    distinct_on: [consent_templates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consent_templates_order_by!]

    """filter the rows returned"""
    where: consent_templates_bool_exp
  ): consent_templates_aggregate!

  """An array relationship"""
  consents(
    """distinct select on columns"""
    distinct_on: [consents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consents_order_by!]

    """filter the rows returned"""
    where: consents_bool_exp
  ): [consents!]!

  """An aggregate relationship"""
  consents_aggregate(
    """distinct select on columns"""
    distinct_on: [consents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [consents_order_by!]

    """filter the rows returned"""
    where: consents_bool_exp
  ): consents_aggregate!
  name: String!
}

"""
aggregated selection of "types"
"""
type types_aggregate {
  aggregate: types_aggregate_fields
  nodes: [types!]!
}

"""
aggregate fields of "types"
"""
type types_aggregate_fields {
  count(columns: [types_select_column!], distinct: Boolean): Int!
  max: types_max_fields
  min: types_min_fields
}

"""
Boolean expression to filter rows from the table "types". All fields are combined with a logical 'AND'.
"""
input types_bool_exp {
  _and: [types_bool_exp!]
  _not: types_bool_exp
  _or: [types_bool_exp!]
  comment: String_comparison_exp
  consent_templates: consent_templates_bool_exp
  consents: consents_bool_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "types"
"""
enum types_constraint {
  """unique or primary key constraint"""
  types_pkey
}

"""
input type for inserting data into table "types"
"""
input types_insert_input {
  comment: String
  consent_templates: consent_templates_arr_rel_insert_input
  consents: consents_arr_rel_insert_input
  name: String
}

"""aggregate max on columns"""
type types_max_fields {
  comment: String
  name: String
}

"""aggregate min on columns"""
type types_min_fields {
  comment: String
  name: String
}

"""
response of any mutation on the table "types"
"""
type types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [types!]!
}

"""
input type for inserting object relation for remote table "types"
"""
input types_obj_rel_insert_input {
  data: types_insert_input!

  """on conflict condition"""
  on_conflict: types_on_conflict
}

"""
on conflict condition type for table "types"
"""
input types_on_conflict {
  constraint: types_constraint!
  update_columns: [types_update_column!]! = []
  where: types_bool_exp
}

"""Ordering options when selecting data from "types"."""
input types_order_by {
  comment: order_by
  consent_templates_aggregate: consent_templates_aggregate_order_by
  consents_aggregate: consents_aggregate_order_by
  name: order_by
}

"""primary key columns input for table: types"""
input types_pk_columns_input {
  name: String!
}

"""
select columns of table "types"
"""
enum types_select_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
input type for updating data in table "types"
"""
input types_set_input {
  comment: String
  name: String
}

"""
update columns of table "types"
"""
enum types_update_column {
  """column name"""
  comment

  """column name"""
  name
}

"""
columns and relationships of "unseen_documents"
"""
type unseen_documents {
  archived: Boolean
  customer_id: String
  initiator: String
  patient_id: String
  soknad_id: String
  total: bigint
}

"""
aggregated selection of "unseen_documents"
"""
type unseen_documents_aggregate {
  aggregate: unseen_documents_aggregate_fields
  nodes: [unseen_documents!]!
}

"""
aggregate fields of "unseen_documents"
"""
type unseen_documents_aggregate_fields {
  avg: unseen_documents_avg_fields
  count(columns: [unseen_documents_select_column!], distinct: Boolean): Int!
  max: unseen_documents_max_fields
  min: unseen_documents_min_fields
  stddev: unseen_documents_stddev_fields
  stddev_pop: unseen_documents_stddev_pop_fields
  stddev_samp: unseen_documents_stddev_samp_fields
  sum: unseen_documents_sum_fields
  var_pop: unseen_documents_var_pop_fields
  var_samp: unseen_documents_var_samp_fields
  variance: unseen_documents_variance_fields
}

"""aggregate avg on columns"""
type unseen_documents_avg_fields {
  total: Float
}

"""
Boolean expression to filter rows from the table "unseen_documents". All fields are combined with a logical 'AND'.
"""
input unseen_documents_bool_exp {
  _and: [unseen_documents_bool_exp!]
  _not: unseen_documents_bool_exp
  _or: [unseen_documents_bool_exp!]
  archived: Boolean_comparison_exp
  customer_id: String_comparison_exp
  initiator: String_comparison_exp
  patient_id: String_comparison_exp
  soknad_id: String_comparison_exp
  total: bigint_comparison_exp
}

"""aggregate max on columns"""
type unseen_documents_max_fields {
  customer_id: String
  initiator: String
  patient_id: String
  soknad_id: String
  total: bigint
}

"""aggregate min on columns"""
type unseen_documents_min_fields {
  customer_id: String
  initiator: String
  patient_id: String
  soknad_id: String
  total: bigint
}

"""Ordering options when selecting data from "unseen_documents"."""
input unseen_documents_order_by {
  archived: order_by
  customer_id: order_by
  initiator: order_by
  patient_id: order_by
  soknad_id: order_by
  total: order_by
}

"""
select columns of table "unseen_documents"
"""
enum unseen_documents_select_column {
  """column name"""
  archived

  """column name"""
  customer_id

  """column name"""
  initiator

  """column name"""
  patient_id

  """column name"""
  soknad_id

  """column name"""
  total
}

"""aggregate stddev on columns"""
type unseen_documents_stddev_fields {
  total: Float
}

"""aggregate stddev_pop on columns"""
type unseen_documents_stddev_pop_fields {
  total: Float
}

"""aggregate stddev_samp on columns"""
type unseen_documents_stddev_samp_fields {
  total: Float
}

"""aggregate sum on columns"""
type unseen_documents_sum_fields {
  total: bigint
}

"""aggregate var_pop on columns"""
type unseen_documents_var_pop_fields {
  total: Float
}

"""aggregate var_samp on columns"""
type unseen_documents_var_samp_fields {
  total: Float
}

"""aggregate variance on columns"""
type unseen_documents_variance_fields {
  total: Float
}

"""
columns and relationships of "unseen_queries"
"""
type unseen_queries {
  archived: Boolean
  customer_id: String
  initiator: String
  patient_id: String
  soknad_id: String
  total: bigint
}

"""
aggregated selection of "unseen_queries"
"""
type unseen_queries_aggregate {
  aggregate: unseen_queries_aggregate_fields
  nodes: [unseen_queries!]!
}

"""
aggregate fields of "unseen_queries"
"""
type unseen_queries_aggregate_fields {
  avg: unseen_queries_avg_fields
  count(columns: [unseen_queries_select_column!], distinct: Boolean): Int!
  max: unseen_queries_max_fields
  min: unseen_queries_min_fields
  stddev: unseen_queries_stddev_fields
  stddev_pop: unseen_queries_stddev_pop_fields
  stddev_samp: unseen_queries_stddev_samp_fields
  sum: unseen_queries_sum_fields
  var_pop: unseen_queries_var_pop_fields
  var_samp: unseen_queries_var_samp_fields
  variance: unseen_queries_variance_fields
}

"""aggregate avg on columns"""
type unseen_queries_avg_fields {
  total: Float
}

"""
Boolean expression to filter rows from the table "unseen_queries". All fields are combined with a logical 'AND'.
"""
input unseen_queries_bool_exp {
  _and: [unseen_queries_bool_exp!]
  _not: unseen_queries_bool_exp
  _or: [unseen_queries_bool_exp!]
  archived: Boolean_comparison_exp
  customer_id: String_comparison_exp
  initiator: String_comparison_exp
  patient_id: String_comparison_exp
  soknad_id: String_comparison_exp
  total: bigint_comparison_exp
}

"""aggregate max on columns"""
type unseen_queries_max_fields {
  customer_id: String
  initiator: String
  patient_id: String
  soknad_id: String
  total: bigint
}

"""aggregate min on columns"""
type unseen_queries_min_fields {
  customer_id: String
  initiator: String
  patient_id: String
  soknad_id: String
  total: bigint
}

"""Ordering options when selecting data from "unseen_queries"."""
input unseen_queries_order_by {
  archived: order_by
  customer_id: order_by
  initiator: order_by
  patient_id: order_by
  soknad_id: order_by
  total: order_by
}

"""
select columns of table "unseen_queries"
"""
enum unseen_queries_select_column {
  """column name"""
  archived

  """column name"""
  customer_id

  """column name"""
  initiator

  """column name"""
  patient_id

  """column name"""
  soknad_id

  """column name"""
  total
}

"""aggregate stddev on columns"""
type unseen_queries_stddev_fields {
  total: Float
}

"""aggregate stddev_pop on columns"""
type unseen_queries_stddev_pop_fields {
  total: Float
}

"""aggregate stddev_samp on columns"""
type unseen_queries_stddev_samp_fields {
  total: Float
}

"""aggregate sum on columns"""
type unseen_queries_sum_fields {
  total: bigint
}

"""aggregate var_pop on columns"""
type unseen_queries_var_pop_fields {
  total: Float
}

"""aggregate var_samp on columns"""
type unseen_queries_var_samp_fields {
  total: Float
}

"""aggregate variance on columns"""
type unseen_queries_variance_fields {
  total: Float
}
